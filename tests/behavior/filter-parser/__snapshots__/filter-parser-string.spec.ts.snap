// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Filter Parser And Parser Should able to group comparisons 1`] = `
Object {
  "left": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 12345234554,
  },
  "name": "and",
  "right": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": "lorem ipsum",
  },
  "type": "Binary",
}
`;

exports[`Filter Parser And Parser Should able to pipe logical expression 1`] = `
Object {
  "left": Object {
    "left": Object {
      "name": "eq",
      "prop": "column",
      "type": "Comparison",
      "value": 1,
    },
    "name": "and",
    "right": Object {
      "name": "eq",
      "prop": "column",
      "type": "Comparison",
      "value": 2,
    },
    "type": "Binary",
  },
  "name": "and",
  "right": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 3,
  },
  "type": "Binary",
}
`;

exports[`Filter Parser And Parser Should case insensitive 1`] = `
Object {
  "left": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 12345234554,
  },
  "name": "and",
  "right": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": "lorem ipsum",
  },
  "type": "Binary",
}
`;

exports[`Filter Parser And Parser Should skip white space 1`] = `
Object {
  "left": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 12345234554,
  },
  "name": "and",
  "right": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": "lorem ipsum",
  },
  "type": "Binary",
}
`;

exports[`Filter Parser Equal Parser Should able to compare property with boolean 1`] = `
Object {
  "name": "eq",
  "prop": "column",
  "type": "Comparison",
  "value": true,
}
`;

exports[`Filter Parser Equal Parser Should able to compare property with boolean 2`] = `
Object {
  "name": "eq",
  "prop": "column",
  "type": "Comparison",
  "value": false,
}
`;

exports[`Filter Parser Equal Parser Should able to compare property with number 1`] = `
Object {
  "name": "eq",
  "prop": "column",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Equal Parser Should able to compare property with number 2`] = `
Object {
  "name": "eq",
  "prop": "column",
  "type": "Comparison",
  "value": 123452.234,
}
`;

exports[`Filter Parser Equal Parser Should able to compare property with string 1`] = `
Object {
  "name": "eq",
  "prop": "column",
  "type": "Comparison",
  "value": "lorem ipsum",
}
`;

exports[`Filter Parser Equal Parser Should able to compare property with string 2`] = `
Object {
  "name": "eq",
  "prop": "column",
  "type": "Comparison",
  "value": "lorem ipsum",
}
`;

exports[`Filter Parser Equal Parser Should able to use swap position of property and value 1`] = `
Object {
  "name": "eq",
  "prop": "column",
  "type": "Comparison",
  "value": 1234,
}
`;

exports[`Filter Parser Equal Parser Should allow property name ends with number 1`] = `
Object {
  "name": "eq",
  "prop": "column123",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Equal Parser Should allow property name with underscore 1`] = `
Object {
  "name": "eq",
  "prop": "column_123",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Equal Parser Should skip white space 1`] = `
Object {
  "name": "eq",
  "prop": "column",
  "type": "Comparison",
  "value": 12345,
}
`;

exports[`Filter Parser Greater Than Equal Parser Should able to compare property with boolean 1`] = `
Object {
  "name": "gte",
  "prop": "column",
  "type": "Comparison",
  "value": true,
}
`;

exports[`Filter Parser Greater Than Equal Parser Should able to compare property with boolean 2`] = `
Object {
  "name": "gte",
  "prop": "column",
  "type": "Comparison",
  "value": false,
}
`;

exports[`Filter Parser Greater Than Equal Parser Should able to compare property with number 1`] = `
Object {
  "name": "gte",
  "prop": "column",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Greater Than Equal Parser Should able to compare property with number 2`] = `
Object {
  "name": "gte",
  "prop": "column",
  "type": "Comparison",
  "value": 123452.234,
}
`;

exports[`Filter Parser Greater Than Equal Parser Should able to compare property with string 1`] = `
Object {
  "name": "gte",
  "prop": "column",
  "type": "Comparison",
  "value": "lorem ipsum",
}
`;

exports[`Filter Parser Greater Than Equal Parser Should able to compare property with string 2`] = `
Object {
  "name": "gte",
  "prop": "column",
  "type": "Comparison",
  "value": "lorem ipsum",
}
`;

exports[`Filter Parser Greater Than Equal Parser Should able to use swap position of property and value 1`] = `
Object {
  "name": "gte",
  "prop": "column",
  "type": "Comparison",
  "value": 1234,
}
`;

exports[`Filter Parser Greater Than Equal Parser Should allow property name ends with number 1`] = `
Object {
  "name": "gte",
  "prop": "column123",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Greater Than Equal Parser Should allow property name with underscore 1`] = `
Object {
  "name": "gte",
  "prop": "column_123",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Greater Than Equal Parser Should skip white space 1`] = `
Object {
  "name": "gte",
  "prop": "column",
  "type": "Comparison",
  "value": 12345,
}
`;

exports[`Filter Parser Greater Than Parser Should able to compare property with boolean 1`] = `
Object {
  "name": "gt",
  "prop": "column",
  "type": "Comparison",
  "value": true,
}
`;

exports[`Filter Parser Greater Than Parser Should able to compare property with boolean 2`] = `
Object {
  "name": "gt",
  "prop": "column",
  "type": "Comparison",
  "value": false,
}
`;

exports[`Filter Parser Greater Than Parser Should able to compare property with number 1`] = `
Object {
  "name": "gt",
  "prop": "column",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Greater Than Parser Should able to compare property with number 2`] = `
Object {
  "name": "gt",
  "prop": "column",
  "type": "Comparison",
  "value": 123452.234,
}
`;

exports[`Filter Parser Greater Than Parser Should able to compare property with string 1`] = `
Object {
  "name": "gt",
  "prop": "column",
  "type": "Comparison",
  "value": "lorem ipsum",
}
`;

exports[`Filter Parser Greater Than Parser Should able to compare property with string 2`] = `
Object {
  "name": "gt",
  "prop": "column",
  "type": "Comparison",
  "value": "lorem ipsum",
}
`;

exports[`Filter Parser Greater Than Parser Should able to use swap position of property and value 1`] = `
Object {
  "name": "gt",
  "prop": "column",
  "type": "Comparison",
  "value": 1234,
}
`;

exports[`Filter Parser Greater Than Parser Should allow property name ends with number 1`] = `
Object {
  "name": "gt",
  "prop": "column123",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Greater Than Parser Should allow property name with underscore 1`] = `
Object {
  "name": "gt",
  "prop": "column_123",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Greater Than Parser Should skip white space 1`] = `
Object {
  "name": "gt",
  "prop": "column",
  "type": "Comparison",
  "value": 12345,
}
`;

exports[`Filter Parser Group Parser Should able to group comparison 1`] = `
Object {
  "expr": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 12345234554,
  },
  "type": "Parenthesis",
}
`;

exports[`Filter Parser Group Parser Should able to group logic 1`] = `
Object {
  "expr": Object {
    "left": Object {
      "name": "eq",
      "prop": "column",
      "type": "Comparison",
      "value": 12345234554,
    },
    "name": "and",
    "right": Object {
      "name": "eq",
      "prop": "column",
      "type": "Comparison",
      "value": "lorem ipsum",
    },
    "type": "Binary",
  },
  "type": "Parenthesis",
}
`;

exports[`Filter Parser Group Parser Should prioritized group 1`] = `
Object {
  "left": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 1,
  },
  "name": "and",
  "right": Object {
    "expr": Object {
      "left": Object {
        "name": "eq",
        "prop": "column",
        "type": "Comparison",
        "value": 2,
      },
      "name": "and",
      "right": Object {
        "name": "eq",
        "prop": "column",
        "type": "Comparison",
        "value": 3,
      },
      "type": "Binary",
    },
    "type": "Parenthesis",
  },
  "type": "Binary",
}
`;

exports[`Filter Parser Group Parser Should prioritized group 2`] = `
Object {
  "left": Object {
    "left": Object {
      "name": "eq",
      "prop": "column",
      "type": "Comparison",
      "value": 1,
    },
    "name": "and",
    "right": Object {
      "expr": Object {
        "left": Object {
          "name": "eq",
          "prop": "column",
          "type": "Comparison",
          "value": 2,
        },
        "name": "and",
        "right": Object {
          "name": "eq",
          "prop": "column",
          "type": "Comparison",
          "value": 3,
        },
        "type": "Binary",
      },
      "type": "Parenthesis",
    },
    "type": "Binary",
  },
  "name": "and",
  "right": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 4,
  },
  "type": "Binary",
}
`;

exports[`Filter Parser Less Than Equal Parser Should able to compare property with boolean 1`] = `
Object {
  "name": "lte",
  "prop": "column",
  "type": "Comparison",
  "value": true,
}
`;

exports[`Filter Parser Less Than Equal Parser Should able to compare property with boolean 2`] = `
Object {
  "name": "lte",
  "prop": "column",
  "type": "Comparison",
  "value": false,
}
`;

exports[`Filter Parser Less Than Equal Parser Should able to compare property with number 1`] = `
Object {
  "name": "lte",
  "prop": "column",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Less Than Equal Parser Should able to compare property with number 2`] = `
Object {
  "name": "lte",
  "prop": "column",
  "type": "Comparison",
  "value": 123452.234,
}
`;

exports[`Filter Parser Less Than Equal Parser Should able to compare property with string 1`] = `
Object {
  "name": "lte",
  "prop": "column",
  "type": "Comparison",
  "value": "lorem ipsum",
}
`;

exports[`Filter Parser Less Than Equal Parser Should able to compare property with string 2`] = `
Object {
  "name": "lte",
  "prop": "column",
  "type": "Comparison",
  "value": "lorem ipsum",
}
`;

exports[`Filter Parser Less Than Equal Parser Should able to use swap position of property and value 1`] = `
Object {
  "name": "lte",
  "prop": "column",
  "type": "Comparison",
  "value": 1234,
}
`;

exports[`Filter Parser Less Than Equal Parser Should allow property name ends with number 1`] = `
Object {
  "name": "lte",
  "prop": "column123",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Less Than Equal Parser Should allow property name with underscore 1`] = `
Object {
  "name": "lte",
  "prop": "column_123",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Less Than Equal Parser Should skip white space 1`] = `
Object {
  "name": "lte",
  "prop": "column",
  "type": "Comparison",
  "value": 12345,
}
`;

exports[`Filter Parser Less Than Parser Should able to compare property with boolean 1`] = `
Object {
  "name": "lt",
  "prop": "column",
  "type": "Comparison",
  "value": true,
}
`;

exports[`Filter Parser Less Than Parser Should able to compare property with boolean 2`] = `
Object {
  "name": "lt",
  "prop": "column",
  "type": "Comparison",
  "value": false,
}
`;

exports[`Filter Parser Less Than Parser Should able to compare property with number 1`] = `
Object {
  "name": "lt",
  "prop": "column",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Less Than Parser Should able to compare property with number 2`] = `
Object {
  "name": "lt",
  "prop": "column",
  "type": "Comparison",
  "value": 123452.234,
}
`;

exports[`Filter Parser Less Than Parser Should able to compare property with string 1`] = `
Object {
  "name": "lt",
  "prop": "column",
  "type": "Comparison",
  "value": "lorem ipsum",
}
`;

exports[`Filter Parser Less Than Parser Should able to compare property with string 2`] = `
Object {
  "name": "lt",
  "prop": "column",
  "type": "Comparison",
  "value": "lorem ipsum",
}
`;

exports[`Filter Parser Less Than Parser Should able to use swap position of property and value 1`] = `
Object {
  "name": "lt",
  "prop": "column",
  "type": "Comparison",
  "value": 1234,
}
`;

exports[`Filter Parser Less Than Parser Should allow property name ends with number 1`] = `
Object {
  "name": "lt",
  "prop": "column123",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Less Than Parser Should allow property name with underscore 1`] = `
Object {
  "name": "lt",
  "prop": "column_123",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Less Than Parser Should skip white space 1`] = `
Object {
  "name": "lt",
  "prop": "column",
  "type": "Comparison",
  "value": 12345,
}
`;

exports[`Filter Parser Like Value Should ignore star in side chars 1`] = `
Object {
  "name": "contains",
  "prop": "column",
  "type": "Comparison",
  "value": "a*bc",
}
`;

exports[`Filter Parser Like Value Should parse contains 1`] = `
Object {
  "name": "contains",
  "prop": "column",
  "type": "Comparison",
  "value": "abc",
}
`;

exports[`Filter Parser Like Value Should parse ends with 1`] = `
Object {
  "name": "eq",
  "prop": "column",
  "type": "Comparison",
  "value": "*abc",
}
`;

exports[`Filter Parser Like Value Should parse starts with 1`] = `
Object {
  "name": "eq",
  "prop": "column",
  "type": "Comparison",
  "value": "abc*",
}
`;

exports[`Filter Parser Not Equal Parser Should able to compare property with boolean 1`] = `
Object {
  "name": "ne",
  "prop": "column",
  "type": "Comparison",
  "value": true,
}
`;

exports[`Filter Parser Not Equal Parser Should able to compare property with boolean 2`] = `
Object {
  "name": "ne",
  "prop": "column",
  "type": "Comparison",
  "value": false,
}
`;

exports[`Filter Parser Not Equal Parser Should able to compare property with number 1`] = `
Object {
  "name": "ne",
  "prop": "column",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Not Equal Parser Should able to compare property with number 2`] = `
Object {
  "name": "ne",
  "prop": "column",
  "type": "Comparison",
  "value": 123452.234,
}
`;

exports[`Filter Parser Not Equal Parser Should able to compare property with string 1`] = `
Object {
  "name": "ne",
  "prop": "column",
  "type": "Comparison",
  "value": "lorem ipsum",
}
`;

exports[`Filter Parser Not Equal Parser Should able to compare property with string 2`] = `
Object {
  "name": "ne",
  "prop": "column",
  "type": "Comparison",
  "value": "lorem ipsum",
}
`;

exports[`Filter Parser Not Equal Parser Should able to use swap position of property and value 1`] = `
Object {
  "name": "ne",
  "prop": "column",
  "type": "Comparison",
  "value": 1234,
}
`;

exports[`Filter Parser Not Equal Parser Should allow property name ends with number 1`] = `
Object {
  "name": "ne",
  "prop": "column123",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Not Equal Parser Should allow property name with underscore 1`] = `
Object {
  "name": "ne",
  "prop": "column_123",
  "type": "Comparison",
  "value": 12345234554,
}
`;

exports[`Filter Parser Not Equal Parser Should skip white space 1`] = `
Object {
  "name": "ne",
  "prop": "column",
  "type": "Comparison",
  "value": 12345,
}
`;

exports[`Filter Parser Not Parser Should able to use not with column 1`] = `
Object {
  "expr": Object {
    "prop": "column",
  },
  "name": "not",
  "type": "Unary",
}
`;

exports[`Filter Parser Not Parser Should able to use not with expression 1`] = `
Object {
  "expr": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 12345234554,
  },
  "name": "not",
  "type": "Unary",
}
`;

exports[`Filter Parser Not Parser Should able to use without space 1`] = `
Object {
  "expr": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 123,
  },
  "name": "not",
  "type": "Unary",
}
`;

exports[`Filter Parser Not Parser Should able to use without space 2`] = `
Object {
  "expr": Object {
    "prop": "column",
  },
  "name": "not",
  "type": "Unary",
}
`;

exports[`Filter Parser Not Parser Should not confused in string 1`] = `
Object {
  "name": "eq",
  "prop": "column",
  "type": "Comparison",
  "value": "!123",
}
`;

exports[`Filter Parser Not Parser Should prioritized than binary expression 1`] = `
Object {
  "left": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 123,
  },
  "name": "and",
  "right": Object {
    "expr": Object {
      "expr": Object {
        "name": "eq",
        "prop": "column",
        "type": "Comparison",
        "value": 12345234554,
      },
      "type": "Parenthesis",
    },
    "name": "not",
    "type": "Unary",
  },
  "type": "Binary",
}
`;

exports[`Filter Parser Or Parser Should able to group comparisons 1`] = `
Object {
  "left": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 12345234554,
  },
  "name": "or",
  "right": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": "lorem ipsum",
  },
  "type": "Binary",
}
`;

exports[`Filter Parser Or Parser Should able to pipe logical expression 1`] = `
Object {
  "left": Object {
    "left": Object {
      "name": "eq",
      "prop": "column",
      "type": "Comparison",
      "value": 1,
    },
    "name": "or",
    "right": Object {
      "name": "eq",
      "prop": "column",
      "type": "Comparison",
      "value": 2,
    },
    "type": "Binary",
  },
  "name": "or",
  "right": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 3,
  },
  "type": "Binary",
}
`;

exports[`Filter Parser Or Parser Should case insensitive 1`] = `
Object {
  "left": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 12345234554,
  },
  "name": "or",
  "right": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": "lorem ipsum",
  },
  "type": "Binary",
}
`;

exports[`Filter Parser Or Parser Should skip white space 1`] = `
Object {
  "left": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": 12345234554,
  },
  "name": "or",
  "right": Object {
    "name": "eq",
    "prop": "column",
    "type": "Comparison",
    "value": "lorem ipsum",
  },
  "type": "Binary",
}
`;

exports[`Filter Parser Range Value Should not parse boolean range 1`] = `
"Syntax error at line 1 col 13:

1 column=true to false
              ^

Unexpected \\"t\\". Instead, I was expecting to see one of the following:

A character matching /[ \\\\t\\\\n\\\\v\\\\f]/ based on:
    wschar →  ● /[ \\\\t\\\\n\\\\v\\\\f]/
    _$ebnf$1 → _$ebnf$1 ● wschar
    _ →  ● _$ebnf$1
    binary → binary ● _ binary$subexpression$2 _ unary
    main → _ ● binary _
A character matching /[oO]/ based on:
    binary$subexpression$1 →  ● /[oO]/ /[rR]/
    binary → binary _ ● binary$subexpression$1 _ unary
    main → _ ● binary _
A character matching /[aA]/ based on:
    binary$subexpression$2 →  ● /[aA]/ /[nN]/ /[dD]/
    binary → binary _ ● binary$subexpression$2 _ unary
    main → _ ● binary _
"
`;

exports[`Filter Parser Range Value Should parse case insensitive 1`] = `
Object {
  "name": "range",
  "prop": "column",
  "type": "Comparison",
  "value": Array [
    1,
    2,
  ],
}
`;

exports[`Filter Parser Range Value Should parse correctly 1`] = `
Object {
  "name": "range",
  "prop": "column",
  "type": "Comparison",
  "value": Array [
    1,
    2,
  ],
}
`;

exports[`Filter Parser Range Value Should parse grouping 1`] = `
Object {
  "name": "range",
  "prop": "column",
  "type": "Comparison",
  "value": Array [
    1,
    2,
  ],
}
`;

exports[`Filter Parser Range Value Should parse string range 1`] = `
Object {
  "name": "range",
  "prop": "column",
  "type": "Comparison",
  "value": Array [
    "2020-1-1",
    "2020-1-1",
  ],
}
`;
