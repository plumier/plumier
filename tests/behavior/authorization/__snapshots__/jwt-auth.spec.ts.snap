// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JwtAuth Analyzer Message Should print access on virtual route 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.method() -> Authenticated GET /animal/method",
  ],
  Array [
    "2. MyFacility                -> Public        GET /other/get",
  ],
  Array [],
]
`;

exports[`JwtAuth Authorization Policy Should able to apply mix policies on projection authorization 1`] = `
Object {
  "name": "mimi",
  "secret": "secret",
}
`;

exports[`JwtAuth Authorization Policy Should able to apply mix policies on projection authorization 2`] = `
Object {
  "name": "mimi",
  "secret": "secret",
}
`;

exports[`JwtAuth Authorization Policy Should able to apply policies on projection authorization 1`] = `
Object {
  "name": "mimi",
}
`;

exports[`JwtAuth Authorization Policy Should able to apply policies on projection authorization 2`] = `
Object {
  "name": "mimi",
  "secret": "secret",
}
`;

exports[`JwtAuth Basic Authorization Should able to mix controller scope authorizer with other decorators 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> superadmin    GET /animal/get",
  ],
  Array [
    "2. AnimalController.list() -> Authenticated GET /animal/list",
  ],
  Array [],
]
`;

exports[`JwtAuth Basic Authorization Should prioritize header vs cookie if specified both 1`] = `
Object {
  "email": "ketut@gmail.com",
  "role": "user",
}
`;

exports[`JwtAuth Default Configuration Should throw error when no secret provided nor environment variable 1`] = `
Array [
  Array [
    "JWT Secret not provided. Provide secret on JwtAuthFacility constructor or environment variable PLUM_JWT_SECRET",
  ],
]
`;

exports[`JwtAuth Entity Policy Should be able to secure read access to property using entity policy 1`] = `
Object {
  "basePrice": 100,
  "id": 1,
  "name": "Vanilla",
  "price": 200,
  "shop": 1,
}
`;

exports[`JwtAuth Entity Policy Should be able to secure read access to property using entity policy 2`] = `
Object {
  "id": 1,
  "name": "Vanilla",
  "price": 200,
  "shop": 1,
}
`;

exports[`JwtAuth Parameter Authorization Custom Parameter Authorizer Should be able get current metadata information 1`] = `
Array [
  Array [
    Object {
      "decorators": Array [
        Object {
          "access": "write",
          "authorize": onlyAdmin,
          "evaluation": "Dynamic",
          "location": "Parameter",
          "tag": "Custom",
          "type": "plumier-meta:authorize",
          Symbol(tinspector:decoratorOption): Object {
            "access": "write",
            "allowMultiple": true,
            "applyTo": Array [],
            "evaluation": "Dynamic",
            "inherit": true,
            "removeApplied": true,
            "tag": "Custom",
          },
        },
      ],
      "get": undefined,
      "index": 1,
      "isParameter": true,
      "kind": "Property",
      "name": "id",
      "parent": Animal,
      "set": undefined,
      "type": Object,
      "typeClassification": "Primitive",
    },
  ],
  Array [
    Object {
      "decorators": Array [
        Object {
          "access": "write",
          "authorize": onlyAdmin,
          "evaluation": "Dynamic",
          "location": "Parameter",
          "tag": "Custom",
          "type": "plumier-meta:authorize",
          Symbol(tinspector:decoratorOption): Object {
            "access": "write",
            "allowMultiple": true,
            "applyTo": Array [],
            "evaluation": "Dynamic",
            "inherit": true,
            "removeApplied": true,
            "tag": "Custom",
          },
        },
      ],
      "get": undefined,
      "index": 2,
      "isParameter": true,
      "kind": "Property",
      "name": "deceased",
      "parent": Animal,
      "set": undefined,
      "type": Object,
      "typeClassification": "Primitive",
    },
  ],
]
`;

exports[`JwtAuth Parameter Authorization Custom Parameter Authorizer Should be able get value and its parent value 1`] = `
Array [
  Array [
    Object {
      "parentValue": Animal {
        "deceased": "Yes",
        "id": "123",
      },
      "value": "Yes",
    },
  ],
]
`;

exports[`JwtAuth Response Authorization Custom Authorizer Should able to access current property metadata 1`] = `
Array [
  Array [
    Object {
      "decorators": Array [
        Object {
          "access": "read",
          "authorize": onlyAdmin,
          "evaluation": "Dynamic",
          "location": "Parameter",
          "tag": "Custom",
          "type": "plumier-meta:authorize",
          Symbol(tinspector:decoratorOption): Object {
            "access": "read",
            "allowMultiple": true,
            "applyTo": Array [],
            "evaluation": "Dynamic",
            "inherit": true,
            "removeApplied": true,
            "tag": "Custom",
          },
        },
      ],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "name",
      "parent": User,
      "set": undefined,
      "type": String,
      "typeClassification": "Primitive",
    },
  ],
  Array [
    Object {
      "decorators": Array [
        Object {
          "access": "read",
          "authorize": onlyAdmin,
          "evaluation": "Dynamic",
          "location": "Parameter",
          "tag": "Custom",
          "type": "plumier-meta:authorize",
          Symbol(tinspector:decoratorOption): Object {
            "access": "read",
            "allowMultiple": true,
            "applyTo": Array [],
            "evaluation": "Dynamic",
            "inherit": true,
            "removeApplied": true,
            "tag": "Custom",
          },
        },
      ],
      "get": undefined,
      "index": 1,
      "isParameter": true,
      "kind": "Property",
      "name": "password",
      "parent": User,
      "set": undefined,
      "type": String,
      "typeClassification": "Primitive",
    },
  ],
]
`;

exports[`JwtAuth Response Authorization Custom Authorizer Should able to access value and parent value 1`] = `
Array [
  Array [
    Object {
      "parentValue": User {
        "name": "admin",
        "password": "secret",
      },
      "value": "secret",
    },
  ],
]
`;
