// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JwtAuth Analyzer Message Should detect missing entity policy and provider in first class entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Authenticated GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Authenticated POST   /user
 - error Entity policy ResourceOwner applied on non entity provider model User.role",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Authenticated GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Authenticated PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Authenticated PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Authenticated DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect missing entity policy on model 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. UsersController.save(id, data) -> Authenticated PUT /users
 - error Entity policy ResourceOwner for entity User is not found on model property User.role",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect missing entity policy on model with array type 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. UsersController.save(id, data) -> Authenticated PUT /users
 - error Entity policy ResourceOwner for entity User is not found on model property User.role",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect missing entity policy on parameter 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. UsersController.save(id, data) -> Authenticated PUT /users
 - error Entity policy ResourceOwner for entity User is not found on parameter data",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect missing entity policy on route 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. UsersController.save(id, data) -> ResourceOwner PUT /users
 - error Entity policy ResourceOwner for entity User is not found",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect missing entity policy on route with multiple policies 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. UsersController.save(id, data) -> ResourceOwner|ItemAdmin PUT /users
 - error Entity policy ResourceOwner, ItemAdmin for entity User are not found",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect mistyped auth name on action 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.authenticated() -> lorem GET /animal/authenticated
 - error Route uses unknown authorization policy lorem",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect mistyped auth name on action parameter 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.authenticated(id, name) -> Authenticated GET /animal/authenticated
 - error Parameter id uses unknown authorization policy lorem",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect mistyped auth name on action parameter with custom type 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.authenticated(data) -> Authenticated POST /animal/authenticated
 - error Model property Animal.name uses unknown authorization policy lorem",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect mistyped auth name on action return type 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.authenticated() -> Authenticated POST /animal/authenticated
 - error Return type property Animal.name uses unknown authorization policy lorem",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect mistyped auth name on action return type of type array 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.authenticated() -> Authenticated POST /animal/authenticated
 - error Return type property Animal.name uses unknown authorization policy lorem",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect mistyped auth name on controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.authenticated() -> lorem GET /animal/authenticated
 - error Route uses unknown authorization policy lorem",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect mistyped auth name on controller with multiple policies 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.authenticated() -> lorem|ipsum|dolor GET /animal/authenticated
 - error Route uses unknown authorization policy lorem, ipsum, dolor",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect mistyped auth name on controller with multiple policies, multiple decorators 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.authenticated() -> sit|amet|admin|ipsum|dolor GET /animal/authenticated
 - error Route uses unknown authorization policy sit, amet, ipsum, dolor",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect mistyped auth name on global authorize 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.authenticated() -> lorem GET /animal/authenticated
 - error Route uses unknown authorization policy lorem",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect when applied on non entity policy provider model property 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. UsersController.save(data) -> Authenticated POST /users
 - error Entity policy ResourceOwner applied on non entity provider model User.role",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect when applied on non entity policy provider model property of type array 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. UsersController.save(data) -> Authenticated POST /users
 - error Entity policy ResourceOwner applied on non entity provider model User.role",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect when applied on non entity policy provider parameter 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. UsersController.save(data) -> Authenticated POST /users
 - error Entity policy ResourceOwner applied on non entity provider parameter data",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should detect when applied on non entity policy provider route 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. UsersController.save(data) -> ResourceOwner POST /users
 - error Entity policy ResourceOwner applied on non entity provider",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should not showing readonly and writeonly error message 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.authenticated() -> Authenticated POST /animal/authenticated",
  ],
  Array [],
]
`;

exports[`JwtAuth Analyzer Message Should print access on virtual route 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.method() -> Authenticated GET /animal/method",
  ],
  Array [
    "2. MyFacility                -> Public        GET /other/get",
  ],
  Array [],
]
`;

exports[`JwtAuth Authorization Policy Should able to apply mix policies on projection authorization 1`] = `
Object {
  "name": "mimi",
  "secret": "secret",
}
`;

exports[`JwtAuth Authorization Policy Should able to apply mix policies on projection authorization 2`] = `
Object {
  "name": "mimi",
  "secret": "secret",
}
`;

exports[`JwtAuth Authorization Policy Should able to apply policies on projection authorization 1`] = `
Object {
  "name": "mimi",
}
`;

exports[`JwtAuth Authorization Policy Should able to apply policies on projection authorization 2`] = `
Object {
  "name": "mimi",
  "secret": "secret",
}
`;

exports[`JwtAuth Authorization Policy Should detect conflict auth policy name 1`] = `
Array [
  Array [
    [Error: There are more than one authorization policies named Orange],
  ],
]
`;

exports[`JwtAuth Authorization Policy Should detect conflict auth policy name once at a time 1`] = `
Array [
  Array [
    [Error: There are more than one authorization policies named Grape],
  ],
]
`;

exports[`JwtAuth Authorization Policy Should detect conflict auth policy name when more policy added 1`] = `
Array [
  Array [
    [Error: There are more than one authorization policies named Orange],
  ],
]
`;

exports[`JwtAuth Authorization Policy Should detect conflict auth policy name with default policies 1`] = `
Array [
  Array [
    [Error: There are more than one authorization policies named Public],
  ],
]
`;

exports[`JwtAuth Basic Authorization Should able to access user from middleware 1`] = `
Object {
  "email": "ketut@gmail.com",
  "iat": Any<Number>,
  "role": "user",
}
`;

exports[`JwtAuth Basic Authorization Should able to mix controller scope authorizer with other decorators 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> superadmin    GET /animal/get",
  ],
  Array [
    "2. AnimalController.list() -> Authenticated GET /animal/list",
  ],
  Array [],
]
`;

exports[`JwtAuth Basic Authorization Should prioritize header vs cookie if specified both 1`] = `
Object {
  "email": "ketut@gmail.com",
  "role": "user",
}
`;

exports[`JwtAuth Default Configuration Should throw error when no secret provided nor environment variable 1`] = `
Array [
  Array [
    "JWT Secret not provided. Provide secret on JwtAuthFacility constructor or environment variable PLUM_JWT_SECRET",
  ],
]
`;

exports[`JwtAuth Entity Policy Should be able to secure read access to property using entity policy 1`] = `
Object {
  "basePrice": 100,
  "id": 1,
  "name": "Vanilla",
  "price": 200,
  "shop": 1,
}
`;

exports[`JwtAuth Entity Policy Should be able to secure read access to property using entity policy 2`] = `
Object {
  "id": 1,
  "name": "Vanilla",
  "price": 200,
  "shop": 1,
}
`;

exports[`JwtAuth Entity Policy Should detect entity policy name conflict 1`] = `
Array [
  Array [
    [Error: There are more than one authorization policies named Tomato],
  ],
]
`;

exports[`JwtAuth Entity Policy Should detect entity policy name conflict with auth policy name 1`] = `
Array [
  Array [
    [Error: There are more than one authorization policies named Tomato],
  ],
]
`;

exports[`JwtAuth Entity Policy Should not conflict when the same name with different entity 1`] = `Array []`;
