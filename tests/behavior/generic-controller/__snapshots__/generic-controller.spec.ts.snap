// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Controller Builder Authorization Should able to authorize accessor routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list -> Admin GET /user",
  ],
  Array [
    "2. DefaultControllerGeneric.get  -> Admin GET /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize all routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Admin GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Admin POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Admin GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Admin PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Admin PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Admin DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize all routes using all key 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Admin GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Admin POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Admin GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Admin PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Admin PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Admin DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize mutator routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.save(data, ctx) -> Admin POST   /user",
  ],
  Array [
    "2. DefaultControllerGeneric.modify          -> Admin PATCH  /user/:id",
  ],
  Array [
    "3. DefaultControllerGeneric.replace         -> Admin PUT    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.delete(id, ctx) -> Admin DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize specific routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.save(data, ctx) -> Admin POST   /user",
  ],
  Array [
    "2. DefaultControllerGeneric.modify          -> Admin PATCH  /user/:id",
  ],
  Array [
    "3. DefaultControllerGeneric.replace         -> Admin PUT    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.delete(id, ctx) -> Admin DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize specific routes on one to many generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultOneToMany...eneric.save    -> Admin POST   /user/:pid/animals",
  ],
  Array [
    "2. DefaultOneToMany...eneric.modify  -> Admin PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "3. DefaultOneToMany...eneric.replace -> Admin PUT    /user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultOneToMany...eneric.delete  -> Admin DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize specific routes with multiple roles 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.save(data, ctx) -> Admin|SuperAdmin POST   /user",
  ],
  Array [
    "2. DefaultControllerGeneric.modify          -> Admin|SuperAdmin PATCH  /user/:id",
  ],
  Array [
    "3. DefaultControllerGeneric.replace         -> Admin|SuperAdmin PUT    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.delete(id, ctx) -> Admin|SuperAdmin DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to combine between accessor and mutator 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Authenticated GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Admin         POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Authenticated GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Admin         PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Admin         PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Admin         DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Enable Disable Routes Should able to enable accessor routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list -> GET /user",
  ],
  Array [
    "2. DefaultControllerGeneric.get  -> GET /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Enable Disable Routes Should able to enable all routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Enable Disable Routes Should able to enable all routes using all key 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Enable Disable Routes Should able to enable mutator routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    "2. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "3. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Enable Disable Routes Should enable specific routes on one to many generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultOneToMany...eneric.save    -> POST   /user/:pid/animals",
  ],
  Array [
    "2. DefaultOneToMany...eneric.modify  -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "3. DefaultOneToMany...eneric.replace -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultOneToMany...eneric.delete  -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Enable Disable Routes Should enable specific routes properly 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    "2. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "3. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Set Path Should able to set path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /users",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /users",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /users/:uid",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /users/:uid",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /users/:uid",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /users/:uid",
  ],
  Array [],
]
`;

exports[`Controller Builder Set Path Should able to set path on one to many generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultOneToMany...eneric.list    -> GET    /users/:uid/animals",
  ],
  Array [
    "2. DefaultOneToMany...eneric.save    -> POST   /users/:uid/animals",
  ],
  Array [
    "3. DefaultOneToMany...eneric.get     -> GET    /users/:uid/animals/:aid",
  ],
  Array [
    "4. DefaultOneToMany...eneric.modify  -> PATCH  /users/:uid/animals/:aid",
  ],
  Array [
    "5. DefaultOneToMany...eneric.replace -> PUT    /users/:uid/animals/:aid",
  ],
  Array [
    "6. DefaultOneToMany...eneric.delete  -> DELETE /users/:uid/animals/:aid",
  ],
  Array [],
]
`;

exports[`Custom Route Path Generic Controller Should contains correct query parameter 1`] = `
Array [
  Array [
    "1234",
  ],
]
`;

exports[`Custom Route Path Generic Controller Should generate routes with parameter property entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /user/:userid",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /user/:userid",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /user/:userid",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:userid",
  ],
  Array [],
]
`;

exports[`Custom Route Path Generic Controller Should throw error when no parameter at the end 1`] = `
Array [
  Array [
    [Error: PLUM1011: Custom route path 'user/:userId/data' on User entity, require path that ends with route parameter, example: animals/:animalId],
  ],
]
`;

exports[`Custom Route Path Generic Controller Should throw error when provided more than one parameter 1`] = `
Array [
  Array [
    [Error: PLUM1013: Custom route path 'user/:userId/data/:dataId' on User entity, must have one route parameter, example: animals/:animalId],
  ],
]
`;

exports[`Custom Route Path Generic Controller Should throw error when provided no parameter 1`] = `
Array [
  Array [
    [Error: PLUM1011: Custom route path 'user' on User entity, require path that ends with route parameter, example: animals/:animalId],
  ],
]
`;

exports[`Custom Route Path Generic One To Many Controller Should able to provide custom route path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultOneToMany...eneric.list    -> GET    /user/:userid/animal",
  ],
  Array [
    "2. DefaultOneToMany...eneric.save    -> POST   /user/:userid/animal",
  ],
  Array [
    "3. DefaultOneToMany...eneric.get     -> GET    /user/:userid/animal/:animalid",
  ],
  Array [
    "4. DefaultOneToMany...eneric.modify  -> PATCH  /user/:userid/animal/:animalid",
  ],
  Array [
    "5. DefaultOneToMany...eneric.replace -> PUT    /user/:userid/animal/:animalid",
  ],
  Array [
    "6. DefaultOneToMany...eneric.delete  -> DELETE /user/:userid/animal/:animalid",
  ],
  Array [],
]
`;

exports[`Custom Route Path Generic One To Many Controller Should contains correct query parameter 1`] = `
Array [
  Array [
    "1234",
  ],
  Array [
    "5678",
  ],
]
`;

exports[`Custom Route Path Generic One To Many Controller Should throw error when no parameter at the end 1`] = `
Array [
  Array [
    [Error: PLUM1011: Custom route path 'user/:userId/animal/:animalId/category' on User entity, require path that ends with route parameter, example: animals/:animalId],
  ],
]
`;

exports[`Custom Route Path Generic One To Many Controller Should throw error when provided more than two parameters 1`] = `
Array [
  Array [
    [Error: PLUM1012: Nested custom route path 'user/:userId/animal/:animalId/category/:categoryId' on User entity, must have two route parameters, example: users/:userId/animals/:animalId],
  ],
]
`;

exports[`Custom Route Path Generic One To Many Controller Should throw error when provided no parameter 1`] = `
Array [
  Array [
    [Error: PLUM1011: Custom route path 'user/animal' on User entity, require path that ends with route parameter, example: animals/:animalId],
  ],
]
`;

exports[`Custom Route Path Generic One To Many Controller Should throw error when provided only one parameter 1`] = `
Array [
  Array [
    [Error: PLUM1012: Nested custom route path 'user/:userId' on User entity, must have two route parameters, example: users/:userId/animals/:animalId],
  ],
]
`;

exports[`Open Api Generic Controller Should able to add @api.tag() from entity 1`] = `
Array [
  "Animals",
]
`;

exports[`Open Api Generic Controller Should able to provide correct parameter name when using custom path name 1`] = `
Array [
  Object {
    "in": "path",
    "name": "aid",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic Controller Should able to provide custom parameter with case 1`] = `
Array [
  Object {
    "in": "path",
    "name": "aid",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic Controller Should generate DELETE /animal/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic Controller Should generate DELETE /animal/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic Controller Should generate GET /animal properly 1`] = `
Array [
  Object {
    "in": "query",
    "name": "offset",
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "limit",
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "filter",
    "schema": Object {
      "$ref": "#/components/schemas/Animal",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "order",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic Controller Should generate GET /animal properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic Controller Should generate GET /animal/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic Controller Should generate GET /animal/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic Controller Should generate PATCH /animal/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic Controller Should generate PATCH /animal/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic Controller Should generate POST /animal properly 1`] = `
Object {
  "content": Object {
    "application/json": Object {
      "schema": Object {
        "$ref": "#/components/schemas/Animal",
      },
    },
    "application/x-www-form-urlencoded": Object {
      "schema": Object {
        "$ref": "#/components/schemas/Animal",
      },
    },
  },
  "required": true,
}
`;

exports[`Open Api Generic Controller Should generate POST /animal properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic Controller Should generate PUT /animal/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic Controller Should generate PUT /animal/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic Controller Should provided proper component 1`] = `
Object {
  "properties": Object {
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open Api Generic One To Many Controller Should able to add @api.tags() from property 1`] = `
Array [
  "Tags",
]
`;

exports[`Open Api Generic One To Many Controller Should able to provide correct parameter name when using custom path name 1`] = `
Array [
  Object {
    "in": "path",
    "name": "aid",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "path",
    "name": "tid",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should able to provide custom parameter with case 1`] = `
Array [
  Object {
    "in": "path",
    "name": "aid",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "path",
    "name": "tid",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate DELETE /animals/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate DELETE /animals/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate DELETE /animals/{pid}/tags/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "pid",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate DELETE /animals/{pid}/tags/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals properly 1`] = `
Array [
  Object {
    "in": "query",
    "name": "offset",
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "limit",
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "filter",
    "schema": Object {
      "allOf": Array [
        Object {
          "$ref": "#/components/schemas/Animal",
        },
        Object {
          "properties": Object {
            "tags": Object {
              "items": Object {
                "type": "string",
              },
              "type": "array",
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "tags": Object {
              "readOnly": true,
            },
          },
          "type": "object",
        },
      ],
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "order",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals/{pid}/tags properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "pid",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "offset",
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "limit",
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "filter",
    "schema": Object {
      "$ref": "#/components/schemas/Tag",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "order",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals/{pid}/tags properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals/{pid}/tags/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "pid",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals/{pid}/tags/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate PATCH /animals/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate PATCH /animals/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate PATCH /animals/{pid}/tags/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "pid",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate PATCH /animals/{pid}/tags/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate POST /animals properly 1`] = `
Object {
  "content": Object {
    "application/json": Object {
      "schema": Object {
        "allOf": Array [
          Object {
            "$ref": "#/components/schemas/Animal",
          },
          Object {
            "properties": Object {
              "tags": Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          Object {
            "properties": Object {
              "tags": Object {
                "readOnly": true,
                "writeOnly": true,
              },
            },
            "type": "object",
          },
        ],
      },
    },
    "application/x-www-form-urlencoded": Object {
      "schema": Object {
        "allOf": Array [
          Object {
            "$ref": "#/components/schemas/Animal",
          },
          Object {
            "properties": Object {
              "tags": Object {
                "items": Object {
                  "type": "string",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          Object {
            "properties": Object {
              "tags": Object {
                "readOnly": true,
                "writeOnly": true,
              },
            },
            "type": "object",
          },
        ],
      },
    },
  },
  "required": true,
}
`;

exports[`Open Api Generic One To Many Controller Should generate POST /animals properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate POST /animals/{pid}/tags properly 1`] = `
Object {
  "content": Object {
    "application/json": Object {
      "schema": Object {
        "$ref": "#/components/schemas/Tag",
      },
    },
    "application/x-www-form-urlencoded": Object {
      "schema": Object {
        "$ref": "#/components/schemas/Tag",
      },
    },
  },
  "required": true,
}
`;

exports[`Open Api Generic One To Many Controller Should generate POST /animals/{pid}/tags properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate PUT /animals/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate PUT /animals/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate PUT /animals/{pid}/tags/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "pid",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate PUT /animals/{pid}/tags/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should provide proper component 1`] = `
Object {
  "properties": Object {
    "name": Object {
      "type": "string",
    },
    "tags": Object {
      "items": Object {
        "$ref": "#/components/schemas/Tag",
      },
      "type": "array",
    },
  },
  "type": "object",
}
`;

exports[`Open Api Generic One To Many Controller Should provide proper component 2`] = `
Object {
  "properties": Object {
    "tag": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Request Hook Should able to bind ActionResult on postSave 1`] = `
Array [
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "lorem ipsum",
    },
  ],
  Array [
    ActionResult {
      "body": Object {
        "id": 123,
      },
      "cookies": Array [],
      "headers": Object {},
      "status": 200,
    },
  ],
]
`;

exports[`Request Hook Should able to bind by decorator 1`] = `
Array [
  Array [
    "application/json",
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "lorem ipsum",
    },
  ],
]
`;

exports[`Request Hook Should able to bind query by name 1`] = `
Array [
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "123",
    },
  ],
]
`;

exports[`Request Hook Should able to hook request in generic controller 1`] = `
Array [
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "HASH",
    },
  ],
]
`;

exports[`Request Hook Should able to hook request in multiple http methods 1`] = `
Array [
  Array [
    "123",
  ],
  Array [
    "123",
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "HASH",
    },
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "HASH",
    },
  ],
  Array [
    "123",
  ],
  Array [
    "123",
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "lorem ipsum",
    },
  ],
]
`;

exports[`Request Hook Should able to hook request in one to many generic controller 1`] = `
Array [
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "HASH",
    },
  ],
]
`;

exports[`Request Hook Should able to hook request in specific http method 1`] = `
Array [
  Array [
    "123",
  ],
  Array [
    "123",
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "HASH",
    },
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "lorem ipsum",
    },
  ],
]
`;

exports[`Request Hook Should able to use multiple hook request 1`] = `
Array [
  Array [
    User {
      "email": "hacked@gmail.com",
      "name": "John Doe",
      "password": "HASH",
    },
  ],
]
`;

exports[`Request Hook Should call request hook in proper order 1`] = `
Array [
  Array [
    "PRE SAVE",
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "lorem ipsum",
    },
  ],
  Array [
    "POST SAVE",
  ],
]
`;

exports[`Request Hook Should not executed on GET method with model parameter 1`] = `Array []`;

exports[`Route Generator Generic Controller Should able to change root path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /api/v1/user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /api/v1/user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /api/v1/user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /api/v1/user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /api/v1/user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /api/v1/user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should able to ignore some method of controller from entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "3. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should able to set authorization for specific method from entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Authenticated GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> admin         POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Authenticated GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> admin         PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> admin         PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> admin         DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should able to set authorization from entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> admin GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> admin POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> admin GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> admin PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> admin PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> admin DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should able to set custom authorizer from entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Custom GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Custom POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Custom GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Custom PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Custom PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Custom DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should able to set public authorizer from entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Public GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Public POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Public GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Public PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Public PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Public DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should able to specify ID of type string by providing decorator 1`] = `
Array [
  Object {
    "name": "list",
    "pars": Array [
      Object {
        "name": "offset",
        "type": Number,
      },
      Object {
        "name": "limit",
        "type": Number,
      },
      Object {
        "name": "filter",
        "type": User,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "order",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "save",
    "pars": Array [
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "get",
    "pars": Array [
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "modify",
    "pars": Array [
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "replace",
    "pars": Array [
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "delete",
    "pars": Array [
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
]
`;

exports[`Route Generator Generic Controller Should able to specify ID type by providing decorator 1`] = `
Array [
  Object {
    "name": "list",
    "pars": Array [
      Object {
        "name": "offset",
        "type": Number,
      },
      Object {
        "name": "limit",
        "type": Number,
      },
      Object {
        "name": "filter",
        "type": User,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "order",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "save",
    "pars": Array [
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "get",
    "pars": Array [
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "modify",
    "pars": Array [
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "replace",
    "pars": Array [
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "delete",
    "pars": Array [
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
]
`;

exports[`Route Generator Generic Controller Should able to use custom controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MyCustomControllerGeneric.list    -> GET    /api/v1/user",
  ],
  Array [
    "2. MyCustomControllerGeneric.save    -> POST   /api/v1/user",
  ],
  Array [
    "3. MyCustomControllerGeneric.get     -> GET    /api/v1/user/:id",
  ],
  Array [
    "4. MyCustomControllerGeneric.modify  -> PATCH  /api/v1/user/:id",
  ],
  Array [
    "5. MyCustomControllerGeneric.replace -> PUT    /api/v1/user/:id",
  ],
  Array [
    "6. MyCustomControllerGeneric.delete  -> DELETE /api/v1/user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should generate routes with parameter property entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should generate routes with property field entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should not generate entity that is not marked as controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "No controller found",
  ],
]
`;

exports[`Route Generator Generic Controller Should throw error properly 1`] = `Array []`;

exports[`Route Generator Generic Controller Should use string as default id if no ID type specified 1`] = `
Array [
  Object {
    "name": "list",
    "pars": Array [
      Object {
        "name": "offset",
        "type": Number,
      },
      Object {
        "name": "limit",
        "type": Number,
      },
      Object {
        "name": "filter",
        "type": User,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "order",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "save",
    "pars": Array [
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "get",
    "pars": Array [
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "modify",
    "pars": Array [
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "replace",
    "pars": Array [
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "delete",
    "pars": Array [
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
]
`;

exports[`Route Generator Grouping Should able to group one to many routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultOneToMany...eneric.list    -> GET    /api/v2/user/:pid/animals",
  ],
  Array [
    "2. DefaultOneToMany...eneric.save    -> POST   /api/v2/user/:pid/animals",
  ],
  Array [
    "3. DefaultOneToMany...eneric.get     -> GET    /api/v2/user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultOneToMany...eneric.modify  -> PATCH  /api/v2/user/:pid/animals/:id",
  ],
  Array [
    "5. DefaultOneToMany...eneric.replace -> PUT    /api/v2/user/:pid/animals/:id",
  ],
  Array [
    "6. DefaultOneToMany...eneric.delete  -> DELETE /api/v2/user/:pid/animals/:id",
  ],
  Array [],
  Array [
    "1. DefaultOneToMany...eneric.list    -> GET    /api/v1/user/:pid/animals",
  ],
  Array [
    "2. DefaultOneToMany...eneric.save    -> POST   /api/v1/user/:pid/animals",
  ],
  Array [
    "3. DefaultOneToMany...eneric.get     -> GET    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultOneToMany...eneric.modify  -> PATCH  /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "5. DefaultOneToMany...eneric.replace -> PUT    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "6. DefaultOneToMany...eneric.delete  -> DELETE /api/v1/user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Grouping Should able to group routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /api/v2/user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /api/v2/user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /api/v2/user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /api/v2/user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /api/v2/user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /api/v2/user/:id",
  ],
  Array [],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /api/v1/user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /api/v1/user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /api/v1/user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /api/v1/user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /api/v1/user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /api/v1/user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should able to authorize relation on relation 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultOneToMany...eneric.list    -> admin GET    /user/:pid/animals",
  ],
  Array [
    "2. DefaultOneToMany...eneric.save    -> admin POST   /user/:pid/animals",
  ],
  Array [
    "3. DefaultOneToMany...eneric.get     -> admin GET    /user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultOneToMany...eneric.modify  -> admin PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "5. DefaultOneToMany...eneric.replace -> admin PUT    /user/:pid/animals/:id",
  ],
  Array [
    "6. DefaultOneToMany...eneric.delete  -> admin DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should able to authorize some method on relation 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultOneToMany...eneric.list    -> Authenticated GET    /user/:pid/animals",
  ],
  Array [
    "2. DefaultOneToMany...eneric.save    -> admin         POST   /user/:pid/animals",
  ],
  Array [
    "3. DefaultOneToMany...eneric.get     -> Authenticated GET    /user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultOneToMany...eneric.modify  -> admin         PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "5. DefaultOneToMany...eneric.replace -> admin         PUT    /user/:pid/animals/:id",
  ],
  Array [
    "6. DefaultOneToMany...eneric.delete  -> admin         DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should able to change root path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /api/v1/user",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /api/v1/user",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /api/v1/user/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /api/v1/user/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /api/v1/user/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /api/v1/user/:id",
  ],
  Array [
    " 7. DefaultOneToMany...eneric.list           -> GET    /api/v1/user/:pid/animals",
  ],
  Array [
    " 8. DefaultOneToMany...eneric.save           -> POST   /api/v1/user/:pid/animals",
  ],
  Array [
    " 9. DefaultOneToMany...eneric.get            -> GET    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "10. DefaultOneToMany...eneric.modify         -> PATCH  /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "11. DefaultOneToMany...eneric.replace        -> PUT    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "12. DefaultOneToMany...eneric.delete         -> DELETE /api/v1/user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should able to ignore some method of controller from entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultOneToMany...eneric.get     -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "2. DefaultOneToMany...eneric.modify  -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "3. DefaultOneToMany...eneric.replace -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultOneToMany...eneric.delete  -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should able to specify ID type by providing decorator 1`] = `
Array [
  Object {
    "name": "list",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "offset",
        "type": Number,
      },
      Object {
        "name": "limit",
        "type": Number,
      },
      Object {
        "name": "filter",
        "type": Animal,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "order",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "save",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": Animal,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "get",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "modify",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": Animal,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "replace",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": Animal,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "delete",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
]
`;

exports[`Route Generator One To Many Controller Should able to specify relation 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultOneToMany...eneric.list    -> GET    /user/:pid/animals",
  ],
  Array [
    "2. DefaultOneToMany...eneric.save    -> POST   /user/:pid/animals",
  ],
  Array [
    "3. DefaultOneToMany...eneric.get     -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultOneToMany...eneric.modify  -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "5. DefaultOneToMany...eneric.replace -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "6. DefaultOneToMany...eneric.delete  -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should able to use custom controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MyCustomOneToMan...eneric.list    -> GET    /api/v1/user/:pid/animals",
  ],
  Array [
    "2. MyCustomOneToMan...eneric.save    -> POST   /api/v1/user/:pid/animals",
  ],
  Array [
    "3. MyCustomOneToMan...eneric.get     -> GET    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "4. MyCustomOneToMan...eneric.modify  -> PATCH  /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "5. MyCustomOneToMan...eneric.replace -> PUT    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "6. MyCustomOneToMan...eneric.delete  -> DELETE /api/v1/user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should generate routes with parameter property entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [
    " 7. DefaultOneToMany...eneric.list           -> GET    /user/:pid/animals",
  ],
  Array [
    " 8. DefaultOneToMany...eneric.save           -> POST   /user/:pid/animals",
  ],
  Array [
    " 9. DefaultOneToMany...eneric.get            -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "10. DefaultOneToMany...eneric.modify         -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "11. DefaultOneToMany...eneric.replace        -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "12. DefaultOneToMany...eneric.delete         -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should generate routes with property field entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [
    " 7. DefaultOneToMany...eneric.list           -> GET    /user/:pid/animals",
  ],
  Array [
    " 8. DefaultOneToMany...eneric.save           -> POST   /user/:pid/animals",
  ],
  Array [
    " 9. DefaultOneToMany...eneric.get            -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "10. DefaultOneToMany...eneric.modify         -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "11. DefaultOneToMany...eneric.replace        -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "12. DefaultOneToMany...eneric.delete         -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should throw error properly 1`] = `Array []`;

exports[`Route Generator One To Many Controller Should throw error when the relation doesn't have type information 1`] = `
Array [
  Array [
    [Error: PLUM1010: User.animals marked with @route.controller() but doesn't have type information],
  ],
]
`;

exports[`Route Generator One To Many Controller Should use string as default id if no ID type specified 1`] = `
Array [
  Object {
    "name": "list",
    "pars": Array [
      Object {
        "name": "pid",
        "type": String,
      },
      Object {
        "name": "offset",
        "type": Number,
      },
      Object {
        "name": "limit",
        "type": Number,
      },
      Object {
        "name": "filter",
        "type": Animal,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "order",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "save",
    "pars": Array [
      Object {
        "name": "pid",
        "type": String,
      },
      Object {
        "name": "data",
        "type": Animal,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "get",
    "pars": Array [
      Object {
        "name": "pid",
        "type": String,
      },
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "modify",
    "pars": Array [
      Object {
        "name": "pid",
        "type": String,
      },
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "data",
        "type": Animal,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "replace",
    "pars": Array [
      Object {
        "name": "pid",
        "type": String,
      },
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "data",
        "type": Animal,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "delete",
    "pars": Array [
      Object {
        "name": "pid",
        "type": String,
      },
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
]
`;

exports[`Route Generator Should able to specify entity directory 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /animal",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /animal",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /animal/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /animal/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /animal/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /animal/:id",
  ],
  Array [
    " 7. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    " 8. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    " 9. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "10. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "11. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "12. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [
    "13. DefaultOneToMany...eneric.list           -> GET    /user/:pid/animals",
  ],
  Array [
    "14. DefaultOneToMany...eneric.save           -> POST   /user/:pid/animals",
  ],
  Array [
    "15. DefaultOneToMany...eneric.get            -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "16. DefaultOneToMany...eneric.modify         -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "17. DefaultOneToMany...eneric.replace        -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "18. DefaultOneToMany...eneric.delete         -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Should able to specify entity directory with relative path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /animal",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /animal",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /animal/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /animal/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /animal/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /animal/:id",
  ],
  Array [
    " 7. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    " 8. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    " 9. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "10. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "11. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "12. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [
    "13. DefaultOneToMany...eneric.list           -> GET    /user/:pid/animals",
  ],
  Array [
    "14. DefaultOneToMany...eneric.save           -> POST   /user/:pid/animals",
  ],
  Array [
    "15. DefaultOneToMany...eneric.get            -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "16. DefaultOneToMany...eneric.modify         -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "17. DefaultOneToMany...eneric.replace        -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "18. DefaultOneToMany...eneric.delete         -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Should able to specify nested directories 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /api/v1/animal",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /api/v1/animal",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /api/v1/animal/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /api/v1/animal/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /api/v1/animal/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /api/v1/animal/:id",
  ],
  Array [
    " 7. DefaultControllerGeneric.list            -> GET    /api/v1/user",
  ],
  Array [
    " 8. DefaultControllerGeneric.save(data, ctx) -> POST   /api/v1/user",
  ],
  Array [
    " 9. DefaultControllerGeneric.get             -> GET    /api/v1/user/:id",
  ],
  Array [
    "10. DefaultControllerGeneric.modify          -> PATCH  /api/v1/user/:id",
  ],
  Array [
    "11. DefaultControllerGeneric.replace         -> PUT    /api/v1/user/:id",
  ],
  Array [
    "12. DefaultControllerGeneric.delete(id, ctx) -> DELETE /api/v1/user/:id",
  ],
  Array [
    "13. DefaultOneToMany...eneric.list           -> GET    /api/v1/user/:pid/animals",
  ],
  Array [
    "14. DefaultOneToMany...eneric.save           -> POST   /api/v1/user/:pid/animals",
  ],
  Array [
    "15. DefaultOneToMany...eneric.get            -> GET    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "16. DefaultOneToMany...eneric.modify         -> PATCH  /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "17. DefaultOneToMany...eneric.replace        -> PUT    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "18. DefaultOneToMany...eneric.delete         -> DELETE /api/v1/user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Should initiate IdentifierResult properly 1`] = `
IdentifierResult {
  "id": 20,
}
`;
