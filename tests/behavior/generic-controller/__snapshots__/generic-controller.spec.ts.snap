// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Controller Builder Authorization Should able to authorize accessor routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Admin         GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Authenticated POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Admin         GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Authenticated PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Authenticated PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Authenticated DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize all routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Admin GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Admin POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Admin GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Admin PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Admin PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Admin DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize all routes using all key 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Admin GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Admin POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Admin GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Admin PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Admin PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Admin DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize mutator routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Authenticated GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Admin         POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Authenticated GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Admin         PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Admin         PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Admin         DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize routes by specify its name 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Authenticated GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Admin         POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Admin         GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Authenticated PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Authenticated PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Authenticated DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize specific routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Authenticated GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Admin         POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Authenticated GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Admin         PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Admin         PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Admin         DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize specific routes on one to many generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultNestedCon...eneric.list    -> Authenticated GET    /user/:pid/animals",
  ],
  Array [
    "2. DefaultNestedCon...eneric.save    -> Admin         POST   /user/:pid/animals",
  ],
  Array [
    "3. DefaultNestedCon...eneric.get     -> Authenticated GET    /user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultNestedCon...eneric.modify  -> Admin         PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "5. DefaultNestedCon...eneric.replace -> Admin         PUT    /user/:pid/animals/:id",
  ],
  Array [
    "6. DefaultNestedCon...eneric.delete  -> Admin         DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to authorize specific routes with multiple roles 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Authenticated    GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Admin|SuperAdmin POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Authenticated    GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Admin|SuperAdmin PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Admin|SuperAdmin PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Admin|SuperAdmin DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Authorization Should able to combine between accessor and mutator 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> Authenticated GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> Admin         POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> Authenticated GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> Admin         PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> Admin         PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> Admin         DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Ignore Route Should able to ignore accessor routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    "2. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "3. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Ignore Route Should able to ignore all routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "No controller found",
  ],
]
`;

exports[`Controller Builder Ignore Route Should able to ignore all routes using action notations 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "No controller found",
  ],
]
`;

exports[`Controller Builder Ignore Route Should able to ignore all routes using all key 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "No controller found",
  ],
]
`;

exports[`Controller Builder Ignore Route Should able to ignore mutator routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list -> GET /user",
  ],
  Array [
    "2. DefaultControllerGeneric.get  -> GET /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Ignore Route Should able to ignore routes by specify its name 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "2. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "3. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Ignore Route Should able to ignore specific routes on one to many generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultNestedCon...eneric.list    -> GET    /user/:pid/animals",
  ],
  Array [
    "2. DefaultNestedCon...eneric.get     -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "3. DefaultNestedCon...eneric.modify  -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultNestedCon...eneric.replace -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "5. DefaultNestedCon...eneric.delete  -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Ignore Route Should able to ignore specific routes properly 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "3. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Ignore Route Should able to ignore specific routes using action notations 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "3. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Controller Builder Set Path Should able to set path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /users",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /users",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /users/:uid",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /users/:uid",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /users/:uid",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /users/:uid",
  ],
  Array [],
]
`;

exports[`Controller Builder Set Path Should able to set path on one to many generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultNestedCon...eneric.list    -> GET    /users/:uid/animals",
  ],
  Array [
    "2. DefaultNestedCon...eneric.save    -> POST   /users/:uid/animals",
  ],
  Array [
    "3. DefaultNestedCon...eneric.get     -> GET    /users/:uid/animals/:aid",
  ],
  Array [
    "4. DefaultNestedCon...eneric.modify  -> PATCH  /users/:uid/animals/:aid",
  ],
  Array [
    "5. DefaultNestedCon...eneric.replace -> PUT    /users/:uid/animals/:aid",
  ],
  Array [
    "6. DefaultNestedCon...eneric.delete  -> DELETE /users/:uid/animals/:aid",
  ],
  Array [],
]
`;

exports[`Custom Route Path Generic Controller Should contains correct query parameter 1`] = `
Array [
  Array [
    "1234",
  ],
]
`;

exports[`Custom Route Path Generic Controller Should generate routes with parameter property entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /user/:userid",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /user/:userid",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /user/:userid",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:userid",
  ],
  Array [],
]
`;

exports[`Custom Route Path Generic Controller Should throw error when no parameter at the end 1`] = `
Array [
  Array [
    [Error: Custom route path 'user/:userId/data' on User entity, require path that ends with route parameter, example: animals/:animalId],
  ],
]
`;

exports[`Custom Route Path Generic Controller Should throw error when provided more than one parameter 1`] = `
Array [
  Array [
    [Error: Custom route path 'user/:userId/data/:dataId' on User entity, must have one route parameter, example: animals/:animalId],
  ],
]
`;

exports[`Custom Route Path Generic Controller Should throw error when provided no parameter 1`] = `
Array [
  Array [
    [Error: Custom route path 'user' on User entity, require path that ends with route parameter, example: animals/:animalId],
  ],
]
`;

exports[`Custom Route Path Generic One To Many Controller Should able to provide custom route path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultNestedCon...eneric.list    -> GET    /user/:userid/animal",
  ],
  Array [
    "2. DefaultNestedCon...eneric.save    -> POST   /user/:userid/animal",
  ],
  Array [
    "3. DefaultNestedCon...eneric.get     -> GET    /user/:userid/animal/:animalid",
  ],
  Array [
    "4. DefaultNestedCon...eneric.modify  -> PATCH  /user/:userid/animal/:animalid",
  ],
  Array [
    "5. DefaultNestedCon...eneric.replace -> PUT    /user/:userid/animal/:animalid",
  ],
  Array [
    "6. DefaultNestedCon...eneric.delete  -> DELETE /user/:userid/animal/:animalid",
  ],
  Array [],
]
`;

exports[`Custom Route Path Generic One To Many Controller Should contains correct query parameter 1`] = `
Array [
  Array [
    "1234",
  ],
  Array [
    "5678",
  ],
]
`;

exports[`Custom Route Path Generic One To Many Controller Should throw error when no parameter at the end 1`] = `
Array [
  Array [
    [Error: Custom route path 'user/:userId/animal/:animalId/category' on User entity, require path that ends with route parameter, example: animals/:animalId],
  ],
]
`;

exports[`Custom Route Path Generic One To Many Controller Should throw error when provided more than two parameters 1`] = `
Array [
  Array [
    [Error: Nested custom route path 'user/:userId/animal/:animalId/category/:categoryId' on User entity, must have two route parameters, example: users/:userId/animals/:animalId],
  ],
]
`;

exports[`Custom Route Path Generic One To Many Controller Should throw error when provided no parameter 1`] = `
Array [
  Array [
    [Error: Custom route path 'user/animal' on User entity, require path that ends with route parameter, example: animals/:animalId],
  ],
]
`;

exports[`Custom Route Path Generic One To Many Controller Should throw error when provided only one parameter 1`] = `
Array [
  Array [
    [Error: Nested custom route path 'user/:userId' on User entity, must have two route parameters, example: users/:userId/animals/:animalId],
  ],
]
`;

exports[`Entity Policy Generic Controller Should protect data properly 1`] = `
Array [
  Object {
    "email": "john.doe@gmail.com",
    "id": 1,
    "name": "John",
  },
  Object {
    "id": 2,
    "name": "Jane",
  },
  Object {
    "id": 3,
    "name": "Joe",
  },
]
`;

exports[`Entity Policy One To Many Controller Should protect get all 1`] = `
Array [
  Object {
    "id": 1,
    "title": "John's todo",
    "user": Object {
      "email": "john.doe@gmail.com",
      "id": 1,
      "name": "John",
    },
  },
  Object {
    "id": 2,
    "title": "John's todo 2",
    "user": Object {
      "email": "john.doe@gmail.com",
      "id": 1,
      "name": "John",
    },
  },
]
`;

exports[`Open Api Generic Controller Should able to override tag 1`] = `
Array [
  "Animal Management",
]
`;

exports[`Open Api Generic Controller Should able to provide correct parameter name when using custom path name 1`] = `
Array [
  Object {
    "in": "path",
    "name": "aid",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic Controller Should able to provide custom parameter with case 1`] = `
Array [
  Object {
    "in": "path",
    "name": "aid",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic Controller Should able to use custom get many query 1`] = `
Object {
  "content": Object {
    "application/json": Object {
      "schema": Object {
        "items": Object {
          "$ref": "#/components/schemas/AnimalDTO",
        },
        "type": "array",
      },
    },
  },
  "description": "Response body",
}
`;

exports[`Open Api Generic Controller Should able to use custom get one query 1`] = `
Object {
  "content": Object {
    "application/json": Object {
      "schema": Object {
        "$ref": "#/components/schemas/AnimalDTO",
      },
    },
  },
  "description": "Response body",
}
`;

exports[`Open Api Generic Controller Should allow multiple tag decorators 1`] = `
Array [
  "Animal Management",
  "Animals",
]
`;

exports[`Open Api Generic Controller Should generate DELETE /animal/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
]
`;

exports[`Open Api Generic Controller Should generate DELETE /animal/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic Controller Should generate GET /animal properly 1`] = `
Array [
  Object {
    "in": "query",
    "name": "offset",
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "limit",
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "filter",
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "order",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic Controller Should generate GET /animal properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic Controller Should generate GET /animal/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic Controller Should generate GET /animal/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic Controller Should generate PATCH /animal/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
]
`;

exports[`Open Api Generic Controller Should generate PATCH /animal/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic Controller Should generate POST /animal properly 1`] = `
Object {
  "content": Object {
    "application/json": Object {
      "schema": Object {
        "$ref": "#/components/schemas/Animal",
      },
    },
    "application/x-www-form-urlencoded": Object {
      "schema": Object {
        "$ref": "#/components/schemas/Animal",
      },
    },
  },
  "required": true,
}
`;

exports[`Open Api Generic Controller Should generate POST /animal properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic Controller Should generate PUT /animal/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
]
`;

exports[`Open Api Generic Controller Should generate PUT /animal/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic Controller Should provided proper component 1`] = `
Object {
  "properties": Object {
    "id": Object {
      "type": "number",
    },
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open Api Generic Many To One Controller Should hide relation on GET all response 1`] = `
Object {
  "schema": Object {
    "items": Object {
      "allOf": Array [
        Object {
          "$ref": "#/components/schemas/Tag",
        },
        Object {
          "properties": Object {
            "animal": Object {
              "allOf": Array [
                Object {
                  "$ref": "#/components/schemas/Animal",
                },
                Object {
                  "properties": Object {},
                  "type": "object",
                },
              ],
            },
          },
          "type": "object",
        },
        Object {
          "properties": Object {
            "animal": Object {
              "readOnly": true,
              "writeOnly": true,
            },
          },
          "type": "object",
        },
      ],
    },
    "type": "array",
  },
}
`;

exports[`Open Api Generic One To Many Controller Should able to override tag 1`] = `
Array [
  "Tags Management",
]
`;

exports[`Open Api Generic One To Many Controller Should able to provide correct parameter name when using custom path name 1`] = `
Array [
  Object {
    "in": "path",
    "name": "aid",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "path",
    "name": "tid",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should able to provide custom parameter with case 1`] = `
Array [
  Object {
    "in": "path",
    "name": "aid",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "path",
    "name": "tid",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should able to use custom get many query 1`] = `
Object {
  "content": Object {
    "application/json": Object {
      "schema": Object {
        "items": Object {
          "$ref": "#/components/schemas/TagDTO",
        },
        "type": "array",
      },
    },
  },
  "description": "Response body",
}
`;

exports[`Open Api Generic One To Many Controller Should able to use custom get one query 1`] = `
Object {
  "content": Object {
    "application/json": Object {
      "schema": Object {
        "$ref": "#/components/schemas/TagDTO",
      },
    },
  },
  "description": "Response body",
}
`;

exports[`Open Api Generic One To Many Controller Should allow multiple tag decorators 1`] = `
Array [
  "Tags Management",
  "Tags",
]
`;

exports[`Open Api Generic One To Many Controller Should generate DELETE /animals/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate DELETE /animals/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate DELETE /animals/{pid}/tags/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "pid",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate DELETE /animals/{pid}/tags/:id properly 2`] = `
Array [
  "Animal Tag",
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals properly 1`] = `
Array [
  Object {
    "in": "query",
    "name": "offset",
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "limit",
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "filter",
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "order",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals/{pid}/tags properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "pid",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "offset",
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "limit",
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "filter",
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
  Object {
    "in": "query",
    "name": "order",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals/{pid}/tags properly 2`] = `
Array [
  "Animal Tag",
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals/{pid}/tags/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "pid",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "query",
    "name": "select",
    "schema": Object {
      "type": "string",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate GET /animals/{pid}/tags/:id properly 2`] = `
Array [
  "Animal Tag",
]
`;

exports[`Open Api Generic One To Many Controller Should generate PATCH /animals/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate PATCH /animals/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate PATCH /animals/{pid}/tags/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "pid",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate PATCH /animals/{pid}/tags/:id properly 2`] = `
Array [
  "Animal Tag",
]
`;

exports[`Open Api Generic One To Many Controller Should generate POST /animals properly 1`] = `
Object {
  "content": Object {
    "application/json": Object {
      "schema": Object {
        "allOf": Array [
          Object {
            "$ref": "#/components/schemas/Animal",
          },
          Object {
            "properties": Object {
              "tags": Object {
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        ],
      },
    },
    "application/x-www-form-urlencoded": Object {
      "schema": Object {
        "allOf": Array [
          Object {
            "$ref": "#/components/schemas/Animal",
          },
          Object {
            "properties": Object {
              "tags": Object {
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
        ],
      },
    },
  },
  "required": true,
}
`;

exports[`Open Api Generic One To Many Controller Should generate POST /animals properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate POST /animals/{pid}/tags properly 1`] = `
Object {
  "content": Object {
    "application/json": Object {
      "schema": Object {
        "$ref": "#/components/schemas/Tag",
      },
    },
    "application/x-www-form-urlencoded": Object {
      "schema": Object {
        "$ref": "#/components/schemas/Tag",
      },
    },
  },
  "required": true,
}
`;

exports[`Open Api Generic One To Many Controller Should generate POST /animals/{pid}/tags properly 2`] = `
Array [
  "Animal Tag",
]
`;

exports[`Open Api Generic One To Many Controller Should generate PUT /animals/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate PUT /animals/:id properly 2`] = `
Array [
  "Animal",
]
`;

exports[`Open Api Generic One To Many Controller Should generate PUT /animals/{pid}/tags/:id properly 1`] = `
Array [
  Object {
    "in": "path",
    "name": "pid",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
  Object {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": Object {
      "type": "number",
    },
  },
]
`;

exports[`Open Api Generic One To Many Controller Should generate PUT /animals/{pid}/tags/:id properly 2`] = `
Array [
  "Animal Tag",
]
`;

exports[`Open Api Generic One To Many Controller Should provide proper component 1`] = `
Object {
  "properties": Object {
    "id": Object {
      "type": "number",
    },
    "name": Object {
      "type": "string",
    },
    "tags": Object {
      "items": Object {
        "$ref": "#/components/schemas/Tag",
      },
      "type": "array",
    },
  },
  "type": "object",
}
`;

exports[`Open Api Generic One To Many Controller Should provide proper component 2`] = `
Object {
  "properties": Object {
    "id": Object {
      "type": "number",
    },
    "tag": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Request Hook Should able to bind by decorator 1`] = `
Array [
  Array [
    "application/json",
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "lorem ipsum",
    },
  ],
]
`;

exports[`Request Hook Should able to bind query by name 1`] = `
Array [
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "123",
    },
  ],
]
`;

exports[`Request Hook Should able to hook on array type parameter 1`] = `
Array [
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe 1",
      "password": "lorem ipsum",
    },
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe 2",
      "password": "lorem ipsum",
    },
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe 3",
      "password": "lorem ipsum",
    },
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe 1",
      "password": "lorem ipsum",
    },
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe 2",
      "password": "lorem ipsum",
    },
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe 3",
      "password": "lorem ipsum",
    },
  ],
]
`;

exports[`Request Hook Should able to hook request in generic controller 1`] = `
Array [
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "HASH",
    },
  ],
]
`;

exports[`Request Hook Should able to hook request in multiple http methods 1`] = `
Array [
  Array [
    123,
  ],
  Array [
    123,
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "HASH",
    },
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "HASH",
    },
  ],
  Array [
    123,
  ],
  Array [
    123,
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "lorem ipsum",
    },
  ],
]
`;

exports[`Request Hook Should able to hook request in one to many generic controller 1`] = `
Array [
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "HASH",
    },
  ],
]
`;

exports[`Request Hook Should able to hook request in specific http method 1`] = `
Array [
  Array [
    123,
  ],
  Array [
    123,
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "HASH",
    },
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "lorem ipsum",
    },
  ],
]
`;

exports[`Request Hook Should able to use multiple hook request 1`] = `
Array [
  Array [
    User {
      "email": "hacked@gmail.com",
      "name": "John Doe",
      "password": "HASH",
    },
  ],
]
`;

exports[`Request Hook Should call request hook in proper order 1`] = `
Array [
  Array [
    "PRE SAVE",
  ],
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "lorem ipsum",
    },
  ],
  Array [
    "POST SAVE",
  ],
]
`;

exports[`Request Hook Should not error when not provide postSaveValue 1`] = `
Array [
  Array [
    User {
      "email": "john.doe@gmail.com",
      "name": "John Doe",
      "password": "lorem ipsum",
    },
  ],
]
`;

exports[`Request Hook Should not executed on GET method with model parameter 1`] = `Array []`;

exports[`Response Transformer Generic Controller Should able to transform get many action 1`] = `
Array [
  Object {
    "fullName": "John",
  },
  Object {
    "fullName": "Jane",
  },
  Object {
    "fullName": "Joe",
  },
]
`;

exports[`Response Transformer Generic Controller Should able to transform get one action 1`] = `
Object {
  "fullName": "John",
}
`;

exports[`Response Transformer Generic Controller Should provide proper Open API schema on get many action 1`] = `
Object {
  "200": Object {
    "content": Object {
      "application/json": Object {
        "schema": Object {
          "items": Object {
            "allOf": Array [
              Object {
                "$ref": "#/components/schemas/UserTrans",
              },
              Object {
                "properties": Object {
                  "todos": Object {
                    "readOnly": true,
                    "writeOnly": true,
                  },
                },
                "type": "object",
              },
            ],
          },
          "type": "array",
        },
      },
    },
    "description": "Response body",
  },
}
`;

exports[`Response Transformer Generic Controller Should provide proper Open API schema on get one action 1`] = `
Object {
  "200": Object {
    "content": Object {
      "application/json": Object {
        "schema": Object {
          "allOf": Array [
            Object {
              "$ref": "#/components/schemas/UserTrans",
            },
            Object {
              "properties": Object {
                "todos": Object {
                  "readOnly": true,
                  "writeOnly": true,
                },
              },
              "type": "object",
            },
          ],
        },
      },
    },
    "description": "Response body",
  },
}
`;

exports[`Response Transformer Generic On To Many Controller Should able to transform get many action 1`] = `
Array [
  Object {
    "theTitle": "John's todo",
  },
  Object {
    "theTitle": "John's todo 2",
  },
]
`;

exports[`Response Transformer Generic On To Many Controller Should able to transform get one action 1`] = `
Object {
  "theTitle": "John's todo",
}
`;

exports[`Response Transformer Generic On To Many Controller Should provide proper Open API schema on get many action 1`] = `
Object {
  "200": Object {
    "content": Object {
      "application/json": Object {
        "schema": Object {
          "items": Object {
            "$ref": "#/components/schemas/TodoTrans",
          },
          "type": "array",
        },
      },
    },
    "description": "Response body",
  },
}
`;

exports[`Response Transformer Generic On To Many Controller Should provide proper Open API schema on get one action 1`] = `
Object {
  "200": Object {
    "content": Object {
      "application/json": Object {
        "schema": Object {
          "$ref": "#/components/schemas/TodoTrans",
        },
      },
    },
    "description": "Response body",
  },
}
`;

exports[`Route Generator Generic Controller Should able to apply multiple controller on single entities 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /user-data",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /user-data",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /user-data/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /user-data/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /user-data/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user-data/:id",
  ],
  Array [
    " 7. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    " 8. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    " 9. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "10. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "11. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "12. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should able to change root path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /api/v1/user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /api/v1/user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /api/v1/user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /api/v1/user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /api/v1/user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /api/v1/user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should able to specify ID of type string by providing decorator 1`] = `
Array [
  Object {
    "name": "list",
    "pars": Array [
      Object {
        "name": "offset",
        "type": Number,
      },
      Object {
        "name": "limit",
        "type": Number,
      },
      Object {
        "name": "filter",
        "type": String,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "order",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "save",
    "pars": Array [
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "get",
    "pars": Array [
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "modify",
    "pars": Array [
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "replace",
    "pars": Array [
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "delete",
    "pars": Array [
      Object {
        "name": "id",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
]
`;

exports[`Route Generator Generic Controller Should able to specify ID type by providing decorator 1`] = `
Array [
  Object {
    "name": "list",
    "pars": Array [
      Object {
        "name": "offset",
        "type": Number,
      },
      Object {
        "name": "limit",
        "type": Number,
      },
      Object {
        "name": "filter",
        "type": String,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "order",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "save",
    "pars": Array [
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "get",
    "pars": Array [
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "modify",
    "pars": Array [
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "replace",
    "pars": Array [
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "delete",
    "pars": Array [
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
]
`;

exports[`Route Generator Generic Controller Should able to use custom controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MyCustomControllerGeneric.list    -> GET    /api/v1/user",
  ],
  Array [
    "2. MyCustomControllerGeneric.save    -> POST   /api/v1/user",
  ],
  Array [
    "3. MyCustomControllerGeneric.get     -> GET    /api/v1/user/:id",
  ],
  Array [
    "4. MyCustomControllerGeneric.modify  -> PATCH  /api/v1/user/:id",
  ],
  Array [
    "5. MyCustomControllerGeneric.replace -> PUT    /api/v1/user/:id",
  ],
  Array [
    "6. MyCustomControllerGeneric.delete  -> DELETE /api/v1/user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should generate routes with parameter property entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should generate routes with property field entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Generic Controller Should not generate entity that is not marked as controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "No controller found",
  ],
]
`;

exports[`Route Generator Generic Controller Should throw error when entity doesn't have ID specified 1`] = `
Array [
  Array [
    [Error: Entity User used by generic controller doesn't have an ID property],
  ],
]
`;

exports[`Route Generator Generic Controller Should throw error when using default generic controller 1`] = `
Array [
  Array [
    [Error: @genericController() required generic controller implementation, please install the appropriate facility],
  ],
]
`;

exports[`Route Generator Grouping Should able to group one to many routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultNestedCon...eneric.list    -> GET    /api/v2/user/:pid/animals",
  ],
  Array [
    "2. DefaultNestedCon...eneric.save    -> POST   /api/v2/user/:pid/animals",
  ],
  Array [
    "3. DefaultNestedCon...eneric.get     -> GET    /api/v2/user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultNestedCon...eneric.modify  -> PATCH  /api/v2/user/:pid/animals/:id",
  ],
  Array [
    "5. DefaultNestedCon...eneric.replace -> PUT    /api/v2/user/:pid/animals/:id",
  ],
  Array [
    "6. DefaultNestedCon...eneric.delete  -> DELETE /api/v2/user/:pid/animals/:id",
  ],
  Array [],
  Array [
    "1. DefaultNestedCon...eneric.list    -> GET    /api/v1/user/:pid/animals",
  ],
  Array [
    "2. DefaultNestedCon...eneric.save    -> POST   /api/v1/user/:pid/animals",
  ],
  Array [
    "3. DefaultNestedCon...eneric.get     -> GET    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultNestedCon...eneric.modify  -> PATCH  /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "5. DefaultNestedCon...eneric.replace -> PUT    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "6. DefaultNestedCon...eneric.delete  -> DELETE /api/v1/user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Grouping Should able to group routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /api/v2/user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /api/v2/user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /api/v2/user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /api/v2/user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /api/v2/user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /api/v2/user/:id",
  ],
  Array [],
  Array [
    "1. DefaultControllerGeneric.list            -> GET    /api/v1/user",
  ],
  Array [
    "2. DefaultControllerGeneric.save(data, ctx) -> POST   /api/v1/user",
  ],
  Array [
    "3. DefaultControllerGeneric.get             -> GET    /api/v1/user/:id",
  ],
  Array [
    "4. DefaultControllerGeneric.modify          -> PATCH  /api/v1/user/:id",
  ],
  Array [
    "5. DefaultControllerGeneric.replace         -> PUT    /api/v1/user/:id",
  ],
  Array [
    "6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /api/v1/user/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Many To One Should not confused when parent specify property but without inverseProperty 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultNestedCon...eneric.list    -> GET    /user/:pid/animal",
  ],
  Array [
    "2. DefaultNestedCon...eneric.save    -> POST   /user/:pid/animal",
  ],
  Array [
    "3. DefaultNestedCon...eneric.get     -> GET    /user/:pid/animal/:id",
  ],
  Array [
    "4. DefaultNestedCon...eneric.modify  -> PATCH  /user/:pid/animal/:id",
  ],
  Array [
    "5. DefaultNestedCon...eneric.replace -> PUT    /user/:pid/animal/:id",
  ],
  Array [
    "6. DefaultNestedCon...eneric.delete  -> DELETE /user/:pid/animal/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Many To One Should work with complete one to many relation 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultNestedCon...eneric.list    -> GET    /user/:pid/animal",
  ],
  Array [
    "2. DefaultNestedCon...eneric.save    -> POST   /user/:pid/animal",
  ],
  Array [
    "3. DefaultNestedCon...eneric.get     -> GET    /user/:pid/animal/:id",
  ],
  Array [
    "4. DefaultNestedCon...eneric.modify  -> PATCH  /user/:pid/animal/:id",
  ],
  Array [
    "5. DefaultNestedCon...eneric.replace -> PUT    /user/:pid/animal/:id",
  ],
  Array [
    "6. DefaultNestedCon...eneric.delete  -> DELETE /user/:pid/animal/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Many To One Should work with many to one without parent's property 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultNestedCon...eneric.list    -> GET    /user/:pid/animal",
  ],
  Array [
    "2. DefaultNestedCon...eneric.save    -> POST   /user/:pid/animal",
  ],
  Array [
    "3. DefaultNestedCon...eneric.get     -> GET    /user/:pid/animal/:id",
  ],
  Array [
    "4. DefaultNestedCon...eneric.modify  -> PATCH  /user/:pid/animal/:id",
  ],
  Array [
    "5. DefaultNestedCon...eneric.replace -> PUT    /user/:pid/animal/:id",
  ],
  Array [
    "6. DefaultNestedCon...eneric.delete  -> DELETE /user/:pid/animal/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should able to apply multiple controller into relation property 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultNestedCon...eneric.list    -> GET    /user-data/:uid/animal-data",
  ],
  Array [
    " 2. DefaultNestedCon...eneric.save    -> POST   /user-data/:uid/animal-data",
  ],
  Array [
    " 3. DefaultNestedCon...eneric.get     -> GET    /user-data/:uid/animal-data/:id",
  ],
  Array [
    " 4. DefaultNestedCon...eneric.modify  -> PATCH  /user-data/:uid/animal-data/:id",
  ],
  Array [
    " 5. DefaultNestedCon...eneric.replace -> PUT    /user-data/:uid/animal-data/:id",
  ],
  Array [
    " 6. DefaultNestedCon...eneric.delete  -> DELETE /user-data/:uid/animal-data/:id",
  ],
  Array [
    " 7. DefaultNestedCon...eneric.list    -> GET    /user/:pid/animals",
  ],
  Array [
    " 8. DefaultNestedCon...eneric.save    -> POST   /user/:pid/animals",
  ],
  Array [
    " 9. DefaultNestedCon...eneric.get     -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "10. DefaultNestedCon...eneric.modify  -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "11. DefaultNestedCon...eneric.replace -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "12. DefaultNestedCon...eneric.delete  -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should able to change root path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /api/v1/user",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /api/v1/user",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /api/v1/user/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /api/v1/user/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /api/v1/user/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /api/v1/user/:id",
  ],
  Array [
    " 7. DefaultNestedCon...eneric.list           -> GET    /api/v1/user/:pid/animals",
  ],
  Array [
    " 8. DefaultNestedCon...eneric.save           -> POST   /api/v1/user/:pid/animals",
  ],
  Array [
    " 9. DefaultNestedCon...eneric.get            -> GET    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "10. DefaultNestedCon...eneric.modify         -> PATCH  /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "11. DefaultNestedCon...eneric.replace        -> PUT    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "12. DefaultNestedCon...eneric.delete         -> DELETE /api/v1/user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should able to specify ID type by providing decorator 1`] = `
Array [
  Object {
    "name": "list",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "offset",
        "type": Number,
      },
      Object {
        "name": "limit",
        "type": Number,
      },
      Object {
        "name": "filter",
        "type": String,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "order",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "save",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": Animal,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "get",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "modify",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": Animal,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "replace",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": Animal,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
  Object {
    "name": "delete",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
  },
]
`;

exports[`Route Generator One To Many Controller Should able to specify relation 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DefaultNestedCon...eneric.list    -> GET    /user/:pid/animals",
  ],
  Array [
    "2. DefaultNestedCon...eneric.save    -> POST   /user/:pid/animals",
  ],
  Array [
    "3. DefaultNestedCon...eneric.get     -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "4. DefaultNestedCon...eneric.modify  -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "5. DefaultNestedCon...eneric.replace -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "6. DefaultNestedCon...eneric.delete  -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should able to use custom controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MyCustomOneToMan...eneric.list    -> GET    /api/v1/user/:pid/animals",
  ],
  Array [
    "2. MyCustomOneToMan...eneric.save    -> POST   /api/v1/user/:pid/animals",
  ],
  Array [
    "3. MyCustomOneToMan...eneric.get     -> GET    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "4. MyCustomOneToMan...eneric.modify  -> PATCH  /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "5. MyCustomOneToMan...eneric.replace -> PUT    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "6. MyCustomOneToMan...eneric.delete  -> DELETE /api/v1/user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should generate routes with parameter property entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [
    " 7. DefaultNestedCon...eneric.list           -> GET    /user/:pid/animals",
  ],
  Array [
    " 8. DefaultNestedCon...eneric.save           -> POST   /user/:pid/animals",
  ],
  Array [
    " 9. DefaultNestedCon...eneric.get            -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "10. DefaultNestedCon...eneric.modify         -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "11. DefaultNestedCon...eneric.replace        -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "12. DefaultNestedCon...eneric.delete         -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should generate routes with property field entity 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [
    " 7. DefaultNestedCon...eneric.list           -> GET    /user/:pid/animals",
  ],
  Array [
    " 8. DefaultNestedCon...eneric.save           -> POST   /user/:pid/animals",
  ],
  Array [
    " 9. DefaultNestedCon...eneric.get            -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "10. DefaultNestedCon...eneric.modify         -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "11. DefaultNestedCon...eneric.replace        -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "12. DefaultNestedCon...eneric.delete         -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator One To Many Controller Should throw error when no ID specified on entity 1`] = `
Array [
  Array [
    [Error: Entity Animal used by generic controller doesn't have an ID property],
  ],
]
`;

exports[`Route Generator One To Many Controller Should throw error when no ID specified on parent entity 1`] = `
Array [
  Array [
    [Error: Entity User used by generic controller doesn't have an ID property],
  ],
]
`;

exports[`Route Generator One To Many Controller Should throw error when no generic controller impl found 1`] = `
Array [
  Array [
    [Error: @genericController() required generic controller implementation, please install the appropriate facility],
  ],
]
`;

exports[`Route Generator One To Many Controller Should throw error when the relation doesn't have type information 1`] = `
Array [
  Array [
    [Error: Unable to get data type of member User.animals. Make sure to provide type information, or manage if its has cross reference to other class],
  ],
]
`;

exports[`Route Generator Should able to flatten nested directories 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /animal",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /animal",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /animal/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /animal/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /animal/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /animal/:id",
  ],
  Array [
    " 7. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    " 8. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    " 9. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "10. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "11. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "12. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [
    "13. DefaultNestedCon...eneric.list           -> GET    /user/:pid/animals",
  ],
  Array [
    "14. DefaultNestedCon...eneric.save           -> POST   /user/:pid/animals",
  ],
  Array [
    "15. DefaultNestedCon...eneric.get            -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "16. DefaultNestedCon...eneric.modify         -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "17. DefaultNestedCon...eneric.replace        -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "18. DefaultNestedCon...eneric.delete         -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Should able to specify entity directory 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /animal",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /animal",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /animal/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /animal/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /animal/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /animal/:id",
  ],
  Array [
    " 7. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    " 8. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    " 9. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "10. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "11. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "12. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [
    "13. DefaultNestedCon...eneric.list           -> GET    /user/:pid/animals",
  ],
  Array [
    "14. DefaultNestedCon...eneric.save           -> POST   /user/:pid/animals",
  ],
  Array [
    "15. DefaultNestedCon...eneric.get            -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "16. DefaultNestedCon...eneric.modify         -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "17. DefaultNestedCon...eneric.replace        -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "18. DefaultNestedCon...eneric.delete         -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Should able to specify entity directory with relative path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /animal",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /animal",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /animal/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /animal/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /animal/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /animal/:id",
  ],
  Array [
    " 7. DefaultControllerGeneric.list            -> GET    /user",
  ],
  Array [
    " 8. DefaultControllerGeneric.save(data, ctx) -> POST   /user",
  ],
  Array [
    " 9. DefaultControllerGeneric.get             -> GET    /user/:id",
  ],
  Array [
    "10. DefaultControllerGeneric.modify          -> PATCH  /user/:id",
  ],
  Array [
    "11. DefaultControllerGeneric.replace         -> PUT    /user/:id",
  ],
  Array [
    "12. DefaultControllerGeneric.delete(id, ctx) -> DELETE /user/:id",
  ],
  Array [
    "13. DefaultNestedCon...eneric.list           -> GET    /user/:pid/animals",
  ],
  Array [
    "14. DefaultNestedCon...eneric.save           -> POST   /user/:pid/animals",
  ],
  Array [
    "15. DefaultNestedCon...eneric.get            -> GET    /user/:pid/animals/:id",
  ],
  Array [
    "16. DefaultNestedCon...eneric.modify         -> PATCH  /user/:pid/animals/:id",
  ],
  Array [
    "17. DefaultNestedCon...eneric.replace        -> PUT    /user/:pid/animals/:id",
  ],
  Array [
    "18. DefaultNestedCon...eneric.delete         -> DELETE /user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Should able to specify nested directories 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DefaultControllerGeneric.list            -> GET    /api/v1/animal",
  ],
  Array [
    " 2. DefaultControllerGeneric.save(data, ctx) -> POST   /api/v1/animal",
  ],
  Array [
    " 3. DefaultControllerGeneric.get             -> GET    /api/v1/animal/:id",
  ],
  Array [
    " 4. DefaultControllerGeneric.modify          -> PATCH  /api/v1/animal/:id",
  ],
  Array [
    " 5. DefaultControllerGeneric.replace         -> PUT    /api/v1/animal/:id",
  ],
  Array [
    " 6. DefaultControllerGeneric.delete(id, ctx) -> DELETE /api/v1/animal/:id",
  ],
  Array [
    " 7. DefaultControllerGeneric.list            -> GET    /api/v1/user",
  ],
  Array [
    " 8. DefaultControllerGeneric.save(data, ctx) -> POST   /api/v1/user",
  ],
  Array [
    " 9. DefaultControllerGeneric.get             -> GET    /api/v1/user/:id",
  ],
  Array [
    "10. DefaultControllerGeneric.modify          -> PATCH  /api/v1/user/:id",
  ],
  Array [
    "11. DefaultControllerGeneric.replace         -> PUT    /api/v1/user/:id",
  ],
  Array [
    "12. DefaultControllerGeneric.delete(id, ctx) -> DELETE /api/v1/user/:id",
  ],
  Array [
    "13. DefaultNestedCon...eneric.list           -> GET    /api/v1/user/:pid/animals",
  ],
  Array [
    "14. DefaultNestedCon...eneric.save           -> POST   /api/v1/user/:pid/animals",
  ],
  Array [
    "15. DefaultNestedCon...eneric.get            -> GET    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "16. DefaultNestedCon...eneric.modify         -> PATCH  /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "17. DefaultNestedCon...eneric.replace        -> PUT    /api/v1/user/:pid/animals/:id",
  ],
  Array [
    "18. DefaultNestedCon...eneric.delete         -> DELETE /api/v1/user/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`Route Generator Should initiate IdentifierResult properly 1`] = `
IdentifierResult {
  "id": 20,
}
`;
