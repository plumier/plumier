// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Ellipsis Should not trim string if shorter than expected 1`] = `"Lorem"`;

exports[`Ellipsis Should trim long string 1`] = `"Lorem ipsum... dolor"`;

exports[`Entity Relation Info Should extract many to one entity relation info properly 1`] = `
Object {
  "child": Animal,
  "childProperty": "user",
  "parent": User,
  "parentProperty": "animals",
  "type": "ManyToOne",
}
`;

exports[`Entity Relation Info Should extract many to one entity relation without parent inverse property 1`] = `
Object {
  "child": Animal,
  "childProperty": "user",
  "parent": User,
  "parentProperty": undefined,
  "type": "ManyToOne",
}
`;

exports[`Entity Relation Info Should extract one to many entity relation info properly 1`] = `
Object {
  "child": Animal,
  "childProperty": "user",
  "parent": User,
  "parentProperty": "animals",
  "type": "OneToMany",
}
`;

exports[`Entity Relation Info Should throw error when provided invalid property name 1`] = `"Animal doesn't have property named users"`;

exports[`Entity Relation Info Should throw error when provided non relation one to many property 1`] = `"User.animals is not a valid relation, make sure its decorated with @entity.relation() decorator"`;

exports[`Meta Decorator Should able to decorate method 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [
        Object {
          "kind": "Noop",
          "target": Dummy,
          Symbol(tinspector:decoratorId): Symbol(noop),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "applyTo": Array [],
            "inherit": false,
            "removeApplied": true,
          },
        },
      ],
      "kind": "Method",
      "name": "method",
      "parameters": Array [],
      "returnType": Number,
      "typeClassification": "Primitive",
    },
  ],
  "name": "Dummy",
  "properties": Array [],
  "super": Object,
  "type": Dummy,
  "typeClassification": "Class",
}
`;

exports[`Meta Decorator Should able to decorate method parameter 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "parameters": Array [
        Object {
          "decorators": Array [
            Object {
              "genericArguments": Array [],
              "kind": "Override",
              "target": Dummy,
              "type": Number,
              Symbol(tinspector:decoratorId): Symbol(override),
              Symbol(tinspector:decoratorOption): Object {
                "allowMultiple": false,
                "applyTo": Array [],
                "inherit": true,
                "removeApplied": true,
              },
            },
          ],
          "fields": "par",
          "index": 0,
          "kind": "Parameter",
          "name": "par",
          "type": Number,
          "typeClassification": "Primitive",
        },
      ],
      "returnType": undefined,
      "typeClassification": undefined,
    },
  ],
  "name": "Dummy",
  "properties": Array [],
  "super": Object,
  "type": Dummy,
  "typeClassification": "Class",
}
`;

exports[`Meta Decorator Should able to decorate method return type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [
    Object {
      "decorators": Array [
        Object {
          "genericArguments": Array [],
          "kind": "Override",
          "target": Dummy,
          "type": Number,
          Symbol(tinspector:decoratorId): Symbol(override),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "applyTo": Array [],
            "inherit": true,
            "removeApplied": true,
          },
        },
      ],
      "kind": "Method",
      "name": "method",
      "parameters": Array [],
      "returnType": Number,
      "typeClassification": "Primitive",
    },
  ],
  "name": "Dummy",
  "properties": Array [],
  "super": Object,
  "type": Dummy,
  "typeClassification": "Class",
}
`;

exports[`Meta Decorator Should able to decorate parameter properties 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [
      Object {
        "decorators": Array [],
        "fields": "par1",
        "index": 0,
        "kind": "Parameter",
        "name": "par1",
        "type": String,
        "typeClassification": "Primitive",
      },
      Object {
        "decorators": Array [],
        "fields": "par2",
        "index": 1,
        "kind": "Parameter",
        "name": "par2",
        "type": Number,
        "typeClassification": "Primitive",
      },
    ],
  },
  "decorators": Array [
    Object {
      "type": "ParameterProperties",
      Symbol(tinspector:decoratorId): Symbol(paramProp),
      Symbol(tinspector:decoratorOption): Object {
        "allowMultiple": false,
        "applyTo": Array [],
        "inherit": true,
        "removeApplied": true,
      },
    },
  ],
  "kind": "Class",
  "methods": Array [],
  "name": "Dummy",
  "properties": Array [
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 0,
      "isParameter": true,
      "kind": "Property",
      "name": "par1",
      "set": undefined,
      "type": String,
      "typeClassification": "Primitive",
    },
    Object {
      "decorators": Array [],
      "get": undefined,
      "index": 1,
      "isParameter": true,
      "kind": "Property",
      "name": "par2",
      "set": undefined,
      "type": Number,
      "typeClassification": "Primitive",
    },
  ],
  "super": Object,
  "type": Dummy,
  "typeClassification": "Class",
}
`;

exports[`Meta Decorator Should able to decorate property 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "Dummy",
  "properties": Array [
    Object {
      "decorators": Array [
        Object {
          "kind": "Noop",
          "target": Dummy,
          Symbol(tinspector:decoratorId): Symbol(noop),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "applyTo": Array [],
            "inherit": false,
            "removeApplied": true,
          },
        },
      ],
      "get": undefined,
      "kind": "Property",
      "name": "prop",
      "set": undefined,
      "type": Number,
      "typeClassification": "Primitive",
    },
  ],
  "super": Object,
  "type": Dummy,
  "typeClassification": "Class",
}
`;

exports[`Meta Decorator Should able to decorate property data type 1`] = `
Object {
  "ctor": Object {
    "kind": "Constructor",
    "name": "constructor",
    "parameters": Array [],
  },
  "decorators": Array [],
  "kind": "Class",
  "methods": Array [],
  "name": "Dummy",
  "properties": Array [
    Object {
      "decorators": Array [
        Object {
          "genericArguments": Array [],
          "kind": "Override",
          "target": Dummy,
          "type": ,
          Symbol(tinspector:decoratorId): Symbol(override),
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": false,
            "applyTo": Array [],
            "inherit": true,
            "removeApplied": true,
          },
        },
      ],
      "get": undefined,
      "kind": "Property",
      "name": "prop",
      "set": undefined,
      "type": Array [
        Number,
      ],
      "typeClassification": "Array",
    },
  ],
  "super": Object,
  "type": Dummy,
  "typeClassification": "Class",
}
`;

exports[`Model Analyser Should analyze missing array type 1`] = `
Array [
  Object {
    "issue": "ArrayTypeMissing",
    "location": "MyModel.dates",
  },
]
`;

exports[`Model Analyser Should analyze missing properties 1`] = `
Array [
  Object {
    "issue": "NoProperties",
    "location": "MyModel",
  },
]
`;

exports[`Model Analyser Should analyze missing property in array type 1`] = `
Array [
  Object {
    "issue": "TypeMissing",
    "location": "MyModel.date",
  },
]
`;

exports[`Model Analyser Should analyze missing property type 1`] = `
Array [
  Object {
    "issue": "TypeMissing",
    "location": "MyModel.date",
  },
]
`;

exports[`Model Analyser Should analyze missing property type in nested array model 1`] = `
Array [
  Object {
    "issue": "TypeMissing",
    "location": "ParentModel.date",
  },
]
`;

exports[`Model Analyser Should analyze missing property type in nested model 1`] = `
Array [
  Object {
    "issue": "TypeMissing",
    "location": "ParentModel.date",
  },
]
`;

exports[`Model Analyser Should skip cross reference type 1`] = `
Array [
  Object {
    "issue": "TypeMissing",
    "location": "ParentModel.date",
  },
]
`;

exports[`PrintTable Should able to print table 1`] = `
Array [
  Array [
    "1. John Subaru 60",
  ],
  Array [
    "2. John Subaru 60",
  ],
  Array [
    "3. John Subaru 60",
  ],
]
`;

exports[`PrintTable Should able to print table with algin right 1`] = `
Array [
  Array [
    "1. John Subaru  60",
  ],
  Array [
    "2. John Subaru 160",
  ],
  Array [
    "3. John Subaru  60",
  ],
]
`;

exports[`PrintTable Should not error when provided undefined value 1`] = `
Array [
  Array [
    "1. John Subaru 60",
  ],
  Array [
    "2. John Subaru   ",
  ],
  Array [
    "3. John Subaru 60",
  ],
]
`;
