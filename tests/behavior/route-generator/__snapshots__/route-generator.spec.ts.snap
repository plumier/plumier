// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Extend Route Generator Should able to provide ActionRoutes from Facility 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.method() -> GET /animal/method",
  ],
  Array [
    "2. OtherController.method()  -> GET /other/method",
  ],
  Array [],
]
`;

exports[`Extend Route Generator Should able to provide VirtualRoutes from Facility 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.method() -> GET /animal/method",
  ],
  Array [
    "2. MyFacility                -> GET /other/get",
  ],
  Array [],
]
`;

exports[`Extend Route Generator Should duplicate route if non overridable 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.method() -> GET /animal/method
 - error PLUM1001: Duplicate route found in AnimalController.method() MyFacility",
  ],
  Array [
    "2. MyFacility                -> GET /animal/method
 - error PLUM1001: Duplicate route found in AnimalController.method() MyFacility",
  ],
  Array [],
]
`;

exports[`Extend Route Generator Should not duplicate route if overridable 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.method() -> GET /animal/method",
  ],
  Array [],
]
`;

exports[`Route Generator Should able to set metadata overridable 1`] = `
Array [
  Object {
    "action": Object {
      "decorators": Array [],
      "kind": "Method",
      "name": "method",
      "parameters": Array [],
      "returnType": undefined,
      "typeClassification": undefined,
    },
    "controller": Object {
      "ctor": Object {
        "kind": "Constructor",
        "name": "constructor",
        "parameters": Array [],
      },
      "decorators": Array [
        Object {
          "name": "Root",
          "url": "beast",
          Symbol(tinspector:decoratorOption): Object {
            "allowMultiple": true,
            "inherit": true,
          },
        },
      ],
      "kind": "Class",
      "methods": Array [
        Object {
          "decorators": Array [],
          "kind": "Method",
          "name": "method",
          "parameters": Array [],
          "returnType": undefined,
          "typeClassification": undefined,
        },
      ],
      "name": "AnimalController",
      "properties": Array [],
      "super": Object,
      "type": AnimalController,
      "typeClassification": "Class",
    },
    "group": undefined,
    "kind": "ActionRoute",
    "method": "get",
    "overridable": true,
    "url": "/beast/method",
  },
]
`;

exports[`Route Grouping Should able to combine with default controller path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()   -> GET /animal/get",
  ],
  Array [
    "2. BeastController.get()    -> GET /beast/get",
  ],
  Array [
    "3. CreatureController.get() -> GET /creature/get",
  ],
  Array [],
  Array [
    "1. AnimalController.get()  -> GET /api/v1/animal/get",
  ],
  Array [
    "2. CatController.get()     -> GET /api/v1/kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [],
  Array [
    "1. AnimalController.get() -> GET /api/v2/animal/get",
  ],
  Array [],
]
`;

exports[`Route Grouping Should able to group routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.method() -> GET /api/v1/animal/method",
  ],
  Array [],
  Array [
    "1. AnimalController.method() -> GET /api/v2/animal/method",
  ],
  Array [],
]
`;

exports[`Route Grouping Should able to group routes by providing absolute path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /api/v1/animal/get",
  ],
  Array [
    "2. CatController.get()     -> GET /api/v1/kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [],
  Array [
    "1. AnimalController.get() -> GET /api/v2/animal/get",
  ],
  Array [],
]
`;

exports[`Route Grouping Should able to group routes by providing relative path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /api/v1/animal/get",
  ],
  Array [
    "2. CatController.get()     -> GET /api/v1/kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [],
  Array [
    "1. AnimalController.get() -> GET /api/v2/animal/get",
  ],
  Array [],
]
`;

exports[`Route Grouping Should able to make endpoint overridable 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.method() -> GET /animal/method",
  ],
  Array [],
]
`;

exports[`Route Grouping Should use directory tree as route 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /api/v1/animal/get",
  ],
  Array [
    "2. CatController.get()     -> GET /api/v1/kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [
    "5. AnimalController.get()  -> GET /api/v2/animal/get",
  ],
  Array [],
]
`;

exports[`Route Ignore Should able to ignore class from route generation 1`] = `Array []`;

exports[`Route Ignore Should able to ignore specific methods from class ignore 1`] = `
Array [
  Object {
    "method": "put",
    "url": "/users/:id",
  },
]
`;

exports[`Route Ignore Should able to ignore specific methods from class ignore with multiple root route 1`] = `
Array [
  Object {
    "method": "put",
    "url": "/users/:id",
  },
  Object {
    "method": "put",
    "url": "/clients/:id",
  },
]
`;

exports[`Route Ignore Should able to ignore specific methods from class ignore with multiple route 1`] = `
Array [
  Object {
    "method": "put",
    "url": "/users/:id",
  },
  Object {
    "method": "put",
    "url": "/users/modify",
  },
]
`;

exports[`Route Merging Should ignore parameter name 1`] = `
Array [
  Object {
    "kind": "ActionRoute",
    "method": "post",
    "url": "/users",
  },
  Object {
    "access": "Public",
    "kind": "ActionRoute",
    "method": "get",
    "url": "/users/:userId/animals/:animalId",
  },
]
`;

exports[`Route Merging Should keep duplicate if not overridable 1`] = `
Array [
  Object {
    "access": "Public",
    "kind": "ActionRoute",
    "method": "get",
    "url": "/users/:id",
  },
  Object {
    "kind": "ActionRoute",
    "method": "post",
    "url": "/users",
  },
  Object {
    "kind": "ActionRoute",
    "method": "get",
    "url": "/users/:id",
  },
]
`;

exports[`Route Merging Should merge nested routes 1`] = `
Array [
  Object {
    "kind": "ActionRoute",
    "method": "post",
    "url": "/users",
  },
  Object {
    "access": "Public",
    "kind": "ActionRoute",
    "method": "get",
    "url": "/users/:userId/animals/:animalId",
  },
]
`;

exports[`Route Merging Should merge overridable route and maintain position 1`] = `
Array [
  Object {
    "kind": "ActionRoute",
    "method": "post",
    "url": "/users",
  },
  Object {
    "access": "Public",
    "kind": "ActionRoute",
    "method": "get",
    "url": "/users/:id",
  },
]
`;

exports[`Route Merging Should merge route properly 1`] = `
Array [
  Object {
    "kind": "ActionRoute",
    "method": "post",
    "url": "/users",
  },
  Object {
    "kind": "ActionRoute",
    "method": "get",
    "url": "/users/:id",
  },
  Object {
    "kind": "ActionRoute",
    "method": "put",
    "url": "/users/:id",
  },
  Object {
    "kind": "ActionRoute",
    "method": "patch",
    "url": "/users/:id",
  },
  Object {
    "kind": "ActionRoute",
    "method": "delete",
    "url": "/users/:id",
  },
]
`;
