// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Apply Route from Class Should able to apply route from controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalsController.get(name) -> GET /animals/:name",
  ],
  Array [],
]
`;

exports[`Apply Route from Class Should able to apply route from controller combine with map 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalsController.get(name) -> GET /animals/:id",
  ],
  Array [],
]
`;

exports[`Apply Route from Class Should able to apply simple route from controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalsController.get(name) -> GET /animals/get",
  ],
  Array [],
]
`;

exports[`Extend Route Generator Should able to provide ActionRoutes from Facility 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.method() -> GET /animal/method",
  ],
  Array [
    "2. OtherController.method()  -> GET /other/method",
  ],
  Array [],
]
`;

exports[`Extend Route Generator Should able to provide VirtualRoutes from Facility 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.method() -> GET /animal/method",
  ],
  Array [
    "2. MyFacility                -> GET /other/get",
  ],
  Array [],
]
`;

exports[`Route Generator Should able to provided multiple globs 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [
    "2. CatController.get()     -> GET /kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [
    "5. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [],
]
`;

exports[`Route Generator Should able to provided multiple path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [
    "2. CatController.get()     -> GET /kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [
    "5. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [],
]
`;

exports[`Route Generator Should able to provided multiple path with absolute 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [
    "2. CatController.get()     -> GET /kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [
    "5. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [],
]
`;

exports[`Route Generator Should able to search all on nested directory 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [
    "2. CatController.get()     -> GET /kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [
    "5. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [],
]
`;

exports[`Route Generator Should able to transform using absolute glob 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [
    "2. CatController.get()     -> GET /kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [
    "5. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [],
]
`;

exports[`Route Generator Should able to transform using relative glob 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [
    "2. CatController.get()     -> GET /kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [
    "5. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [],
]
`;

exports[`Route Generator Should not throw error when specify invalid directory 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "No controller found",
  ],
]
`;

exports[`Route Generator Should not use directoryAsPath with glob 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [
    "2. CatController.get()     -> GET /kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [
    "5. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [],
]
`;

exports[`Route Grouping Should able to group routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.method() -> GET /api/v1/animal/method",
  ],
  Array [],
  Array [
    "1. AnimalController.method() -> GET /api/v2/animal/method",
  ],
  Array [],
]
`;

exports[`Route Grouping Should able to group routes by providing absolute path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /api/v1/animal/get",
  ],
  Array [
    "2. CatController.get()     -> GET /api/v1/kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [],
  Array [
    "1. AnimalController.get() -> GET /api/v2/animal/get",
  ],
  Array [],
]
`;

exports[`Route Grouping Should able to group routes by providing relative path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /api/v1/animal/get",
  ],
  Array [
    "2. CatController.get()     -> GET /api/v1/kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [],
  Array [
    "1. AnimalController.get() -> GET /api/v2/animal/get",
  ],
  Array [],
]
`;

exports[`Route Grouping Should able to ignore nested directory as path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [
    "2. CatController.get()     -> GET /kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [
    "5. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [],
]
`;

exports[`Route Grouping Should able to ignore nested directory as path with rootPath 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /api/v1/animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [
    "2. CatController.get()     -> GET /api/v1/kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [
    "5. AnimalController.get()  -> GET /api/v1/animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [],
]
`;

exports[`Route Grouping Should skip global controller setting if ControllerFacilityProvided 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /api/v1/animal/get",
  ],
  Array [
    "2. CatController.get()     -> GET /api/v1/kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [],
  Array [
    "1. AnimalController.get() -> GET /api/v2/animal/get",
  ],
  Array [],
]
`;

exports[`Route Grouping Should use directory tree as route 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /api/v1/animal/get",
  ],
  Array [
    "2. CatController.get()     -> GET /api/v1/kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [
    "5. AnimalController.get()  -> GET /api/v2/animal/get",
  ],
  Array [],
]
`;

exports[`Route Ignore Should able to ignore class from route generation 1`] = `Array []`;

exports[`Route Ignore Should able to ignore specific methods from class ignore 1`] = `
Array [
  Object {
    "method": "put",
    "url": "/users/:id",
  },
]
`;

exports[`Route Ignore Should able to ignore specific methods from class ignore with multiple root route 1`] = `
Array [
  Object {
    "method": "put",
    "url": "/users/:id",
  },
  Object {
    "method": "put",
    "url": "/clients/:id",
  },
]
`;

exports[`Route Ignore Should able to ignore specific methods from class ignore with multiple route 1`] = `
Array [
  Object {
    "method": "put",
    "url": "/users/:id",
  },
  Object {
    "method": "put",
    "url": "/users/modify",
  },
]
`;

exports[`Route Mapping Route Analysis Should not cause route analysis error 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalsController.get(name) -> GET /animals/:id",
  ],
  Array [],
]
`;

exports[`Route Mapping Route Analysis Should show route analysis issue when misconfigured 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalsController.get(name) -> GET /animals/:id
 - error Route parameters (id) doesn't have appropriate backing parameter",
  ],
  Array [],
]
`;

exports[`Router with external controller Should able to disable directoryAsPath 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [
    "2. CatController.get()     -> GET /kitty/get",
  ],
  Array [
    "3. DuckController.get()    -> GET /quack/get",
  ],
  Array [
    "4. ChickenController.get() -> GET /chicken",
  ],
  Array [
    "5. AnimalController.get()  -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get()",
  ],
  Array [],
]
`;

exports[`Router with external controller Should able to specify rootPath 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. HomeController.get()     -> GET /api/v1/home/get",
  ],
  Array [
    " 2. AnimalController.get()   -> GET /api/v1/animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get()",
  ],
  Array [
    " 3. BeastController.get()    -> GET /api/v1/beast/get
 - error Duplicate route found in BeastController.get() BeastController.get()",
  ],
  Array [
    " 4. CreatureController.get() -> GET /api/v1/creature/get
 - error Duplicate route found in CreatureController.get() CreatureController.get()",
  ],
  Array [
    " 5. AnimalController.get()   -> GET /api/v1/animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get()",
  ],
  Array [
    " 6. BeastController.get()    -> GET /api/v1/beast/get
 - error Duplicate route found in BeastController.get() BeastController.get()",
  ],
  Array [
    " 7. CreatureController.get() -> GET /api/v1/creature/get
 - error Duplicate route found in CreatureController.get() CreatureController.get()",
  ],
  Array [
    " 8. UsersController.save()   -> GET /api/v1/users/save",
  ],
  Array [
    " 9. AnimalController.get()   -> GET /api/v1/animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get()",
  ],
  Array [
    "10. CatController.get()      -> GET /api/v1/kitty/get
 - error Duplicate route found in CatController.get() CatController.get()",
  ],
  Array [
    "11. DuckController.get()     -> GET /quack/get
 - error Duplicate route found in DuckController.get() DuckController.get()",
  ],
  Array [
    "12. ChickenController.get()  -> GET /chicken
 - error Duplicate route found in ChickenController.get() ChickenController.get()",
  ],
  Array [
    "13. AnimalController.get()   -> GET /api/v1/animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get()",
  ],
  Array [
    "14. AnimalController.get()   -> GET /api/v1/animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get()",
  ],
  Array [
    "15. CatController.get()      -> GET /api/v1/kitty/get
 - error Duplicate route found in CatController.get() CatController.get()",
  ],
  Array [
    "16. DuckController.get()     -> GET /quack/get
 - error Duplicate route found in DuckController.get() DuckController.get()",
  ],
  Array [
    "17. ChickenController.get()  -> GET /chicken
 - error Duplicate route found in ChickenController.get() ChickenController.get()",
  ],
  Array [
    "18. AnimalController.get()   -> GET /api/v1/animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get()",
  ],
  Array [],
]
`;

exports[`Router with external controller Should load controllers 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. HomeController.get()     -> GET /home/get",
  ],
  Array [
    " 2. AnimalController.get()   -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get()",
  ],
  Array [
    " 3. BeastController.get()    -> GET /beast/get
 - error Duplicate route found in BeastController.get() BeastController.get()",
  ],
  Array [
    " 4. CreatureController.get() -> GET /creature/get
 - error Duplicate route found in CreatureController.get() CreatureController.get()",
  ],
  Array [
    " 5. AnimalController.get()   -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get()",
  ],
  Array [
    " 6. BeastController.get()    -> GET /beast/get
 - error Duplicate route found in BeastController.get() BeastController.get()",
  ],
  Array [
    " 7. CreatureController.get() -> GET /creature/get
 - error Duplicate route found in CreatureController.get() CreatureController.get()",
  ],
  Array [
    " 8. UsersController.save()   -> GET /users/save",
  ],
  Array [
    " 9. AnimalController.get()   -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get()",
  ],
  Array [
    "10. CatController.get()      -> GET /kitty/get
 - error Duplicate route found in CatController.get() CatController.get()",
  ],
  Array [
    "11. DuckController.get()     -> GET /quack/get
 - error Duplicate route found in DuckController.get() DuckController.get()",
  ],
  Array [
    "12. ChickenController.get()  -> GET /chicken
 - error Duplicate route found in ChickenController.get() ChickenController.get()",
  ],
  Array [
    "13. AnimalController.get()   -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get()",
  ],
  Array [
    "14. AnimalController.get()   -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get()",
  ],
  Array [
    "15. CatController.get()      -> GET /kitty/get
 - error Duplicate route found in CatController.get() CatController.get()",
  ],
  Array [
    "16. DuckController.get()     -> GET /quack/get
 - error Duplicate route found in DuckController.get() DuckController.get()",
  ],
  Array [
    "17. ChickenController.get()  -> GET /chicken
 - error Duplicate route found in ChickenController.get() ChickenController.get()",
  ],
  Array [
    "18. AnimalController.get()   -> GET /animal/get
 - error Duplicate route found in AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get() AnimalController.get()",
  ],
  Array [],
]
`;
