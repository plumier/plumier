// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeOrm Facility Should able load entity using absolute dir location 1`] = `
Array [
  "id",
  "name",
  "id",
  "name",
]
`;

exports[`TypeOrm Facility Should able load entity using absolute file location 1`] = `
Array [
  "id",
  "name",
]
`;

exports[`TypeOrm Facility Should able load entity when specified from configuration 1`] = `
Array [
  "id",
  "name",
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties 1`] = `
MyEntity {
  "id": 1,
  "num": 123,
}
`;

exports[`TypeOrm Facility Should able to reflect entity properties 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "num",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties with inheritance 1`] = `
ChildEntity {
  "id": 1,
  "num": 123,
}
`;

exports[`TypeOrm Facility Should able to reflect entity properties with inheritance 2`] = `
Array [
  Object {
    "name": "num",
    "type": Number,
  },
  Object {
    "name": "id",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties with type overridden 1`] = `
MyEntity {
  "id": 1,
  "num": 123,
}
`;

exports[`TypeOrm Facility Should able to reflect entity properties with type overridden 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "num",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect many to many relation 1`] = `
MyEntity {
  "children": Array [
    Child {
      "id": 1,
      "name": "Poo",
    },
  ],
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should able to reflect many to many relation 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "children",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect many to many relation 3`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "parents",
    "type": Array [
      MyEntity,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 1`] = `
MyEntity {
  "children": Array [
    Child {
      "id": 1,
      "name": "Poo",
    },
  ],
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "children",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 3`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "entity",
    "type": MyEntity,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many relation with string inverse property 1`] = `
MyEntity {
  "children": Array [
    Child {
      "id": 1,
      "name": "Poo",
    },
  ],
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should able to reflect one to many relation with string inverse property 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "children",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many relation with string inverse property 3`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "entity",
    "type": MyEntity,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many with braced inverse entity 1`] = `
MyEntity {
  "children": Array [
    Child {
      "id": 1,
      "name": "Poo",
    },
  ],
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should able to reflect one to many with braced inverse entity 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "children",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many with braced inverse entity 3`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "entity",
    "type": MyEntity,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many with curly braced inverse entity 1`] = `
MyEntity {
  "children": Array [
    Child {
      "id": 1,
      "name": "Poo",
    },
  ],
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should able to reflect one to many with curly braced inverse entity 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "children",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many with curly braced inverse entity 3`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "entity",
    "type": MyEntity,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to one relation 1`] = `
Parent {
  "entity": MyEntity {
    "id": 1,
    "name": "Poo",
  },
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should able to reflect one to one relation 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "parent",
    "type": Parent,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to one relation 3`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "entity",
    "type": MyEntity,
  },
]
`;

exports[`TypeOrm Facility Should not error when many to many relation doesn't specify inverse relation 1`] = `
MyEntity {
  "children": Array [
    Child {
      "id": 1,
      "name": "Poo",
    },
  ],
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should throw error when no entities specified 1`] = `
Array [
  Array [
    [Error: No TypeORM entity found, check your connection configuration],
  ],
]
`;

exports[`TypeOrm Facility Should throw error when no entity found 1`] = `
Array [
  Array [
    [Error: No TypeORM entity found, check your connection configuration],
  ],
]
`;

exports[`TypeOrm Facility Should throw error when provided string type relation 1`] = `
Array [
  Array [
    [Error: Relation property Parent.entity uses unsupported data type],
  ],
]
`;

exports[`TypeOrm Update relation with ID Should able to update relation on one to many 1`] = `
Parent {
  "child": Array [
    Child {
      "id": 1,
      "name": "Poo",
    },
    Child {
      "id": 2,
      "name": "Pee",
    },
  ],
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Update relation with ID Should able to update relation on one to one 1`] = `
Parent {
  "child": Child {
    "id": 1,
    "name": "Poo",
  },
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Update relation with ID Should able to update relation with UUID 1`] = `
Parent {
  "child": Child {
    "name": "Poo",
  },
  "id": undefined,
  "name": "Mimi",
}
`;

exports[`TypeOrm Update relation with ID Should able to update relation with custom id name 1`] = `
Parent {
  "child": Child {
    "childId": 1,
    "name": "Poo",
  },
  "name": "Mimi",
  "parentId": 1,
}
`;

exports[`TypeOrm Update relation with ID Should able to validate one to many 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Value must be a number",
      ],
      "path": Array [
        "data",
        "child[0]",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`TypeOrm Update relation with ID Should able to validate relation with UUID 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Value must be an UUID",
      ],
      "path": Array [
        "data",
        "child",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`TypeOrm Update relation with ID Should validate number type id 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Value must be a number",
      ],
      "path": Array [
        "data",
        "child",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`TypeOrm Update relation with ID Should work properly with authorization 1`] = `
Object {
  "message": "Unauthorized to populate parameter paths (data.parent)",
  "status": 401,
}
`;
