// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeOrm CRUD Should generate routes from multiple entities 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. GenericController.list(offset, limit) -> GET    /user",
  ],
  Array [
    " 2. GenericController.save(data)          -> POST   /user",
  ],
  Array [
    " 3. GenericController.get(id)             -> GET    /user/:id",
  ],
  Array [
    " 4. GenericController.modify(id, data)    -> PUT    /user/:id",
  ],
  Array [
    " 5. GenericController.modify(id, data)    -> PATCH  /user/:id",
  ],
  Array [
    " 6. GenericController.delete(id)          -> DELETE /user/:id",
  ],
  Array [
    " 7. GenericController.list(offset, limit) -> GET    /seconduser",
  ],
  Array [
    " 8. GenericController.save(data)          -> POST   /seconduser",
  ],
  Array [
    " 9. GenericController.get(id)             -> GET    /seconduser/:id",
  ],
  Array [
    "10. GenericController.modify(id, data)    -> PUT    /seconduser/:id",
  ],
  Array [
    "11. GenericController.modify(id, data)    -> PATCH  /seconduser/:id",
  ],
  Array [
    "12. GenericController.delete(id)          -> DELETE /seconduser/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Should generate routes properly 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. GenericController.list(offset, limit) -> GET    /user",
  ],
  Array [
    "2. GenericController.save(data)          -> POST   /user",
  ],
  Array [
    "3. GenericController.get(id)             -> GET    /user/:id",
  ],
  Array [
    "4. GenericController.modify(id, data)    -> PUT    /user/:id",
  ],
  Array [
    "5. GenericController.modify(id, data)    -> PATCH  /user/:id",
  ],
  Array [
    "6. GenericController.delete(id)          -> DELETE /user/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties 1`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "num",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties with inheritance 1`] = `
Array [
  Object {
    "name": "num",
    "type": Number,
  },
  Object {
    "name": "id",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect many to many relation 1`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "parent",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 1`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "parent",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "entity",
    "type": MyEntity,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to one relation 1`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "parent",
    "type": Parent,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to one relation with inverse relation 1`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "parent",
    "type": Parent,
  },
]
`;

exports[`TypeOrm Facility Should throw error when no option specified 1`] = `
Array [
  Array [
    [Error: No connection options were found in any of configurations file.],
  ],
]
`;
