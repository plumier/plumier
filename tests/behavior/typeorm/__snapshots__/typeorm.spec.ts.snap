// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeOrm CRUD CRUD Function Should find by query GET /users?offset&limit 1`] = `
Array [
  Object {
    "email": "jane.doe@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
]
`;

exports[`TypeOrm CRUD CRUD Function Should set partial validation on GET /users?offset&limit 1`] = `
Array [
  Object {
    "email": "jane.dane@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
]
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should find by query GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Jojo",
  },
]
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should serve GET /users/:parentId/animals/:id 1`] = `
Object {
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should serve PATCH /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should serve POST /users/:parentId/animals 1`] = `
User {
  "animals": Array [
    Animal {
      "id": 1,
      "name": "Mimi",
    },
    Animal {
      "id": 2,
      "name": "Mimi",
    },
  ],
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
}
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should serve PUT /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should set partial validation GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Jeje",
  },
]
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should set partial validation on PATCH /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`TypeOrm CRUD Route Generator Should able to override route 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DynamicType.list(offset, limit, query) -> GET    /users",
  ],
  Array [
    "2. DynamicType.save(data)                 -> POST   /users",
  ],
  Array [
    "3. UsersController.get(id)                -> GET    /users/:id",
  ],
  Array [
    "4. DynamicType.modify(id, data)           -> PATCH  /users/:id",
  ],
  Array [
    "5. DynamicType.replace(id, data)          -> PUT    /users/:id",
  ],
  Array [
    "6. DynamicType.delete(id)                 -> DELETE /users/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should generate one to many routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DynamicType.list(offset, limit, query) -> GET    /users",
  ],
  Array [
    " 2. DynamicType.save(data)                 -> POST   /users",
  ],
  Array [
    " 3. DynamicType.get(id)                    -> GET    /users/:id",
  ],
  Array [
    " 4. DynamicType.modify(id, data)           -> PATCH  /users/:id",
  ],
  Array [
    " 5. DynamicType.replace(id, data)          -> PUT    /users/:id",
  ],
  Array [
    " 6. DynamicType.delete(id)                 -> DELETE /users/:id",
  ],
  Array [
    " 7. DynamicType.list                       -> GET    /users/:pid/animals",
  ],
  Array [
    " 8. DynamicType.save(pid, data)            -> POST   /users/:pid/animals",
  ],
  Array [
    " 9. DynamicType.get(pid, id)               -> GET    /users/:pid/animals/:id",
  ],
  Array [
    "10. DynamicType.modify(pid, id, data)      -> PATCH  /users/:pid/animals/:id",
  ],
  Array [
    "11. DynamicType.replace(pid, id, data)     -> PUT    /users/:pid/animals/:id",
  ],
  Array [
    "12. DynamicType.delete(pid, id)            -> DELETE /users/:pid/animals/:id",
  ],
  Array [
    "13. DynamicType.list(offset, limit, query) -> GET    /animals",
  ],
  Array [
    "14. DynamicType.save(data)                 -> POST   /animals",
  ],
  Array [
    "15. DynamicType.get(id)                    -> GET    /animals/:id",
  ],
  Array [
    "16. DynamicType.modify(id, data)           -> PATCH  /animals/:id",
  ],
  Array [
    "17. DynamicType.replace(id, data)          -> PUT    /animals/:id",
  ],
  Array [
    "18. DynamicType.delete(id)                 -> DELETE /animals/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should generate routes from inheritance 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DynamicType.list(offset, limit, query) -> GET    /users",
  ],
  Array [
    "2. DynamicType.save(data)                 -> POST   /users",
  ],
  Array [
    "3. DynamicType.get(id)                    -> GET    /users/:id",
  ],
  Array [
    "4. DynamicType.modify(id, data)           -> PATCH  /users/:id",
  ],
  Array [
    "5. DynamicType.replace(id, data)          -> PUT    /users/:id",
  ],
  Array [
    "6. DynamicType.delete(id)                 -> DELETE /users/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should generate routes from multiple entities 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DynamicType.list(offset, limit, query) -> GET    /users",
  ],
  Array [
    " 2. DynamicType.save(data)                 -> POST   /users",
  ],
  Array [
    " 3. DynamicType.get(id)                    -> GET    /users/:id",
  ],
  Array [
    " 4. DynamicType.modify(id, data)           -> PATCH  /users/:id",
  ],
  Array [
    " 5. DynamicType.replace(id, data)          -> PUT    /users/:id",
  ],
  Array [
    " 6. DynamicType.delete(id)                 -> DELETE /users/:id",
  ],
  Array [
    " 7. DynamicType.list(offset, limit, query) -> GET    /secondusers",
  ],
  Array [
    " 8. DynamicType.save(data)                 -> POST   /secondusers",
  ],
  Array [
    " 9. DynamicType.get(id)                    -> GET    /secondusers/:id",
  ],
  Array [
    "10. DynamicType.modify(id, data)           -> PATCH  /secondusers/:id",
  ],
  Array [
    "11. DynamicType.replace(id, data)          -> PUT    /secondusers/:id",
  ],
  Array [
    "12. DynamicType.delete(id)                 -> DELETE /secondusers/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should generate routes properly 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DynamicType.list(offset, limit, query) -> GET    /users",
  ],
  Array [
    "2. DynamicType.save(data)                 -> POST   /users",
  ],
  Array [
    "3. DynamicType.get(id)                    -> GET    /users/:id",
  ],
  Array [
    "4. DynamicType.modify(id, data)           -> PATCH  /users/:id",
  ],
  Array [
    "5. DynamicType.replace(id, data)          -> PUT    /users/:id",
  ],
  Array [
    "6. DynamicType.delete(id)                 -> DELETE /users/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should not generate many to many routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DynamicType.list(offset, limit, query) -> GET    /users",
  ],
  Array [
    " 2. DynamicType.save(data)                 -> POST   /users",
  ],
  Array [
    " 3. DynamicType.get(id)                    -> GET    /users/:id",
  ],
  Array [
    " 4. DynamicType.modify(id, data)           -> PATCH  /users/:id",
  ],
  Array [
    " 5. DynamicType.replace(id, data)          -> PUT    /users/:id",
  ],
  Array [
    " 6. DynamicType.delete(id)                 -> DELETE /users/:id",
  ],
  Array [
    " 7. DynamicType.list(offset, limit, query) -> GET    /animals",
  ],
  Array [
    " 8. DynamicType.save(data)                 -> POST   /animals",
  ],
  Array [
    " 9. DynamicType.get(id)                    -> GET    /animals/:id",
  ],
  Array [
    "10. DynamicType.modify(id, data)           -> PATCH  /animals/:id",
  ],
  Array [
    "11. DynamicType.replace(id, data)          -> PUT    /animals/:id",
  ],
  Array [
    "12. DynamicType.delete(id)                 -> DELETE /animals/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties 1`] = `
MyEntity {
  "id": 1,
  "num": 123,
}
`;

exports[`TypeOrm Facility Should able to reflect entity properties 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "num",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties with inheritance 1`] = `
ChildEntity {
  "id": 1,
  "num": 123,
}
`;

exports[`TypeOrm Facility Should able to reflect entity properties with inheritance 2`] = `
Array [
  Object {
    "name": "num",
    "type": Number,
  },
  Object {
    "name": "id",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties with type overridden 1`] = `
MyEntity {
  "id": 1,
  "num": 123,
}
`;

exports[`TypeOrm Facility Should able to reflect entity properties with type overridden 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "num",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect many to many relation 1`] = `
MyEntity {
  "children": Array [
    Child {
      "id": 1,
      "name": "Poo",
    },
  ],
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should able to reflect many to many relation 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "children",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect many to many relation 3`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "parents",
    "type": Array [
      MyEntity,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 1`] = `
MyEntity {
  "children": Array [
    Child {
      "id": 1,
      "name": "Poo",
    },
  ],
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "children",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 3`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "entity",
    "type": MyEntity,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to one relation 1`] = `
Parent {
  "entity": MyEntity {
    "id": 1,
    "name": "Poo",
  },
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should able to reflect one to one relation 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "parent",
    "type": Parent,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to one relation 3`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "entity",
    "type": MyEntity,
  },
]
`;

exports[`TypeOrm Facility Should throw error when no option specified 1`] = `
Array [
  Array [
    [Error: No connection options were found in any orm configuration files.],
  ],
]
`;
