// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeOrm CRUD Route Generator Should able to override route 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DynamicType.list(offset, limit) -> GET    /users",
  ],
  Array [
    "2. DynamicType.save(data)          -> POST   /users",
  ],
  Array [
    "3. UsersController.get(id)         -> GET    /users/:id",
  ],
  Array [
    "4. DynamicType.modify(id, data)    -> PUT    /users/:id",
  ],
  Array [
    "5. DynamicType.modify(id, data)    -> PATCH  /users/:id",
  ],
  Array [
    "6. DynamicType.delete(id)          -> DELETE /users/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should generate nested routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DynamicType.list(offset, limit)        -> GET    /users",
  ],
  Array [
    " 2. DynamicType.save(data)                 -> POST   /users",
  ],
  Array [
    " 3. DynamicType.get(id)                    -> GET    /users/:id",
  ],
  Array [
    " 4. DynamicType.modify(id, data)           -> PUT    /users/:id",
  ],
  Array [
    " 5. DynamicType.modify(id, data)           -> PATCH  /users/:id",
  ],
  Array [
    " 6. DynamicType.delete(id)                 -> DELETE /users/:id",
  ],
  Array [
    " 7. DynamicType.list                       -> GET    /users/:parentid/animals",
  ],
  Array [
    " 8. DynamicType.save(parentId, data)       -> POST   /users/:parentid/animals",
  ],
  Array [
    " 9. DynamicType.get(parentId, id)          -> GET    /users/:parentid/animals/:id",
  ],
  Array [
    "10. DynamicType.modify(parentId, id, data) -> PUT    /users/:parentid/animals/:id",
  ],
  Array [
    "11. DynamicType.modify(parentId, id, data) -> PATCH  /users/:parentid/animals/:id",
  ],
  Array [
    "12. DynamicType.delete(parentId, id)       -> DELETE /users/:parentid/animals/:id",
  ],
  Array [
    "13. DynamicType.list(offset, limit)        -> GET    /animals",
  ],
  Array [
    "14. DynamicType.save(data)                 -> POST   /animals",
  ],
  Array [
    "15. DynamicType.get(id)                    -> GET    /animals/:id",
  ],
  Array [
    "16. DynamicType.modify(id, data)           -> PUT    /animals/:id",
  ],
  Array [
    "17. DynamicType.modify(id, data)           -> PATCH  /animals/:id",
  ],
  Array [
    "18. DynamicType.delete(id)                 -> DELETE /animals/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should generate routes from inheritance 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DynamicType.list(offset, limit) -> GET    /users",
  ],
  Array [
    "2. DynamicType.save(data)          -> POST   /users",
  ],
  Array [
    "3. DynamicType.get(id)             -> GET    /users/:id",
  ],
  Array [
    "4. DynamicType.modify(id, data)    -> PUT    /users/:id",
  ],
  Array [
    "5. DynamicType.modify(id, data)    -> PATCH  /users/:id",
  ],
  Array [
    "6. DynamicType.delete(id)          -> DELETE /users/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should generate routes from multiple entities 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. DynamicType.list(offset, limit) -> GET    /users",
  ],
  Array [
    " 2. DynamicType.save(data)          -> POST   /users",
  ],
  Array [
    " 3. DynamicType.get(id)             -> GET    /users/:id",
  ],
  Array [
    " 4. DynamicType.modify(id, data)    -> PUT    /users/:id",
  ],
  Array [
    " 5. DynamicType.modify(id, data)    -> PATCH  /users/:id",
  ],
  Array [
    " 6. DynamicType.delete(id)          -> DELETE /users/:id",
  ],
  Array [
    " 7. DynamicType.list(offset, limit) -> GET    /secondusers",
  ],
  Array [
    " 8. DynamicType.save(data)          -> POST   /secondusers",
  ],
  Array [
    " 9. DynamicType.get(id)             -> GET    /secondusers/:id",
  ],
  Array [
    "10. DynamicType.modify(id, data)    -> PUT    /secondusers/:id",
  ],
  Array [
    "11. DynamicType.modify(id, data)    -> PATCH  /secondusers/:id",
  ],
  Array [
    "12. DynamicType.delete(id)          -> DELETE /secondusers/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should generate routes properly 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. DynamicType.list(offset, limit) -> GET    /users",
  ],
  Array [
    "2. DynamicType.save(data)          -> POST   /users",
  ],
  Array [
    "3. DynamicType.get(id)             -> GET    /users/:id",
  ],
  Array [
    "4. DynamicType.modify(id, data)    -> PUT    /users/:id",
  ],
  Array [
    "5. DynamicType.modify(id, data)    -> PATCH  /users/:id",
  ],
  Array [
    "6. DynamicType.delete(id)          -> DELETE /users/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties 1`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "num",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties with inheritance 1`] = `
Array [
  Object {
    "name": "num",
    "type": Number,
  },
  Object {
    "name": "id",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect many to many relation 1`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "parent",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 1`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "parent",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "entity",
    "type": MyEntity,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to one relation 1`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "parent",
    "type": Parent,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to one relation with inverse relation 1`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "parent",
    "type": Parent,
  },
]
`;

exports[`TypeOrm Facility Should throw error when no option specified 1`] = `
Array [
  Array [
    [Error: No connection options were found in any of configurations file.],
  ],
]
`;
