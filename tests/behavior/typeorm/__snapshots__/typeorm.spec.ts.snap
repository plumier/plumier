// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeOrm CRUD CRUD Function Should find by query GET /users?offset&limit 1`] = `
Array [
  Object {
    "email": "jane.doe@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
]
`;

exports[`TypeOrm CRUD CRUD Function Should set partial validation on GET /users?offset&limit 1`] = `
Array [
  Object {
    "email": "jane.dane@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
]
`;

exports[`TypeOrm CRUD Custom Generic Controller Should able to change generic controller by extending repo base generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MyControllerGeneric.list              -> GET    /users",
  ],
  Array [
    "2. MyControllerGeneric.save(data)        -> POST   /users",
  ],
  Array [
    "3. MyControllerGeneric.get(id)           -> GET    /users/:id",
  ],
  Array [
    "4. MyControllerGeneric.modify(id, data)  -> PATCH  /users/:id",
  ],
  Array [
    "5. MyControllerGeneric.replace(id, data) -> PUT    /users/:id",
  ],
  Array [
    "6. MyControllerGeneric.delete(id)        -> DELETE /users/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Custom Generic Controller Should able to change generic controller by extending repo base generic controller 2`] = `
Object {
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
}
`;

exports[`TypeOrm CRUD Custom Generic Controller Should able to change generic controller using custom controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MyControllerGeneric.get(id) -> GET /users/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Custom Generic Controller Should able to change generic controller using custom controller 2`] = `
Object {
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
}
`;

exports[`TypeOrm CRUD Custom Generic Controller Should able to ignore action by extending repo base generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MyControllerGeneric.save(data)        -> POST   /users",
  ],
  Array [
    "2. MyControllerGeneric.get(id)           -> GET    /users/:id",
  ],
  Array [
    "3. MyControllerGeneric.modify(id, data)  -> PATCH  /users/:id",
  ],
  Array [
    "4. MyControllerGeneric.replace(id, data) -> PUT    /users/:id",
  ],
  Array [
    "5. MyControllerGeneric.delete(id)        -> DELETE /users/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Custom Generic One To Many Controller Should able to change generic controller by extending repo base generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. TypeORMControllerGeneric.list       -> GET    /users",
  ],
  Array [
    " 2. TypeORMControllerGeneric.save(data) -> POST   /users",
  ],
  Array [
    " 3. TypeORMControllerGeneric.get(id)    -> GET    /users/:id",
  ],
  Array [
    " 4. TypeORMControllerGeneric.modify     -> PATCH  /users/:id",
  ],
  Array [
    " 5. TypeORMControllerGeneric.replace    -> PUT    /users/:id",
  ],
  Array [
    " 6. TypeORMControllerGeneric.delete(id) -> DELETE /users/:id",
  ],
  Array [
    " 7. MyControllerGeneric.list            -> GET    /users/:pid/animals",
  ],
  Array [
    " 8. MyControllerGeneric.save(pid, data) -> POST   /users/:pid/animals",
  ],
  Array [
    " 9. MyControllerGeneric.get(pid, id)    -> GET    /users/:pid/animals/:id",
  ],
  Array [
    "10. MyControllerGeneric.modify          -> PATCH  /users/:pid/animals/:id",
  ],
  Array [
    "11. MyControllerGeneric.replace         -> PUT    /users/:pid/animals/:id",
  ],
  Array [
    "12. MyControllerGeneric.delete(pid, id) -> DELETE /users/:pid/animals/:id",
  ],
  Array [
    "13. TypeORMControllerGeneric.list       -> GET    /animals",
  ],
  Array [
    "14. TypeORMControllerGeneric.save(data) -> POST   /animals",
  ],
  Array [
    "15. TypeORMControllerGeneric.get(id)    -> GET    /animals/:id",
  ],
  Array [
    "16. TypeORMControllerGeneric.modify     -> PATCH  /animals/:id",
  ],
  Array [
    "17. TypeORMControllerGeneric.replace    -> PUT    /animals/:id",
  ],
  Array [
    "18. TypeORMControllerGeneric.delete(id) -> DELETE /animals/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Custom Generic One To Many Controller Should able to change generic controller by extending repo base generic controller 2`] = `
Object {
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm CRUD Custom Generic One To Many Controller Should able to change generic controller using custom controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. TypeORMControllerGeneric.list       -> GET    /users",
  ],
  Array [
    " 2. TypeORMControllerGeneric.save(data) -> POST   /users",
  ],
  Array [
    " 3. TypeORMControllerGeneric.get(id)    -> GET    /users/:id",
  ],
  Array [
    " 4. TypeORMControllerGeneric.modify     -> PATCH  /users/:id",
  ],
  Array [
    " 5. TypeORMControllerGeneric.replace    -> PUT    /users/:id",
  ],
  Array [
    " 6. TypeORMControllerGeneric.delete(id) -> DELETE /users/:id",
  ],
  Array [
    " 7. MyControllerGeneric.get(pid, id)    -> GET    /users/:pid/animals/:id",
  ],
  Array [
    " 8. TypeORMControllerGeneric.list       -> GET    /animals",
  ],
  Array [
    " 9. TypeORMControllerGeneric.save(data) -> POST   /animals",
  ],
  Array [
    "10. TypeORMControllerGeneric.get(id)    -> GET    /animals/:id",
  ],
  Array [
    "11. TypeORMControllerGeneric.modify     -> PATCH  /animals/:id",
  ],
  Array [
    "12. TypeORMControllerGeneric.replace    -> PUT    /animals/:id",
  ],
  Array [
    "13. TypeORMControllerGeneric.delete(id) -> DELETE /animals/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Custom Generic One To Many Controller Should able to change generic controller using custom controller 2`] = `
Object {
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm CRUD Custom Generic One To Many Controller Should able to ignore action by extending repo base generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. TypeORMControllerGeneric.list       -> GET    /users",
  ],
  Array [
    " 2. TypeORMControllerGeneric.save(data) -> POST   /users",
  ],
  Array [
    " 3. TypeORMControllerGeneric.get(id)    -> GET    /users/:id",
  ],
  Array [
    " 4. TypeORMControllerGeneric.modify     -> PATCH  /users/:id",
  ],
  Array [
    " 5. TypeORMControllerGeneric.replace    -> PUT    /users/:id",
  ],
  Array [
    " 6. TypeORMControllerGeneric.delete(id) -> DELETE /users/:id",
  ],
  Array [
    " 7. MyControllerGeneric.save(pid, data) -> POST   /users/:pid/animals",
  ],
  Array [
    " 8. MyControllerGeneric.get(pid, id)    -> GET    /users/:pid/animals/:id",
  ],
  Array [
    " 9. MyControllerGeneric.modify          -> PATCH  /users/:pid/animals/:id",
  ],
  Array [
    "10. MyControllerGeneric.replace         -> PUT    /users/:pid/animals/:id",
  ],
  Array [
    "11. MyControllerGeneric.delete(pid, id) -> DELETE /users/:pid/animals/:id",
  ],
  Array [
    "12. TypeORMControllerGeneric.list       -> GET    /animals",
  ],
  Array [
    "13. TypeORMControllerGeneric.save(data) -> POST   /animals",
  ],
  Array [
    "14. TypeORMControllerGeneric.get(id)    -> GET    /animals/:id",
  ],
  Array [
    "15. TypeORMControllerGeneric.modify     -> PATCH  /animals/:id",
  ],
  Array [
    "16. TypeORMControllerGeneric.replace    -> PUT    /animals/:id",
  ],
  Array [
    "17. TypeORMControllerGeneric.delete(id) -> DELETE /animals/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should find by query GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Jojo",
  },
]
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should serve GET /users/:parentId/animals/:id 1`] = `
Object {
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should serve PATCH /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should serve POST /users/:parentId/animals 1`] = `
User {
  "animals": Array [
    Animal {
      "id": 1,
      "name": "Mimi",
    },
    Animal {
      "id": 2,
      "name": "Mimi",
    },
  ],
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
}
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should serve PUT /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should set partial validation GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Jeje",
  },
]
`;

exports[`TypeOrm CRUD Nested CRUD One to Many Function Should set partial validation on PATCH /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`TypeOrm CRUD Route Generator Should able to override route 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMControllerGeneric.list       -> GET    /users",
  ],
  Array [
    "2. TypeORMControllerGeneric.save(data) -> POST   /users",
  ],
  Array [
    "3. UsersController.get(id)             -> GET    /users/:id",
  ],
  Array [
    "4. TypeORMControllerGeneric.modify     -> PATCH  /users/:id",
  ],
  Array [
    "5. TypeORMControllerGeneric.replace    -> PUT    /users/:id",
  ],
  Array [
    "6. TypeORMControllerGeneric.delete(id) -> DELETE /users/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should generate one to many routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. TypeORMControllerGeneric.list       -> GET    /users",
  ],
  Array [
    " 2. TypeORMControllerGeneric.save(data) -> POST   /users",
  ],
  Array [
    " 3. TypeORMControllerGeneric.get(id)    -> GET    /users/:id",
  ],
  Array [
    " 4. TypeORMControllerGeneric.modify     -> PATCH  /users/:id",
  ],
  Array [
    " 5. TypeORMControllerGeneric.replace    -> PUT    /users/:id",
  ],
  Array [
    " 6. TypeORMControllerGeneric.delete(id) -> DELETE /users/:id",
  ],
  Array [
    " 7. TypeORMOneToMany...eneric.list      -> GET    /users/:pid/animals",
  ],
  Array [
    " 8. TypeORMOneToMany...eneric.save      -> POST   /users/:pid/animals",
  ],
  Array [
    " 9. TypeORMOneToMany...eneric.get       -> GET    /users/:pid/animals/:id",
  ],
  Array [
    "10. TypeORMOneToMany...eneric.modify    -> PATCH  /users/:pid/animals/:id",
  ],
  Array [
    "11. TypeORMOneToMany...eneric.replace   -> PUT    /users/:pid/animals/:id",
  ],
  Array [
    "12. TypeORMOneToMany...eneric.delete    -> DELETE /users/:pid/animals/:id",
  ],
  Array [
    "13. TypeORMControllerGeneric.list       -> GET    /animals",
  ],
  Array [
    "14. TypeORMControllerGeneric.save(data) -> POST   /animals",
  ],
  Array [
    "15. TypeORMControllerGeneric.get(id)    -> GET    /animals/:id",
  ],
  Array [
    "16. TypeORMControllerGeneric.modify     -> PATCH  /animals/:id",
  ],
  Array [
    "17. TypeORMControllerGeneric.replace    -> PUT    /animals/:id",
  ],
  Array [
    "18. TypeORMControllerGeneric.delete(id) -> DELETE /animals/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should generate routes from inheritance 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMControllerGeneric.list       -> GET    /users",
  ],
  Array [
    "2. TypeORMControllerGeneric.save(data) -> POST   /users",
  ],
  Array [
    "3. TypeORMControllerGeneric.get(id)    -> GET    /users/:id",
  ],
  Array [
    "4. TypeORMControllerGeneric.modify     -> PATCH  /users/:id",
  ],
  Array [
    "5. TypeORMControllerGeneric.replace    -> PUT    /users/:id",
  ],
  Array [
    "6. TypeORMControllerGeneric.delete(id) -> DELETE /users/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should generate routes from multiple entities 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. TypeORMControllerGeneric.list       -> GET    /users",
  ],
  Array [
    " 2. TypeORMControllerGeneric.save(data) -> POST   /users",
  ],
  Array [
    " 3. TypeORMControllerGeneric.get(id)    -> GET    /users/:id",
  ],
  Array [
    " 4. TypeORMControllerGeneric.modify     -> PATCH  /users/:id",
  ],
  Array [
    " 5. TypeORMControllerGeneric.replace    -> PUT    /users/:id",
  ],
  Array [
    " 6. TypeORMControllerGeneric.delete(id) -> DELETE /users/:id",
  ],
  Array [
    " 7. TypeORMControllerGeneric.list       -> GET    /secondusers",
  ],
  Array [
    " 8. TypeORMControllerGeneric.save(data) -> POST   /secondusers",
  ],
  Array [
    " 9. TypeORMControllerGeneric.get(id)    -> GET    /secondusers/:id",
  ],
  Array [
    "10. TypeORMControllerGeneric.modify     -> PATCH  /secondusers/:id",
  ],
  Array [
    "11. TypeORMControllerGeneric.replace    -> PUT    /secondusers/:id",
  ],
  Array [
    "12. TypeORMControllerGeneric.delete(id) -> DELETE /secondusers/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should generate routes properly 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMControllerGeneric.list       -> GET    /users",
  ],
  Array [
    "2. TypeORMControllerGeneric.save(data) -> POST   /users",
  ],
  Array [
    "3. TypeORMControllerGeneric.get(id)    -> GET    /users/:id",
  ],
  Array [
    "4. TypeORMControllerGeneric.modify     -> PATCH  /users/:id",
  ],
  Array [
    "5. TypeORMControllerGeneric.replace    -> PUT    /users/:id",
  ],
  Array [
    "6. TypeORMControllerGeneric.delete(id) -> DELETE /users/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm CRUD Route Generator Should not generate many to many routes 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. TypeORMControllerGeneric.list       -> GET    /users",
  ],
  Array [
    " 2. TypeORMControllerGeneric.save(data) -> POST   /users",
  ],
  Array [
    " 3. TypeORMControllerGeneric.get(id)    -> GET    /users/:id",
  ],
  Array [
    " 4. TypeORMControllerGeneric.modify     -> PATCH  /users/:id",
  ],
  Array [
    " 5. TypeORMControllerGeneric.replace    -> PUT    /users/:id",
  ],
  Array [
    " 6. TypeORMControllerGeneric.delete(id) -> DELETE /users/:id",
  ],
  Array [
    " 7. TypeORMControllerGeneric.list       -> GET    /animals",
  ],
  Array [
    " 8. TypeORMControllerGeneric.save(data) -> POST   /animals",
  ],
  Array [
    " 9. TypeORMControllerGeneric.get(id)    -> GET    /animals/:id",
  ],
  Array [
    "10. TypeORMControllerGeneric.modify     -> PATCH  /animals/:id",
  ],
  Array [
    "11. TypeORMControllerGeneric.replace    -> PUT    /animals/:id",
  ],
  Array [
    "12. TypeORMControllerGeneric.delete(id) -> DELETE /animals/:id",
  ],
  Array [],
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties 1`] = `
MyEntity {
  "id": 1,
  "num": 123,
}
`;

exports[`TypeOrm Facility Should able to reflect entity properties 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "num",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties with inheritance 1`] = `
ChildEntity {
  "id": 1,
  "num": 123,
}
`;

exports[`TypeOrm Facility Should able to reflect entity properties with inheritance 2`] = `
Array [
  Object {
    "name": "num",
    "type": Number,
  },
  Object {
    "name": "id",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect entity properties with type overridden 1`] = `
MyEntity {
  "id": 1,
  "num": 123,
}
`;

exports[`TypeOrm Facility Should able to reflect entity properties with type overridden 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "num",
    "type": Number,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect many to many relation 1`] = `
MyEntity {
  "children": Array [
    Child {
      "id": 1,
      "name": "Poo",
    },
  ],
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should able to reflect many to many relation 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "children",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect many to many relation 3`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "parents",
    "type": Array [
      MyEntity,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 1`] = `
MyEntity {
  "children": Array [
    Child {
      "id": 1,
      "name": "Poo",
    },
  ],
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "children",
    "type": Array [
      Child,
    ],
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to many relation 3`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "entity",
    "type": MyEntity,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to one relation 1`] = `
Parent {
  "entity": MyEntity {
    "id": 1,
    "name": "Poo",
  },
  "id": 1,
  "name": "Mimi",
}
`;

exports[`TypeOrm Facility Should able to reflect one to one relation 2`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "parent",
    "type": Parent,
  },
]
`;

exports[`TypeOrm Facility Should able to reflect one to one relation 3`] = `
Array [
  Object {
    "name": "id",
    "type": Number,
  },
  Object {
    "name": "name",
    "type": String,
  },
  Object {
    "name": "entity",
    "type": MyEntity,
  },
]
`;

exports[`TypeOrm Facility Should throw error when no option specified 1`] = `
Array [
  Array [
    [Error: No connection options were found in any orm configuration files.],
  ],
]
`;

exports[`TypeOrm Open API Should mark guid column as readonly 1`] = `
Object {
  "properties": Object {
    "id": Object {
      "readOnly": true,
      "type": "number",
    },
    "password": Object {
      "type": "string",
    },
    "userName": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`TypeOrm Open API Should mark id column as readonly 1`] = `
Object {
  "properties": Object {
    "id": Object {
      "readOnly": true,
      "type": "number",
    },
    "password": Object {
      "type": "string",
    },
    "userName": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`TypeOrm Open API Should mark one to many and many to one as readonly 1`] = `
Object {
  "properties": Object {
    "children": Object {
      "items": Object {
        "$ref": "#/components/schemas/Child",
        "type": "object",
      },
      "readOnly": true,
      "type": "array",
    },
    "id": Object {
      "readOnly": true,
      "type": "number",
    },
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`TypeOrm Open API Should mark one to many and many to one as readonly 2`] = `
Object {
  "properties": Object {
    "entity": Object {
      "$ref": "#/components/schemas/MyEntity",
      "readOnly": true,
      "type": "object",
    },
    "id": Object {
      "readOnly": true,
      "type": "number",
    },
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;
