// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CRUD CRUD Function Should find by query GET /users?offset&limit 1`] = `
Array [
  Object {
    "email": "jane.doe@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
]
`;

exports[`CRUD CRUD Function Should set partial validation on GET /users?offset&limit 1`] = `
Array [
  Object {
    "email": "jane.dane@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should find by query GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Jojo",
    "user": Object {
      "email": "john.doe@gmail.com",
      "id": 1,
      "name": "John Doe",
    },
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should serve GET /users/:parentId/animals/:id 1`] = `
Object {
  "id": 1,
  "name": "Mimi",
  "user": Object {
    "email": "john.doe@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve PATCH /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve POST /users/:parentId/animals 1`] = `
User {
  "animals": Array [
    Animal {
      "id": 1,
      "name": "Mimi",
    },
    Animal {
      "id": 2,
      "name": "Mimi",
    },
  ],
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve PUT /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should set partial validation GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Jeje",
    "user": Object {
      "email": "john.doe@gmail.com",
      "id": 1,
      "name": "John Doe",
    },
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should set partial validation on PATCH /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`CRUD One To One Function Should able to add with ID 1`] = `
User {
  "animal": Animal {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should able to modify relation by ID 1`] = `
User {
  "animal": Animal {
    "id": 2,
    "name": "Bingo",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populated one to many 1`] = `
User {
  "animals": Array [
    Animal {
      "id": 1,
      "name": "Mimi",
    },
    Animal {
      "id": 2,
      "name": "Bingo",
    },
  ],
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populated one to many 2`] = `
Object {
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should populated multiple result 1`] = `
Array [
  Object {
    "animal": Object {
      "id": 1,
      "name": "Mimi",
    },
    "id": 1,
    "name": "John",
  },
  Object {
    "animal": Object {
      "id": 1,
      "name": "Mimi",
    },
    "id": 2,
    "name": "Jane",
  },
]
`;

exports[`CRUD One To One Function Should populated on get by id 1`] = `
Object {
  "animal": Object {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should populated on multiple property 1`] = `
Object {
  "animal": Object {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
  "secondAnimal": Object {
    "id": 2,
    "name": "Bingo",
  },
}
`;

exports[`CRUD One To One on Nested Object Should able to add with ID 1`] = `
User {
  "animal": Animal {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should able to modify relation by ID 1`] = `
User {
  "animal": Animal {
    "id": 2,
    "name": "Bingo",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should not populated one to many 1`] = `
User {
  "animals": Array [
    Animal {
      "id": 1,
      "name": "Mimi",
    },
    Animal {
      "id": 2,
      "name": "Bingo",
    },
  ],
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should not populated one to many 2`] = `
Object {
  "id": 1,
  "name": "John",
  "parent": Object {
    "id": 1,
    "name": "John",
  },
}
`;

exports[`CRUD One To One on Nested Object Should populated multiple result 1`] = `
Array [
  Object {
    "animal": Object {
      "id": 1,
      "name": "Mimi",
    },
    "id": 1,
    "name": "John",
    "parent": Object {
      "id": 1,
      "name": "John",
    },
  },
  Object {
    "animal": Object {
      "id": 2,
      "name": "Bingo",
    },
    "id": 2,
    "name": "Jane",
    "parent": Object {
      "id": 1,
      "name": "John",
    },
  },
]
`;

exports[`CRUD One To One on Nested Object Should populated on get by id 1`] = `
Object {
  "animal": Object {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
  "parent": Object {
    "id": 1,
    "name": "John",
  },
}
`;

exports[`CRUD One To One on Nested Object Should populated on multiple property 1`] = `
Object {
  "animal": Object {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
  "parent": Object {
    "id": 1,
    "name": "John",
  },
  "secondAnimal": Object {
    "id": 2,
    "name": "Bingo",
  },
}
`;

exports[`Facility Should able load external model using default configuration 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. UsersController.get()               -> GET    /users/get",
  ],
  Array [
    "2. TypeORMControllerGeneric.list       -> GET    /absolutes",
  ],
  Array [
    "3. TypeORMControllerGeneric.save(data) -> POST   /absolutes",
  ],
  Array [
    "4. TypeORMControllerGeneric.get(id)    -> GET    /absolutes/:id",
  ],
  Array [
    "5. TypeORMControllerGeneric.modify     -> PATCH  /absolutes/:id",
  ],
  Array [
    "6. TypeORMControllerGeneric.replace    -> PUT    /absolutes/:id",
  ],
  Array [
    "7. TypeORMControllerGeneric.delete(id) -> DELETE /absolutes/:id",
  ],
  Array [],
]
`;

exports[`Facility Should able specify rootPath 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMControllerGeneric.list       -> GET    /api/v1/animals",
  ],
  Array [
    "2. TypeORMControllerGeneric.save(data) -> POST   /api/v1/animals",
  ],
  Array [
    "3. TypeORMControllerGeneric.get(id)    -> GET    /api/v1/animals/:id",
  ],
  Array [
    "4. TypeORMControllerGeneric.modify     -> PATCH  /api/v1/animals/:id",
  ],
  Array [
    "5. TypeORMControllerGeneric.replace    -> PUT    /api/v1/animals/:id",
  ],
  Array [
    "6. TypeORMControllerGeneric.delete(id) -> DELETE /api/v1/animals/:id",
  ],
  Array [],
]
`;

exports[`Facility Should able to create API version using default entities 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMControllerGeneric.list       -> GET    /api/v1/animals",
  ],
  Array [
    "2. TypeORMControllerGeneric.save(data) -> POST   /api/v1/animals",
  ],
  Array [
    "3. TypeORMControllerGeneric.get(id)    -> GET    /api/v1/animals/:id",
  ],
  Array [
    "4. TypeORMControllerGeneric.modify     -> PATCH  /api/v1/animals/:id",
  ],
  Array [
    "5. TypeORMControllerGeneric.replace    -> PUT    /api/v1/animals/:id",
  ],
  Array [
    "6. TypeORMControllerGeneric.delete(id) -> DELETE /api/v1/animals/:id",
  ],
  Array [],
]
`;

exports[`Facility Should able to create API versioning with external models 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. TypeORMControllerGeneric.list       -> GET    /api/v1/animals",
  ],
  Array [
    " 2. TypeORMControllerGeneric.save(data) -> POST   /api/v1/animals",
  ],
  Array [
    " 3. TypeORMControllerGeneric.get(id)    -> GET    /api/v1/animals/:id",
  ],
  Array [
    " 4. TypeORMControllerGeneric.modify     -> PATCH  /api/v1/animals/:id",
  ],
  Array [
    " 5. TypeORMControllerGeneric.replace    -> PUT    /api/v1/animals/:id",
  ],
  Array [
    " 6. TypeORMControllerGeneric.delete(id) -> DELETE /api/v1/animals/:id",
  ],
  Array [
    " 7. TypeORMOneToMany...eneric.list      -> GET    /api/v1/animals/:pid/tags",
  ],
  Array [
    " 8. TypeORMOneToMany...eneric.save      -> POST   /api/v1/animals/:pid/tags",
  ],
  Array [
    " 9. TypeORMOneToMany...eneric.get       -> GET    /api/v1/animals/:pid/tags/:id",
  ],
  Array [
    "10. TypeORMOneToMany...eneric.modify    -> PATCH  /api/v1/animals/:pid/tags/:id",
  ],
  Array [
    "11. TypeORMOneToMany...eneric.replace   -> PUT    /api/v1/animals/:pid/tags/:id",
  ],
  Array [
    "12. TypeORMOneToMany...eneric.delete    -> DELETE /api/v1/animals/:pid/tags/:id",
  ],
  Array [
    "13. TypeORMControllerGeneric.list       -> GET    /api/v1/tags",
  ],
  Array [
    "14. TypeORMControllerGeneric.save(data) -> POST   /api/v1/tags",
  ],
  Array [
    "15. TypeORMControllerGeneric.get(id)    -> GET    /api/v1/tags/:id",
  ],
  Array [
    "16. TypeORMControllerGeneric.modify     -> PATCH  /api/v1/tags/:id",
  ],
  Array [
    "17. TypeORMControllerGeneric.replace    -> PUT    /api/v1/tags/:id",
  ],
  Array [
    "18. TypeORMControllerGeneric.delete(id) -> DELETE /api/v1/tags/:id",
  ],
  Array [
    "19. TypeORMControllerGeneric.list       -> GET    /api/v2/animals",
  ],
  Array [
    "20. TypeORMControllerGeneric.save(data) -> POST   /api/v2/animals",
  ],
  Array [
    "21. TypeORMControllerGeneric.get(id)    -> GET    /api/v2/animals/:id",
  ],
  Array [
    "22. TypeORMControllerGeneric.modify     -> PATCH  /api/v2/animals/:id",
  ],
  Array [
    "23. TypeORMControllerGeneric.replace    -> PUT    /api/v2/animals/:id",
  ],
  Array [
    "24. TypeORMControllerGeneric.delete(id) -> DELETE /api/v2/animals/:id",
  ],
  Array [
    "25. TypeORMOneToMany...eneric.list      -> GET    /api/v2/animals/:pid/tags",
  ],
  Array [
    "26. TypeORMOneToMany...eneric.save      -> POST   /api/v2/animals/:pid/tags",
  ],
  Array [
    "27. TypeORMOneToMany...eneric.get       -> GET    /api/v2/animals/:pid/tags/:id",
  ],
  Array [
    "28. TypeORMOneToMany...eneric.modify    -> PATCH  /api/v2/animals/:pid/tags/:id",
  ],
  Array [
    "29. TypeORMOneToMany...eneric.replace   -> PUT    /api/v2/animals/:pid/tags/:id",
  ],
  Array [
    "30. TypeORMOneToMany...eneric.delete    -> DELETE /api/v2/animals/:pid/tags/:id",
  ],
  Array [
    "31. TypeORMControllerGeneric.list       -> GET    /api/v2/tags",
  ],
  Array [
    "32. TypeORMControllerGeneric.save(data) -> POST   /api/v2/tags",
  ],
  Array [
    "33. TypeORMControllerGeneric.get(id)    -> GET    /api/v2/tags/:id",
  ],
  Array [
    "34. TypeORMControllerGeneric.modify     -> PATCH  /api/v2/tags/:id",
  ],
  Array [
    "35. TypeORMControllerGeneric.replace    -> PUT    /api/v2/tags/:id",
  ],
  Array [
    "36. TypeORMControllerGeneric.delete(id) -> DELETE /api/v2/tags/:id",
  ],
  Array [],
]
`;

exports[`Facility Should able to create API versioning with multiple facility 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. TypeORMControllerGeneric.list       -> GET    /api/v1/animals",
  ],
  Array [
    " 2. TypeORMControllerGeneric.save(data) -> POST   /api/v1/animals",
  ],
  Array [
    " 3. TypeORMControllerGeneric.get(id)    -> GET    /api/v1/animals/:id",
  ],
  Array [
    " 4. TypeORMControllerGeneric.modify     -> PATCH  /api/v1/animals/:id",
  ],
  Array [
    " 5. TypeORMControllerGeneric.replace    -> PUT    /api/v1/animals/:id",
  ],
  Array [
    " 6. TypeORMControllerGeneric.delete(id) -> DELETE /api/v1/animals/:id",
  ],
  Array [
    " 7. TypeORMControllerGeneric.list       -> GET    /api/v2/animals",
  ],
  Array [
    " 8. TypeORMControllerGeneric.save(data) -> POST   /api/v2/animals",
  ],
  Array [
    " 9. TypeORMControllerGeneric.get(id)    -> GET    /api/v2/animals/:id",
  ],
  Array [
    "10. TypeORMControllerGeneric.modify     -> PATCH  /api/v2/animals/:id",
  ],
  Array [
    "11. TypeORMControllerGeneric.replace    -> PUT    /api/v2/animals/:id",
  ],
  Array [
    "12. TypeORMControllerGeneric.delete(id) -> DELETE /api/v2/animals/:id",
  ],
  Array [],
]
`;

exports[`Facility Should able to load external model 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMControllerGeneric.list       -> GET    /absolutes",
  ],
  Array [
    "2. TypeORMControllerGeneric.save(data) -> POST   /absolutes",
  ],
  Array [
    "3. TypeORMControllerGeneric.get(id)    -> GET    /absolutes/:id",
  ],
  Array [
    "4. TypeORMControllerGeneric.modify     -> PATCH  /absolutes/:id",
  ],
  Array [
    "5. TypeORMControllerGeneric.replace    -> PUT    /absolutes/:id",
  ],
  Array [
    "6. TypeORMControllerGeneric.delete(id) -> DELETE /absolutes/:id",
  ],
  Array [],
]
`;

exports[`Facility Should able to load external model using relative path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMControllerGeneric.list       -> GET    /relatives",
  ],
  Array [
    "2. TypeORMControllerGeneric.save(data) -> POST   /relatives",
  ],
  Array [
    "3. TypeORMControllerGeneric.get(id)    -> GET    /relatives/:id",
  ],
  Array [
    "4. TypeORMControllerGeneric.modify     -> PATCH  /relatives/:id",
  ],
  Array [
    "5. TypeORMControllerGeneric.replace    -> PUT    /relatives/:id",
  ],
  Array [
    "6. TypeORMControllerGeneric.delete(id) -> DELETE /relatives/:id",
  ],
  Array [],
]
`;

exports[`Facility Should load default models if no option specified 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMControllerGeneric.list       -> GET    /animals",
  ],
  Array [
    "2. TypeORMControllerGeneric.save(data) -> POST   /animals",
  ],
  Array [
    "3. TypeORMControllerGeneric.get(id)    -> GET    /animals/:id",
  ],
  Array [
    "4. TypeORMControllerGeneric.modify     -> PATCH  /animals/:id",
  ],
  Array [
    "5. TypeORMControllerGeneric.replace    -> PUT    /animals/:id",
  ],
  Array [
    "6. TypeORMControllerGeneric.delete(id) -> DELETE /animals/:id",
  ],
  Array [],
]
`;

exports[`Facility Should not generate model if not registered as TypeORM model 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "No controller found",
  ],
]
`;

exports[`Open API Should mark guid column as readonly 1`] = `
Object {
  "properties": Object {
    "id": Object {
      "readOnly": true,
      "type": "string",
    },
    "password": Object {
      "type": "string",
    },
    "userName": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should mark id column as readonly 1`] = `
Object {
  "properties": Object {
    "id": Object {
      "readOnly": true,
      "type": "number",
    },
    "password": Object {
      "type": "string",
    },
    "userName": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should mark one to many and many to one as readonly 1`] = `
Object {
  "properties": Object {
    "children": Object {
      "items": Object {
        "$ref": "#/components/schemas/Child",
      },
      "readOnly": true,
      "type": "array",
      "writeOnly": true,
    },
    "id": Object {
      "readOnly": true,
      "type": "number",
    },
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should mark one to many and many to one as readonly 2`] = `
Object {
  "properties": Object {
    "entity": Object {
      "allOf": Array [
        Object {
          "$ref": "#/components/schemas/MyEntity",
        },
        Object {
          "readOnly": true,
          "type": "object",
          "writeOnly": true,
        },
      ],
    },
    "id": Object {
      "readOnly": true,
      "type": "number",
    },
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;
