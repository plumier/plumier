// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CRUD CRUD Function Should able to clear property if provided undefined on PUT /users/:id 1`] = `
User {
  "email": "john@gmail.com",
  "id": 1,
  "name": null,
}
`;

exports[`CRUD CRUD Function Should able to configure create generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMControllerGeneric.list -> GET /users",
  ],
  Array [
    "2. TypeORMControllerGeneric.get  -> GET /users/:id",
  ],
  Array [],
]
`;

exports[`CRUD CRUD Function Should able to extends the created generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. UserController.list                 -> GET /users",
  ],
  Array [
    "2. UserController.get(id, select, ctx) -> GET /users/:id",
  ],
  Array [],
]
`;

exports[`CRUD CRUD Function Should able to order by properties GET /users?offset&limit 1`] = `
Array [
  Object {
    "age": 21,
    "id": 3,
    "name": "Borne",
  },
  Object {
    "age": 21,
    "id": 2,
    "name": "Anne",
  },
  Object {
    "age": 22,
    "id": 5,
    "name": "Juliet",
  },
  Object {
    "age": 22,
    "id": 4,
    "name": "John",
  },
  Object {
    "age": 23,
    "id": 1,
    "name": "August",
  },
]
`;

exports[`CRUD CRUD Function Should able to save relation with ID 1`] = `
Todo {
  "id": 1,
  "message": "Lorem ipsum",
  "user": User {
    "email": "john.doe@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
}
`;

exports[`CRUD CRUD Function Should able to select by properties GET /users/:id 1`] = `
Object {
  "age": 21,
  "id": 1,
  "name": "John Doe",
}
`;

exports[`CRUD CRUD Function Should able to select by properties GET /users?offset&limit 1`] = `
Array [
  Object {
    "email": "jane.doe@gmail.com",
    "id": 1,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 2,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 3,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 4,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 5,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 6,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 7,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 8,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 9,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 10,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 11,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 12,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 13,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 14,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 15,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 16,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 17,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 18,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 19,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 20,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 21,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 22,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 23,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 24,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 25,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 26,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 27,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 28,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 29,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 30,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 31,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 32,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 33,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 34,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 35,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 36,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 37,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 38,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 39,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 40,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 41,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 42,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 43,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 44,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 45,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 46,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 47,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 48,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 49,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 50,
  },
]
`;

exports[`CRUD CRUD Function Should able to use custom get many query 1`] = `
Array [
  Object {
    "email": "john.doe@gmail.com",
  },
  Object {
    "email": "john.doe@gmail.com",
  },
  Object {
    "email": "john.doe@gmail.com",
  },
  Object {
    "email": "john.doe@gmail.com",
  },
  Object {
    "email": "john.doe@gmail.com",
  },
]
`;

exports[`CRUD CRUD Function Should able to use custom get one query 1`] = `
Object {
  "email": "john.doe@gmail.com",
}
`;

exports[`CRUD CRUD Function Should able to use request hook 1`] = `
User {
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
  "password": "HASH",
}
`;

exports[`CRUD CRUD Function Should able to use request hook 2`] = `
Array [
  Array [
    1,
  ],
]
`;

exports[`CRUD CRUD Function Should filter by exact value GET /users?filter 1`] = `
Array [
  Object {
    "email": "jane.doe@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
]
`;

exports[`CRUD CRUD Function Should filter by partial value GET /users?filter 1`] = `
Array [
  Object {
    "email": "jane.doe@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
  Object {
    "email": "jane.moe@gmail.com",
    "id": 2,
    "name": "John Doe",
  },
]
`;

exports[`CRUD CRUD Function Should not error when select without ID with entity policy GET /users?offset&limit 1`] = `
Array [
  Object {
    "email": "jane.doe@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 2,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 3,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 4,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 5,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 6,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 7,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 8,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 9,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 10,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 11,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 12,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 13,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 14,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 15,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 16,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 17,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 18,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 19,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 20,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 21,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 22,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 23,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 24,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 25,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 26,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 27,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 28,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 29,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 30,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 31,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 32,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 33,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 34,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 35,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 36,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 37,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 38,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 39,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 40,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 41,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 42,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 43,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 44,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 45,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 46,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 47,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 48,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 49,
    "name": "John Doe",
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 50,
    "name": "John Doe",
  },
]
`;

exports[`CRUD CRUD Function Should serve delete with deleteColumn DELETE /users/:id 1`] = `
User {
  "deleted": true,
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
}
`;

exports[`CRUD CRUD Function Should set partial validation on GET /users?offset&limit 1`] = `
Array [
  Object {
    "email": "jane.dane@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
]
`;

exports[`CRUD CRUD Function Should throw error on wrong property name on select GET /users/:id 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Invalid property otherProp",
      ],
      "path": Array [
        "select",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`CRUD Many To Many Should able to post from children Ids from parent 1`] = `
Object {
  "animals": Array [
    Object {
      "id": 1,
      "name": "Bingo",
    },
    Object {
      "id": 2,
      "name": "Mimi",
    },
  ],
  "id": 1,
  "name": "John Doe",
}
`;

exports[`CRUD Many To Many Should serve many to many properly 1`] = `
User {
  "animals": Array [
    Animal {
      "id": 1,
      "name": "Mimi",
    },
  ],
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD Many To One Should able to use generic controller factory 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMNestedCon...eneric.list    -> GET    /users/:pid/animals",
  ],
  Array [
    "2. TypeORMNestedCon...eneric.save    -> POST   /users/:pid/animals",
  ],
  Array [
    "3. TypeORMNestedCon...eneric.get     -> GET    /users/:pid/animals/:id",
  ],
  Array [
    "4. TypeORMNestedCon...eneric.modify  -> PATCH  /users/:pid/animals/:id",
  ],
  Array [
    "5. TypeORMNestedCon...eneric.replace -> PUT    /users/:pid/animals/:id",
  ],
  Array [
    "6. TypeORMNestedCon...eneric.delete  -> DELETE /users/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to configure create generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMNestedCon...eneric.list -> GET /users/:pid/animals",
  ],
  Array [
    "2. TypeORMNestedCon...eneric.get  -> GET /users/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to extends created generic controller 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. UserAnimalController.list    -> GET    /users/:pid/animals",
  ],
  Array [
    "2. UserAnimalController.save    -> POST   /users/:pid/animals",
  ],
  Array [
    "3. UserAnimalController.get     -> GET    /users/:pid/animals/:id",
  ],
  Array [
    "4. UserAnimalController.modify  -> PATCH  /users/:pid/animals/:id",
  ],
  Array [
    "5. UserAnimalController.replace -> PUT    /users/:pid/animals/:id",
  ],
  Array [
    "6. UserAnimalController.delete  -> DELETE /users/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to order by property GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "age": 22,
    "id": 4,
    "name": "Juliet",
  },
  Object {
    "age": 22,
    "id": 1,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 2,
    "name": "Abas",
  },
  Object {
    "age": 21,
    "id": 3,
    "name": "Alba",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to post from children Ids from parent 1`] = `
Object {
  "animals": Array [
    Object {
      "id": 1,
      "name": "Bingo",
    },
    Object {
      "id": 2,
      "name": "Mimi",
    },
  ],
  "id": 1,
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should able to retrieve array relation from parent 1`] = `
Object {
  "animals": Array [
    Object {
      "id": 1,
      "name": "Mimi",
    },
    Object {
      "id": 2,
      "name": "Mimi",
    },
    Object {
      "id": 3,
      "name": "Mimi",
    },
    Object {
      "id": 4,
      "name": "Mimi",
    },
    Object {
      "id": 5,
      "name": "Mimi",
    },
    Object {
      "id": 6,
      "name": "Mimi",
    },
    Object {
      "id": 7,
      "name": "Mimi",
    },
    Object {
      "id": 8,
      "name": "Mimi",
    },
    Object {
      "id": 9,
      "name": "Mimi",
    },
    Object {
      "id": 10,
      "name": "Mimi",
    },
    Object {
      "id": 11,
      "name": "Mimi",
    },
    Object {
      "id": 12,
      "name": "Mimi",
    },
    Object {
      "id": 13,
      "name": "Mimi",
    },
    Object {
      "id": 14,
      "name": "Mimi",
    },
    Object {
      "id": 15,
      "name": "Mimi",
    },
    Object {
      "id": 16,
      "name": "Mimi",
    },
    Object {
      "id": 17,
      "name": "Mimi",
    },
    Object {
      "id": 18,
      "name": "Mimi",
    },
    Object {
      "id": 19,
      "name": "Mimi",
    },
    Object {
      "id": 20,
      "name": "Mimi",
    },
    Object {
      "id": 21,
      "name": "Mimi",
    },
    Object {
      "id": 22,
      "name": "Mimi",
    },
    Object {
      "id": 23,
      "name": "Mimi",
    },
    Object {
      "id": 24,
      "name": "Mimi",
    },
    Object {
      "id": 25,
      "name": "Mimi",
    },
    Object {
      "id": 26,
      "name": "Mimi",
    },
    Object {
      "id": 27,
      "name": "Mimi",
    },
    Object {
      "id": 28,
      "name": "Mimi",
    },
    Object {
      "id": 29,
      "name": "Mimi",
    },
    Object {
      "id": 30,
      "name": "Mimi",
    },
    Object {
      "id": 31,
      "name": "Mimi",
    },
    Object {
      "id": 32,
      "name": "Mimi",
    },
    Object {
      "id": 33,
      "name": "Mimi",
    },
    Object {
      "id": 34,
      "name": "Mimi",
    },
    Object {
      "id": 35,
      "name": "Mimi",
    },
    Object {
      "id": 36,
      "name": "Mimi",
    },
    Object {
      "id": 37,
      "name": "Mimi",
    },
    Object {
      "id": 38,
      "name": "Mimi",
    },
    Object {
      "id": 39,
      "name": "Mimi",
    },
    Object {
      "id": 40,
      "name": "Mimi",
    },
    Object {
      "id": 41,
      "name": "Mimi",
    },
    Object {
      "id": 42,
      "name": "Mimi",
    },
    Object {
      "id": 43,
      "name": "Mimi",
    },
    Object {
      "id": 44,
      "name": "Mimi",
    },
    Object {
      "id": 45,
      "name": "Mimi",
    },
    Object {
      "id": 46,
      "name": "Mimi",
    },
    Object {
      "id": 47,
      "name": "Mimi",
    },
    Object {
      "id": 48,
      "name": "Mimi",
    },
    Object {
      "id": 49,
      "name": "Mimi",
    },
    Object {
      "id": 50,
      "name": "Mimi",
    },
  ],
  "id": 1,
}
`;

exports[`CRUD Nested CRUD One to Many Function Should able to select by properties /users/:parentId/animals/:id 1`] = `
Object {
  "age": 21,
  "id": 1,
  "name": "Mimi",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should able to select by property GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "age": 21,
    "id": 1,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 2,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 3,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 4,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 5,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 6,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 7,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 8,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 9,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 10,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 11,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 12,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 13,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 14,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 15,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 16,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 17,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 18,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 19,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 20,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 22,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 23,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 24,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 25,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 26,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 27,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 28,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 29,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 30,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 31,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 32,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 33,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 34,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 35,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 36,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 37,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 38,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 39,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 40,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 41,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 42,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 43,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 44,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 45,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 46,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 47,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 48,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 49,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": 50,
    "name": "Mimi",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to set array of IDs for array relation properties 1`] = `
Object {
  "animals": Array [
    Object {
      "id": 1,
      "name": "Mimi",
    },
    Object {
      "id": 2,
      "name": "Bingo",
    },
  ],
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should able to use custom get many query 1`] = `
Array [
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to use custom get one query 1`] = `
Object {
  "name": "Mimi",
  "user": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should filter with exact value GET /users/:parentId/animals?filter 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Jojo",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should filter with partial value GET /users/:parentId/animals?filter 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Jojo Subejo",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should serve GET /users/:parentId/animals/:id 1`] = `
Object {
  "id": 1,
  "name": "Mimi",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve PATCH /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve POST /users/:parentId/animals 1`] = `
User {
  "animals": Array [
    Animal {
      "id": 1,
      "name": "Mimi",
    },
    Animal {
      "id": 2,
      "name": "Mimi",
    },
  ],
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve POST /users/:parentId/animals 2`] = `
Animal {
  "id": 1,
  "name": "Mimi",
  "user": User {
    "email": "john.doe@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve PUT /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve delete with deleteColumn DELETE /users/:parentId/animals/:id 1`] = `
Animal {
  "deleted": true,
  "id": 1,
  "name": "Mimi",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should set partial validation GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Jeje",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should set partial validation on PATCH /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`CRUD One To One Function Should able to add with ID 1`] = `
User {
  "animal": Animal {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should able to modify relation by ID 1`] = `
User {
  "animal": Animal {
    "id": 2,
    "name": "Bingo",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populated one to many 1`] = `
User {
  "animals": Array [
    Animal {
      "id": 1,
      "name": "Mimi",
    },
    Animal {
      "id": 2,
      "name": "Bingo",
    },
  ],
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populated one to many 2`] = `
Object {
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should populated multiple result 1`] = `
Array [
  Object {
    "animal": Object {
      "id": 1,
      "name": "Mimi",
    },
    "id": 1,
    "name": "John",
  },
  Object {
    "animal": Object {
      "id": 1,
      "name": "Mimi",
    },
    "id": 2,
    "name": "Jane",
  },
]
`;

exports[`CRUD One To One Function Should populated on get by id 1`] = `
Object {
  "animal": Object {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should populated on multiple property 1`] = `
Object {
  "animal": Object {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
  "secondAnimal": Object {
    "id": 2,
    "name": "Bingo",
  },
}
`;

exports[`CRUD One To One on Nested Object Should able to add with ID 1`] = `
User {
  "animal": Animal {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should able to modify relation by ID 1`] = `
User {
  "animal": Animal {
    "id": 2,
    "name": "Bingo",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should not populated one to many 1`] = `
User {
  "animals": Array [
    Animal {
      "id": 1,
      "name": "Mimi",
    },
    Animal {
      "id": 2,
      "name": "Bingo",
    },
  ],
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should not populated one to many 2`] = `
Object {
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should populated multiple result 1`] = `
Array [
  Object {
    "animal": Object {
      "id": 1,
      "name": "Mimi",
    },
    "id": 1,
    "name": "John",
  },
  Object {
    "animal": Object {
      "id": 2,
      "name": "Bingo",
    },
    "id": 2,
    "name": "Jane",
  },
]
`;

exports[`CRUD One To One on Nested Object Should populated on get by id 1`] = `
Object {
  "animal": Object {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should populated on multiple property 1`] = `
Object {
  "animal": Object {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
  "secondAnimal": Object {
    "id": 2,
    "name": "Bingo",
  },
}
`;

exports[`CRUD Should able to create custom generic controller factory 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. MyCustomGeneric.list                   -> GET    /users",
  ],
  Array [
    " 2. MyCustomGeneric.save(data, ctx)        -> POST   /users",
  ],
  Array [
    " 3. MyCustomGeneric.get(id, select, ctx)   -> GET    /users/:id",
  ],
  Array [
    " 4. MyCustomGeneric.modify(id, data, ctx)  -> PATCH  /users/:id",
  ],
  Array [
    " 5. MyCustomGeneric.replace(id, data, ctx) -> PUT    /users/:id",
  ],
  Array [
    " 6. MyCustomGeneric.delete(id, ctx)        -> DELETE /users/:id",
  ],
  Array [
    " 7. MyCustomOnToManyGeneric.list           -> GET    /users/:pid/animals",
  ],
  Array [
    " 8. MyCustomOnToManyGeneric.save           -> POST   /users/:pid/animals",
  ],
  Array [
    " 9. MyCustomOnToManyGeneric.get            -> GET    /users/:pid/animals/:id",
  ],
  Array [
    "10. MyCustomOnToManyGeneric.modify         -> PATCH  /users/:pid/animals/:id",
  ],
  Array [
    "11. MyCustomOnToManyGeneric.replace        -> PUT    /users/:pid/animals/:id",
  ],
  Array [
    "12. MyCustomOnToManyGeneric.delete         -> DELETE /users/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`CRUD Should able to reflect generic controller factory 1`] = `
Array [
  Object {
    "name": "save",
    "pars": Array [
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
    "type": DynamicType,
  },
  Object {
    "name": "findByIdOrNotFound",
    "pars": Array [
      Object {
        "name": "id",
        "type": Object,
      },
      Object {
        "name": "select",
        "type": Object,
      },
    ],
    "type": Promise,
  },
  Object {
    "name": "list",
    "pars": Array [
      Object {
        "name": "offset",
        "type": Number,
      },
      Object {
        "name": "limit",
        "type": Number,
      },
      Object {
        "name": "filter",
        "type": String,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "order",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
    "type": Array [
      User,
    ],
  },
  Object {
    "name": "get",
    "pars": Array [
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
    "type": User,
  },
  Object {
    "name": "modify",
    "pars": Array [
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
    "type": DynamicType,
  },
  Object {
    "name": "replace",
    "pars": Array [
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": User,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
    "type": DynamicType,
  },
  Object {
    "name": "delete",
    "pars": Array [
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
    "type": DynamicType,
  },
]
`;

exports[`CRUD Should able to reflect generic controller factory on nested controller 1`] = `
Array [
  Object {
    "name": "save",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": Animal,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
    "type": DynamicType,
  },
  Object {
    "name": "findByIdOrNotFound",
    "pars": Array [
      Object {
        "name": "id",
        "type": Object,
      },
      Object {
        "name": "select",
        "type": Object,
      },
    ],
    "type": Promise,
  },
  Object {
    "name": "findParentByIdOrNotFound",
    "pars": Array [
      Object {
        "name": "id",
        "type": Object,
      },
    ],
    "type": Promise,
  },
  Object {
    "name": "list",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "offset",
        "type": Number,
      },
      Object {
        "name": "limit",
        "type": Number,
      },
      Object {
        "name": "filter",
        "type": String,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "order",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
    "type": Array [
      Animal,
    ],
  },
  Object {
    "name": "get",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "select",
        "type": String,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
    "type": Animal,
  },
  Object {
    "name": "modify",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": Animal,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
    "type": DynamicType,
  },
  Object {
    "name": "replace",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "data",
        "type": Animal,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
    "type": DynamicType,
  },
  Object {
    "name": "delete",
    "pars": Array [
      Object {
        "name": "pid",
        "type": Number,
      },
      Object {
        "name": "id",
        "type": Number,
      },
      Object {
        "name": "ctx",
        "type": Object,
      },
    ],
    "type": DynamicType,
  },
]
`;

exports[`CRUD Should able to update array 1`] = `
User {
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
  "tags": Array [
    Tag {
      "id": 1,
      "name": "lorem",
    },
    Tag {
      "id": 2,
      "name": "lorem",
    },
  ],
}
`;

exports[`CRUD Should able to use entity policy properly 1`] = `
Array [
  Object {
    "email": "john.doe@gmail.com",
    "id": 1,
    "name": "John",
  },
  Object {
    "id": 2,
    "name": "Jane",
  },
  Object {
    "id": 3,
    "name": "Joe",
  },
]
`;

exports[`CRUD Should throw proper error message when generic controller factory found missing relation property type 1`] = `
Array [
  Array [
    [Error: Unable to get data type of member User.animals. Make sure to provide type information, or manage if its has cross reference to other class],
  ],
]
`;

exports[`Filter Generic Controller Should able to filter with and 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with exact value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with gt value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with gte value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with lt value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with lte value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with not equal value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with or 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with range value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with exact value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with gt value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with gte value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with lt value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with lte value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with not equal value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with range value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Open API Generic Controller Should able to override tag 1`] = `
Array [
  "User Management",
]
`;

exports[`Open API Generic Controller Should generate tags properly 1`] = `
Array [
  "Users",
]
`;

exports[`Open API Nested Generic Controller Should able to override tag 1`] = `
Array [
  "Animal Management",
]
`;

exports[`Open API Nested Generic Controller Should generate tags properly 1`] = `
Array [
  "Animals",
]
`;

exports[`Open API Should mark guid column as readonly 1`] = `
Object {
  "properties": Object {
    "id": Object {
      "readOnly": true,
      "type": "string",
    },
    "password": Object {
      "type": "string",
    },
    "userName": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should mark id column as readonly 1`] = `
Object {
  "properties": Object {
    "id": Object {
      "readOnly": true,
      "type": "number",
    },
    "password": Object {
      "type": "string",
    },
    "userName": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should not error when generated schema that the controller created using generic controller factory 1`] = `
Object {
  "properties": Object {
    "animals": Object {
      "items": Object {
        "$ref": "#/components/schemas/Animal",
      },
      "type": "array",
    },
    "email": Object {
      "type": "string",
    },
    "id": Object {
      "readOnly": true,
      "type": "number",
    },
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should reflect relation on many to many column 1`] = `
Object {
  "content": Object {
    "application/json": Object {
      "schema": Object {
        "allOf": Array [
          Object {
            "$ref": "#/components/schemas/User",
          },
          Object {
            "properties": Object {
              "animals": Object {
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          Object {
            "properties": Object {
              "id": Object {
                "readOnly": true,
              },
            },
            "type": "object",
          },
        ],
      },
    },
    "application/x-www-form-urlencoded": Object {
      "schema": Object {
        "allOf": Array [
          Object {
            "$ref": "#/components/schemas/User",
          },
          Object {
            "properties": Object {
              "animals": Object {
                "items": Object {
                  "type": "number",
                },
                "type": "array",
              },
            },
            "type": "object",
          },
          Object {
            "properties": Object {
              "id": Object {
                "readOnly": true,
              },
            },
            "type": "object",
          },
        ],
      },
    },
  },
  "required": true,
}
`;

exports[`Repository Repository Should able to get one 1`] = `
User {
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
}
`;
