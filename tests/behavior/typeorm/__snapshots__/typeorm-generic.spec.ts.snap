// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CRUD CRUD Function Should able to clear property if provided undefined on PUT /users/:id 1`] = `
User {
  "email": "john@gmail.com",
  "id": 1,
  "name": null,
}
`;

exports[`CRUD CRUD Function Should able to create controller using builder 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMControllerGeneric.list            -> GET    /users",
  ],
  Array [
    "2. TypeORMControllerGeneric.save(data, ctx) -> POST   /users",
  ],
  Array [
    "3. TypeORMControllerGeneric.get             -> GET    /users/:id",
  ],
  Array [
    "4. TypeORMControllerGeneric.modify          -> PATCH  /users/:id",
  ],
  Array [
    "5. TypeORMControllerGeneric.replace         -> PUT    /users/:id",
  ],
  Array [
    "6. TypeORMControllerGeneric.delete(id, ctx) -> DELETE /users/:id",
  ],
  Array [],
]
`;

exports[`CRUD CRUD Function Should able to disable some actions from controller builder 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMControllerGeneric.list -> GET /users",
  ],
  Array [
    "2. TypeORMControllerGeneric.get  -> GET /users/:id",
  ],
  Array [],
]
`;

exports[`CRUD CRUD Function Should able to order by properties GET /users?offset&limit 1`] = `
Array [
  Object {
    "age": 21,
    "name": "Borne",
  },
  Object {
    "age": 21,
    "name": "Anne",
  },
  Object {
    "age": 22,
    "name": "Juliet",
  },
  Object {
    "age": 22,
    "name": "John",
  },
  Object {
    "age": 23,
    "name": "August",
  },
]
`;

exports[`CRUD CRUD Function Should able to save relation with ID 1`] = `
Todo {
  "id": 1,
  "message": "Lorem ipsum",
  "user": User {
    "email": "john.doe@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
}
`;

exports[`CRUD CRUD Function Should able to select by properties GET /users/:id 1`] = `
Object {
  "age": 21,
  "name": "John Doe",
}
`;

exports[`CRUD CRUD Function Should able to select by properties GET /users?offset&limit 1`] = `
Array [
  Object {
    "email": "jane.doe@gmail.com",
    "id": 1,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 2,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 3,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 4,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 5,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 6,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 7,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 8,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 9,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 10,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 11,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 12,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 13,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 14,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 15,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 16,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 17,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 18,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 19,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 20,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 21,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 22,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 23,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 24,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 25,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 26,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 27,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 28,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 29,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 30,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 31,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 32,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 33,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 34,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 35,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 36,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 37,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 38,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 39,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 40,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 41,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 42,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 43,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 44,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 45,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 46,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 47,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 48,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 49,
  },
  Object {
    "email": "john.doe@gmail.com",
    "id": 50,
  },
]
`;

exports[`CRUD CRUD Function Should able to use custom get many query 1`] = `
Array [
  Object {
    "email": "john.doe@gmail.com",
  },
  Object {
    "email": "john.doe@gmail.com",
  },
  Object {
    "email": "john.doe@gmail.com",
  },
  Object {
    "email": "john.doe@gmail.com",
  },
  Object {
    "email": "john.doe@gmail.com",
  },
]
`;

exports[`CRUD CRUD Function Should able to use custom get one query 1`] = `
Object {
  "email": "john.doe@gmail.com",
}
`;

exports[`CRUD CRUD Function Should able to use request hook 1`] = `
User {
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
  "password": "HASH",
}
`;

exports[`CRUD CRUD Function Should able to use request hook 2`] = `
Array [
  Array [
    1,
  ],
]
`;

exports[`CRUD CRUD Function Should filter by exact value GET /users?filter 1`] = `
Array [
  Object {
    "email": "jane.doe@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
]
`;

exports[`CRUD CRUD Function Should filter by partial value GET /users?filter 1`] = `
Array [
  Object {
    "email": "jane.doe@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
  Object {
    "email": "jane.moe@gmail.com",
    "id": 2,
    "name": "John Doe",
  },
]
`;

exports[`CRUD CRUD Function Should ignore wrong property name on select GET /users/:id 1`] = `
Object {
  "age": 21,
  "name": "John Doe",
}
`;

exports[`CRUD CRUD Function Should serve delete with deleteColumn DELETE /users/:id 1`] = `
User {
  "deleted": true,
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
}
`;

exports[`CRUD CRUD Function Should set partial validation on GET /users?offset&limit 1`] = `
Array [
  Object {
    "email": "jane.dane@gmail.com",
    "id": 1,
    "name": "John Doe",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to create nested controller using controller builder 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMOneToMany...eneric.list    -> GET    /users/:pid/animals",
  ],
  Array [
    "2. TypeORMOneToMany...eneric.save    -> POST   /users/:pid/animals",
  ],
  Array [
    "3. TypeORMOneToMany...eneric.get     -> GET    /users/:pid/animals/:id",
  ],
  Array [
    "4. TypeORMOneToMany...eneric.modify  -> PATCH  /users/:pid/animals/:id",
  ],
  Array [
    "5. TypeORMOneToMany...eneric.replace -> PUT    /users/:pid/animals/:id",
  ],
  Array [
    "6. TypeORMOneToMany...eneric.delete  -> DELETE /users/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to disable some actions using controller builder 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. TypeORMOneToMany...eneric.list -> GET /users/:pid/animals",
  ],
  Array [
    "2. TypeORMOneToMany...eneric.get  -> GET /users/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to order by property GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "age": 22,
    "name": "Juliet",
  },
  Object {
    "age": 22,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Abas",
  },
  Object {
    "age": 21,
    "name": "Alba",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to select by properties /users/:parentId/animals/:id 1`] = `
Object {
  "age": 21,
  "name": "Mimi",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should able to select by property GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to use custom get many query 1`] = `
Array [
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
  Object {
    "name": "Mimi",
    "user": "John Doe",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to use custom get one query 1`] = `
Object {
  "name": "Mimi",
  "user": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should filter with exact value GET /users/:parentId/animals?filter 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Jojo",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should filter with partial value GET /users/:parentId/animals?filter 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Jojo Subejo",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should serve GET /users/:parentId/animals/:id 1`] = `
Object {
  "id": 1,
  "name": "Mimi",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve PATCH /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve POST /users/:parentId/animals 1`] = `
User {
  "animals": Array [
    Animal {
      "id": 1,
      "name": "Mimi",
    },
    Animal {
      "id": 2,
      "name": "Mimi",
    },
  ],
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve PUT /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve delete with deleteColumn DELETE /users/:parentId/animals/:id 1`] = `
Animal {
  "deleted": true,
  "id": 1,
  "name": "Mimi",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should set partial validation GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "id": 1,
    "name": "Jeje",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should set partial validation on PATCH /users/:parentId/animals/:id 1`] = `
Animal {
  "id": 1,
  "name": "Poe",
}
`;

exports[`CRUD One To One Function Should able to add with ID 1`] = `
User {
  "animal": Animal {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should able to modify relation by ID 1`] = `
User {
  "animal": Animal {
    "id": 2,
    "name": "Bingo",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populated one to many 1`] = `
User {
  "animals": Array [
    Animal {
      "id": 1,
      "name": "Mimi",
    },
    Animal {
      "id": 2,
      "name": "Bingo",
    },
  ],
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populated one to many 2`] = `
Object {
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should populated multiple result 1`] = `
Array [
  Object {
    "animal": Object {
      "id": 1,
      "name": "Mimi",
    },
    "id": 1,
    "name": "John",
  },
  Object {
    "animal": Object {
      "id": 1,
      "name": "Mimi",
    },
    "id": 2,
    "name": "Jane",
  },
]
`;

exports[`CRUD One To One Function Should populated on get by id 1`] = `
Object {
  "animal": Object {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One Function Should populated on multiple property 1`] = `
Object {
  "animal": Object {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
  "secondAnimal": Object {
    "id": 2,
    "name": "Bingo",
  },
}
`;

exports[`CRUD One To One on Nested Object Should able to add with ID 1`] = `
User {
  "animal": Animal {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should able to modify relation by ID 1`] = `
User {
  "animal": Animal {
    "id": 2,
    "name": "Bingo",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should not populated one to many 1`] = `
User {
  "animals": Array [
    Animal {
      "id": 1,
      "name": "Mimi",
    },
    Animal {
      "id": 2,
      "name": "Bingo",
    },
  ],
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should not populated one to many 2`] = `
Object {
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should populated multiple result 1`] = `
Array [
  Object {
    "animal": Object {
      "id": 1,
      "name": "Mimi",
    },
    "id": 1,
    "name": "John",
  },
  Object {
    "animal": Object {
      "id": 2,
      "name": "Bingo",
    },
    "id": 2,
    "name": "Jane",
  },
]
`;

exports[`CRUD One To One on Nested Object Should populated on get by id 1`] = `
Object {
  "animal": Object {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should populated on multiple property 1`] = `
Object {
  "animal": Object {
    "id": 1,
    "name": "Mimi",
  },
  "id": 1,
  "name": "John",
  "secondAnimal": Object {
    "id": 2,
    "name": "Bingo",
  },
}
`;

exports[`CRUD Should able to update array 1`] = `
User {
  "email": "john.doe@gmail.com",
  "id": 1,
  "name": "John Doe",
  "tags": Array [
    Tag {
      "id": 1,
      "name": "lorem",
    },
    Tag {
      "id": 2,
      "name": "lorem",
    },
  ],
}
`;

exports[`CRUD Should able to use entity policy properly 1`] = `
Array [
  Object {
    "email": "john.doe@gmail.com",
    "id": 1,
    "name": "John",
  },
  Object {
    "id": 2,
    "name": "Jane",
  },
  Object {
    "id": 3,
    "name": "Joe",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with exact value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with gt value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with gte value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with lt value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with lte value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with not equal value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with range value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with exact value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with gt value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with gte value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with lt value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with lte value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": 1,
    "number": 1,
    "string": "lorem",
  },
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with not equal value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with range value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": 2,
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": 3,
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Open API Should mark guid column as readonly 1`] = `
Object {
  "properties": Object {
    "id": Object {
      "readOnly": true,
      "type": "string",
    },
    "password": Object {
      "type": "string",
    },
    "userName": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should mark id column as readonly 1`] = `
Object {
  "properties": Object {
    "id": Object {
      "readOnly": true,
      "type": "number",
    },
    "password": Object {
      "type": "string",
    },
    "userName": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;
