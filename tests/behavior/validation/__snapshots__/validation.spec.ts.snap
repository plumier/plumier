// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Class Scope Validation Should be able to use access body request property that is not part of the domain 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Password is not the same",
      ],
      "path": Array [
        "model",
        "confirmPassword",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Class Scope Validation Should be able to validate class and return several validation result 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Password is not the same",
      ],
      "path": Array [
        "model",
        "confirmPassword",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Class Scope Validation Should be able to validate class from the class decorator 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Password is not the same",
      ],
      "path": Array [
        "model",
        "confirmPassword",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Custom Validation Should able to combine TypedConverter validator and custom validator 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Invalid email address",
        "String must be longer than 20",
      ],
      "path": Array [
        "data",
        "email",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Custom Validation Should able to return AsyncValidatorResult from sync validation 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Must greater than 18",
      ],
      "path": Array [
        "data",
        "other",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Custom Validation Should able to return AsyncValidatorResult with multiple messages 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Must greater",
        "Than 18",
      ],
      "path": Array [
        "data",
        "other",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Custom Validation Should able to use async function as custom validator 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Must greater than 18",
      ],
      "path": Array [
        "data",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Custom Validation Should able to use class based custom validator 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Must greater than 18",
      ],
      "path": Array [
        "data",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Custom Validation Should able to use sync function as custom validator 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Must greater than 18",
      ],
      "path": Array [
        "data",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Custom Validation Should prioritize required validator 1`] = `
Array [
  Object {
    "messages": Array [
      "Required",
    ],
    "path": Array [
      "data",
    ],
  },
]
`;

exports[`Custom Validation Should provide parent value information 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Password doesn't match",
      ],
      "path": Array [
        "data",
        "confirmPassword",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Custom Validation Should provided correct information for custom validation 1`] = `
Object {
  "action": Object {
    "decorators": Array [
      Object {
        "method": "post",
        "name": "Route",
        "url": undefined,
        Symbol(tinspector:decoratorOption): Object {
          "allowMultiple": true,
          "inherit": true,
        },
      },
    ],
    "kind": "Method",
    "name": "save",
    "parameters": Array [
      Object {
        "decorators": Array [
          Object {
            "type": "ValidatorDecorator",
            "validator": customValidator,
            Symbol(tinspector:decoratorOption): Object {
              "allowMultiple": true,
              "inherit": true,
            },
          },
        ],
        "fields": Object {},
        "index": 0,
        "kind": "Parameter",
        "name": "data",
        "type": String,
        "typeClassification": "Primitive",
      },
    ],
    "returnType": undefined,
    "typeClassification": undefined,
  },
  "controller": Object {
    "ctor": Object {
      "kind": "Constructor",
      "name": "constructor",
      "parameters": Array [],
    },
    "decorators": Array [],
    "kind": "Class",
    "methods": Array [
      Object {
        "decorators": Array [
          Object {
            "method": "post",
            "name": "Route",
            "url": undefined,
            Symbol(tinspector:decoratorOption): Object {
              "allowMultiple": true,
              "inherit": true,
            },
          },
        ],
        "kind": "Method",
        "name": "save",
        "parameters": Array [
          Object {
            "decorators": Array [
              Object {
                "type": "ValidatorDecorator",
                "validator": customValidator,
                Symbol(tinspector:decoratorOption): Object {
                  "allowMultiple": true,
                  "inherit": true,
                },
              },
            ],
            "fields": Object {},
            "index": 0,
            "kind": "Parameter",
            "name": "data",
            "type": String,
            "typeClassification": "Primitive",
          },
        ],
        "returnType": undefined,
        "typeClassification": undefined,
      },
    ],
    "name": "UserController",
    "properties": Array [],
    "super": Object,
    "type": UserController,
    "typeClassification": "Class",
  },
  "kind": "ActionRoute",
  "method": "post",
  "overridable": false,
  "url": "/user/save",
}
`;

exports[`Custom Validation Should validate using custom validation 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Password doesn't match",
      ],
      "path": Array [
        "data",
        "confirmPassword",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Custom Validation Should validate using decouple logic 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Only 18+ allowed",
      ],
      "path": Array [
        "data",
        "age",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Decouple Validation Logic Should validate using decouple logic from RestfulApiFacility 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Only 18+ allowed",
      ],
      "path": Array [
        "data",
        "age",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Decouple Validation Logic Should validate using decouple logic from WebApiFacility 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Only 18+ allowed",
      ],
      "path": Array [
        "data",
        "age",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Decouple Validation Logic Should validate using decouple logic from setting 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Only 18+ allowed",
      ],
      "path": Array [
        "data",
        "age",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Enums Validation Should able to use custom message 1`] = `
Array [
  Object {
    "messages": Array [
      "lorem ipsum",
    ],
    "path": Array [
      "gender",
    ],
  },
]
`;

exports[`Enums Validation Should return prover invalid message 1`] = `
Array [
  Object {
    "messages": Array [
      "Value must be one of Male, Female",
    ],
    "path": Array [
      "gender",
    ],
  },
]
`;

exports[`File Validation Should able to use custom file size validation message 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "lorem ipsum",
      ],
      "path": Array [
        "file",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`File Validation Should able to use custom mime type validation message 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "lorem ipsum",
      ],
      "path": Array [
        "file",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`File Validation Should able to validate file size 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "File size exceed the limit allowed",
      ],
      "path": Array [
        "file",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`File Validation Should able to validate file size in array of files 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "File size exceed the limit allowed",
      ],
      "path": Array [
        "file",
        "2",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`File Validation Should able to validate file size using number 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "File size exceed the limit allowed",
      ],
      "path": Array [
        "file",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`File Validation Should able to validate file size with file binding decorator 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "File size exceed the limit allowed",
      ],
      "path": Array [
        "data",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`File Validation Should able to validate mime type 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Invalid file type",
      ],
      "path": Array [
        "file",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`File Validation Should able to validate mime type in array 1`] = `
Array [
  Object {
    "messages": Array [
      "Invalid file type",
    ],
  },
  Object {
    "messages": Array [
      "Invalid file type",
    ],
  },
]
`;

exports[`Image Validation Should able to use custom file size validation message 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "lorem ipsum",
      ],
      "path": Array [
        "file",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Image Validation Should able to use custom image validation message 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "lorem ipsum",
      ],
      "path": Array [
        "file",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Image Validation Should able to validate image size 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "File size exceed the limit allowed",
      ],
      "path": Array [
        "file",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Image Validation Should not allow html 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Invalid image file",
      ],
      "path": Array [
        "file",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Validation Parameter should be optional by default 1`] = `Object {}`;

exports[`Validation Should validate model with correct path 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Required",
      ],
      "path": Array [
        "model",
        "deceased",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Validation Should validate nested model with correct path 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Required",
      ],
      "path": Array [
        "model",
        "tag",
        "id",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Validation Should validate parameter 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Invalid email address",
      ],
      "path": Array [
        "email",
      ],
    },
  ],
  "status": 422,
}
`;
