// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Facility Automatically replace mongodb id into ObjectId on populate data Should validate properly on Array 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Invalid MongoDB id",
      ],
      "path": Array [
        "data",
        "images[1]",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Facility Automatically replace mongodb id into ObjectId on populate data Should validate properly on nested object 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Invalid MongoDB id",
      ],
      "path": Array [
        "data",
        "image",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Facility Automatically replace mongodb id into ObjectId on populate data Should work on nested object 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "image": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "name": "Image1.jpg",
  },
  "name": "Mimi",
}
`;

exports[`Facility Entity Normalization Should able to discover entities by default 1`] = `
Array [
  Object {
    "access": "read",
    "appliedClass": NestedEntity,
    "evaluation": "Dynamic",
    "location": "Method",
    "policies": Array [
      "plumier::writeonly",
    ],
    "tag": "plumier::writeonly",
    "type": "plumier-meta:authorize",
    Symbol(tinspector:decoratorOption): Object {
      "access": "read",
      "allowMultiple": true,
      "applyTo": Array [],
      "evaluation": "Dynamic",
      "inherit": true,
      "methods": Array [],
      "removeApplied": true,
      "tag": "plumier::writeonly",
    },
  },
  Object {
    "access": "write",
    "appliedClass": NestedEntity,
    "evaluation": "Dynamic",
    "location": "Method",
    "policies": Array [
      "plumier::readonly",
    ],
    "tag": "plumier::readonly",
    "type": "plumier-meta:authorize",
    Symbol(tinspector:decoratorOption): Object {
      "access": "write",
      "allowMultiple": true,
      "applyTo": Array [],
      "evaluation": "Dynamic",
      "inherit": true,
      "methods": Array [],
      "removeApplied": true,
      "tag": "plumier::readonly",
    },
  },
]
`;

exports[`Facility Entity Normalization Should able to normalize using path 1`] = `
Array [
  Object {
    "access": "read",
    "appliedClass": Animal,
    "evaluation": "Dynamic",
    "location": "Method",
    "policies": Array [
      "plumier::writeonly",
    ],
    "tag": "plumier::writeonly",
    "type": "plumier-meta:authorize",
    Symbol(tinspector:decoratorOption): Object {
      "access": "read",
      "allowMultiple": true,
      "applyTo": Array [],
      "evaluation": "Dynamic",
      "inherit": true,
      "methods": Array [],
      "removeApplied": true,
      "tag": "plumier::writeonly",
    },
  },
  Object {
    "access": "write",
    "appliedClass": Animal,
    "evaluation": "Dynamic",
    "location": "Method",
    "policies": Array [
      "plumier::readonly",
    ],
    "tag": "plumier::readonly",
    "type": "plumier-meta:authorize",
    Symbol(tinspector:decoratorOption): Object {
      "access": "write",
      "allowMultiple": true,
      "applyTo": Array [],
      "evaluation": "Dynamic",
      "inherit": true,
      "methods": Array [],
      "removeApplied": true,
      "tag": "plumier::readonly",
    },
  },
]
`;

exports[`Facility Entity Normalization Should mark array relation as readonly/writeonly 1`] = `
Array [
  Object {
    "access": "read",
    "appliedClass": User,
    "evaluation": "Dynamic",
    "location": "Method",
    "policies": Array [
      "plumier::writeonly",
    ],
    "tag": "plumier::writeonly",
    "type": "plumier-meta:authorize",
    Symbol(tinspector:decoratorOption): Object {
      "access": "read",
      "allowMultiple": true,
      "applyTo": Array [],
      "evaluation": "Dynamic",
      "inherit": true,
      "methods": Array [],
      "removeApplied": true,
      "tag": "plumier::writeonly",
    },
  },
  Object {
    "access": "write",
    "appliedClass": User,
    "evaluation": "Dynamic",
    "location": "Method",
    "policies": Array [
      "plumier::readonly",
    ],
    "tag": "plumier::readonly",
    "type": "plumier-meta:authorize",
    Symbol(tinspector:decoratorOption): Object {
      "access": "write",
      "allowMultiple": true,
      "applyTo": Array [],
      "evaluation": "Dynamic",
      "inherit": true,
      "methods": Array [],
      "removeApplied": true,
      "tag": "plumier::readonly",
    },
  },
]
`;

exports[`Mongoose Proxy Should able to provide toString() 1`] = `"function () { [native code] }"`;

exports[`Mongoose Proxy Should fix circular reference issue 1`] = `
Object {
  "__v": 1,
  "_id": "MONGODB UNIQUE ID",
  "children": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "child",
    },
  ],
  "name": "parent",
}
`;

exports[`Mongoose Proxy Should work with external circular dependency model 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "children": Array [],
  "name": "Parent",
}
`;

exports[`Mongoose Proxy Should work with external circular dependency model 2`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "name": "Child",
}
`;

exports[`Mongoose Proxy Should work with instance of simple model 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "booleanProp": true,
  "dateProp": 2020-2-2,
  "numberProp": 123,
  "stringProp": "modified",
}
`;

exports[`Mongoose Proxy Should work with simple model 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "booleanProp": true,
  "dateProp": 2020-2-2,
  "numberProp": 123,
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Configuration Should able to enable timestamps using decorator 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "createdAt": DATE NOW,
  "stringProp": "string",
  "updatedAt": DATE NOW,
}
`;

exports[`Mongoose Schema Configuration Should able to enable timestamps using decorator from base class 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "createdAt": DATE NOW,
  "deleted": false,
  "stringProp": "string",
  "updatedAt": DATE NOW,
}
`;

exports[`Mongoose Schema Configuration Should able to specify configuration 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "STRING",
}
`;

exports[`Mongoose Schema Configuration Should able to specify default value 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "deleted": false,
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Configuration Should able to specify default value on base class 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "deleted": false,
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Configuration Should able to specify multiple configuration decorators 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "LOREM",
}
`;

exports[`Mongoose Schema Configuration Should able to use @schema.property() as noop decorator 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Generation Should able to call model factory multiple time on the same model 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Generation Should able to call model factory multiple time on the same model 2`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "strong",
}
`;

exports[`Mongoose Schema Generation Should able to call model factory multiple time on the same model with custom name 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Generation Should able to call model factory multiple time on the same model with custom name 2`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "strong",
}
`;

exports[`Mongoose Schema Generation Should able to hook schema generation 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "booleanProp": true,
  "dateProp": 2020-2-2,
  "numberProp": 123,
  "stringProp": "Delayed",
}
`;

exports[`Mongoose Schema Generation Should able to rename collection with different name 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Generation Should able to use preSave using decorator 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "booleanProp": true,
  "dateProp": 2020-2-2,
  "numberProp": 123,
  "stringProp": "Delayed",
}
`;

exports[`Mongoose Schema Generation Should automatically generate schema for ref properties 1`] = `
Array [
  Dummy,
  Nest,
  ChildNest,
  GrandChildNest,
]
`;

exports[`Mongoose Schema Generation Should throw error on cross reference error 1`] = `"Error generating Mongoose schema, data type of Child.children property is undefined"`;

exports[`Mongoose Schema Generation Should work with cyclic reference model 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "children": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "booleanProp": true,
      "stringProp": "string",
    },
  ],
  "name": "lorem",
}
`;

exports[`Mongoose Schema Generation Should work with cyclic reference model 2`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "booleanProp": true,
  "dummy": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "name": "lorem",
  },
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Generation Should work with cyclic reference model with custom name 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "children": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "booleanProp": true,
      "stringProp": "string",
    },
  ],
  "name": "lorem",
}
`;

exports[`Mongoose Schema Generation Should work with cyclic reference model with custom name 2`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "booleanProp": true,
  "dummy": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "name": "lorem",
  },
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Generation Should work with nested array model 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "children": Array [
    Object {
      "_id": "MONGODB UNIQUE ID",
      "booleanProp": true,
      "stringProp": "string",
    },
  ],
}
`;

exports[`Mongoose Schema Generation Should work with nested array with ref (populate) 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "children": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "booleanProp": true,
      "stringProp": "string",
    },
  ],
}
`;

exports[`Mongoose Schema Generation Should work with nested model 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "child": Object {
    "booleanProp": true,
    "stringProp": "string",
  },
}
`;

exports[`Mongoose Schema Generation Should work with nested model with ref (populate) 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "child": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "booleanProp": true,
    "stringProp": "string",
  },
}
`;

exports[`Mongoose Schema Generation Should work with primitive array 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "booleanProp": Array [
    true,
    false,
  ],
  "dateProp": Array [
    2020-2-2,
    2020-2-3,
  ],
  "numberProp": Array [
    123,
    456,
  ],
  "stringProp": Array [
    "string",
    "strong",
  ],
}
`;

exports[`Mongoose Schema Generation Should work with primitive data 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "booleanProp": true,
  "dateProp": 2020-2-2,
  "numberProp": 123,
  "stringProp": "string",
}
`;

exports[`Response Projection Transformer Should not transform Ref if not populated 1`] = `
Object {
  "name": "Tada",
}
`;

exports[`Response Projection Transformer Should not transform Ref if not populated on nested array 1`] = `
Object {
  "name": "Tada",
}
`;

exports[`Response Projection Transformer Should transform Ref if populated 1`] = `
Object {
  "child": Object {
    "booleanProp": true,
    "stringProp": "string",
  },
  "name": "Tada",
}
`;

exports[`Response Projection Transformer Should transform Ref if populated on nested array 1`] = `
Object {
  "child": Array [
    Object {
      "booleanProp": true,
      "stringProp": "string",
    },
  ],
  "name": "Tada",
}
`;
