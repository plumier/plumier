// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CRUD CRUD Function Should able to query by property GET /users?offset&limit&name 1`] = `
Array [
  Object {
    "email": "jean.doe@gmail.com",
    "name": "Jean Doe",
  },
]
`;

exports[`CRUD CRUD Function Should set partial validation on query GET /users?offset&limit&name 1`] = `
Array [
  Object {
    "email": "jean.doe@gmail.com",
    "name": "Juan Doe",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should find by name GET /users/:parentId/animals?offset&limit  1`] = `
Array [
  Object {
    "name": "Jojo",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should serve GET /users/:parentId/animals/:id 1`] = `
Object {
  "name": "Mimi",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should serve PATCH /users/:parentId/animals/:id 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve POST /users/:parentId/animals 1`] = `
Object {
  "__v": 2,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
  ],
  "email": "john.doe@gmail.com",
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve PUT /users/:parentId/animals/:id 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should set partial validation on PATCH /users/:parentId/animals/:id 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "age": 4,
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should set partial validation on query on GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "age": 5,
    "name": "Jojo",
  },
]
`;

exports[`CRUD One To One Function Should able to add with ID 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animal": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  "name": "John",
}
`;

exports[`CRUD One To One Function Should able to modify relation by ID 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animal": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "name": "Bingo",
  },
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populated one to many 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Bingo",
    },
  ],
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populated one to many 2`] = `
Object {
  "animals": Array [
    Object {},
    Object {},
  ],
  "name": "John",
}
`;

exports[`CRUD One To One Function Should populated multiple result 1`] = `
Array [
  Object {
    "animal": Object {
      "name": "Mimi",
    },
    "name": "John",
  },
  Object {
    "animal": Object {
      "name": "Mimi",
    },
    "name": "Jane",
  },
]
`;

exports[`CRUD One To One Function Should populated on get by id 1`] = `
Object {
  "animal": Object {
    "name": "Mimi",
  },
  "name": "John",
}
`;

exports[`CRUD One To One Function Should populated on multiple property 1`] = `
Object {
  "animal": Object {
    "name": "Mimi",
  },
  "name": "John",
  "secondAnimal": Object {
    "name": "Bingo",
  },
}
`;

exports[`CRUD One To One on Nested Object Should able to add with ID 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animal": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should able to modify relation by ID 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animal": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "name": "Bingo",
  },
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should not populated multiple result 1`] = `
Array [
  Object {
    "animal": Object {
      "name": "Mimi",
    },
    "name": "John",
  },
  Object {
    "animal": Object {
      "name": "Bingo",
    },
    "name": "Jane",
  },
]
`;

exports[`CRUD One To One on Nested Object Should not populated one to many 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Bingo",
    },
  ],
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should not populated one to many 2`] = `
Object {
  "animals": Array [
    Object {},
    Object {},
  ],
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should populated on get by id 1`] = `
Object {
  "animal": Object {
    "name": "Mimi",
  },
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should populated on multiple property 1`] = `
Object {
  "animal": Object {
    "name": "Mimi",
  },
  "name": "John",
  "secondAnimal": Object {
    "name": "Bingo",
  },
}
`;

exports[`Facility Should able specify rootPath 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseControllerGeneric.get(id)    -> GET    /api/v1/animals/:id",
  ],
  Array [
    "2. MongooseControllerGeneric.modify     -> PATCH  /api/v1/animals/:id",
  ],
  Array [
    "3. MongooseControllerGeneric.replace    -> PUT    /api/v1/animals/:id",
  ],
  Array [
    "4. MongooseControllerGeneric.delete(id) -> DELETE /api/v1/animals/:id",
  ],
  Array [
    "5. MongooseControllerGeneric.list       -> GET    /api/v1/animals",
  ],
  Array [
    "6. MongooseControllerGeneric.save(data) -> POST   /api/v1/animals",
  ],
  Array [],
]
`;

exports[`Facility Should able to create API version using default entities 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseControllerGeneric.get(id)    -> GET    /api/v1/animals/:id",
  ],
  Array [
    "2. MongooseControllerGeneric.modify     -> PATCH  /api/v1/animals/:id",
  ],
  Array [
    "3. MongooseControllerGeneric.replace    -> PUT    /api/v1/animals/:id",
  ],
  Array [
    "4. MongooseControllerGeneric.delete(id) -> DELETE /api/v1/animals/:id",
  ],
  Array [
    "5. MongooseControllerGeneric.list       -> GET    /api/v1/animals",
  ],
  Array [
    "6. MongooseControllerGeneric.save(data) -> POST   /api/v1/animals",
  ],
  Array [],
]
`;

exports[`Facility Should able to create API versioning with external models 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. MongooseControllerGeneric.get(id)    -> GET    /api/v1/tags/:id",
  ],
  Array [
    " 2. MongooseControllerGeneric.modify     -> PATCH  /api/v1/tags/:id",
  ],
  Array [
    " 3. MongooseControllerGeneric.replace    -> PUT    /api/v1/tags/:id",
  ],
  Array [
    " 4. MongooseControllerGeneric.delete(id) -> DELETE /api/v1/tags/:id",
  ],
  Array [
    " 5. MongooseControllerGeneric.list       -> GET    /api/v1/tags",
  ],
  Array [
    " 6. MongooseControllerGeneric.save(data) -> POST   /api/v1/tags",
  ],
  Array [
    " 7. MongooseControllerGeneric.get(id)    -> GET    /api/v1/animals/:id",
  ],
  Array [
    " 8. MongooseControllerGeneric.modify     -> PATCH  /api/v1/animals/:id",
  ],
  Array [
    " 9. MongooseControllerGeneric.replace    -> PUT    /api/v1/animals/:id",
  ],
  Array [
    "10. MongooseControllerGeneric.delete(id) -> DELETE /api/v1/animals/:id",
  ],
  Array [
    "11. MongooseControllerGeneric.list       -> GET    /api/v1/animals",
  ],
  Array [
    "12. MongooseControllerGeneric.save(data) -> POST   /api/v1/animals",
  ],
  Array [
    "13. MongooseOneToMan...eneric.list       -> GET    /api/v1/animals/:pid/tags",
  ],
  Array [
    "14. MongooseOneToMan...eneric.save       -> POST   /api/v1/animals/:pid/tags",
  ],
  Array [
    "15. MongooseOneToMan...eneric.get        -> GET    /api/v1/animals/:pid/tags/:id",
  ],
  Array [
    "16. MongooseOneToMan...eneric.modify     -> PATCH  /api/v1/animals/:pid/tags/:id",
  ],
  Array [
    "17. MongooseOneToMan...eneric.replace    -> PUT    /api/v1/animals/:pid/tags/:id",
  ],
  Array [
    "18. MongooseOneToMan...eneric.delete     -> DELETE /api/v1/animals/:pid/tags/:id",
  ],
  Array [
    "19. MongooseControllerGeneric.get(id)    -> GET    /api/v2/tags/:id",
  ],
  Array [
    "20. MongooseControllerGeneric.modify     -> PATCH  /api/v2/tags/:id",
  ],
  Array [
    "21. MongooseControllerGeneric.replace    -> PUT    /api/v2/tags/:id",
  ],
  Array [
    "22. MongooseControllerGeneric.delete(id) -> DELETE /api/v2/tags/:id",
  ],
  Array [
    "23. MongooseControllerGeneric.list       -> GET    /api/v2/tags",
  ],
  Array [
    "24. MongooseControllerGeneric.save(data) -> POST   /api/v2/tags",
  ],
  Array [
    "25. MongooseControllerGeneric.get(id)    -> GET    /api/v2/animals/:id",
  ],
  Array [
    "26. MongooseControllerGeneric.modify     -> PATCH  /api/v2/animals/:id",
  ],
  Array [
    "27. MongooseControllerGeneric.replace    -> PUT    /api/v2/animals/:id",
  ],
  Array [
    "28. MongooseControllerGeneric.delete(id) -> DELETE /api/v2/animals/:id",
  ],
  Array [
    "29. MongooseControllerGeneric.list       -> GET    /api/v2/animals",
  ],
  Array [
    "30. MongooseControllerGeneric.save(data) -> POST   /api/v2/animals",
  ],
  Array [
    "31. MongooseOneToMan...eneric.list       -> GET    /api/v2/animals/:pid/tags",
  ],
  Array [
    "32. MongooseOneToMan...eneric.save       -> POST   /api/v2/animals/:pid/tags",
  ],
  Array [
    "33. MongooseOneToMan...eneric.get        -> GET    /api/v2/animals/:pid/tags/:id",
  ],
  Array [
    "34. MongooseOneToMan...eneric.modify     -> PATCH  /api/v2/animals/:pid/tags/:id",
  ],
  Array [
    "35. MongooseOneToMan...eneric.replace    -> PUT    /api/v2/animals/:pid/tags/:id",
  ],
  Array [
    "36. MongooseOneToMan...eneric.delete     -> DELETE /api/v2/animals/:pid/tags/:id",
  ],
  Array [],
]
`;

exports[`Facility Should able to create API versioning with multiple facility 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    " 1. MongooseControllerGeneric.get(id)    -> GET    /api/v1/animals/:id",
  ],
  Array [
    " 2. MongooseControllerGeneric.modify     -> PATCH  /api/v1/animals/:id",
  ],
  Array [
    " 3. MongooseControllerGeneric.replace    -> PUT    /api/v1/animals/:id",
  ],
  Array [
    " 4. MongooseControllerGeneric.delete(id) -> DELETE /api/v1/animals/:id",
  ],
  Array [
    " 5. MongooseControllerGeneric.list       -> GET    /api/v1/animals",
  ],
  Array [
    " 6. MongooseControllerGeneric.save(data) -> POST   /api/v1/animals",
  ],
  Array [
    " 7. MongooseControllerGeneric.get(id)    -> GET    /api/v2/animals/:id",
  ],
  Array [
    " 8. MongooseControllerGeneric.modify     -> PATCH  /api/v2/animals/:id",
  ],
  Array [
    " 9. MongooseControllerGeneric.replace    -> PUT    /api/v2/animals/:id",
  ],
  Array [
    "10. MongooseControllerGeneric.delete(id) -> DELETE /api/v2/animals/:id",
  ],
  Array [
    "11. MongooseControllerGeneric.list       -> GET    /api/v2/animals",
  ],
  Array [
    "12. MongooseControllerGeneric.save(data) -> POST   /api/v2/animals",
  ],
  Array [],
]
`;

exports[`Facility Should able to load external model 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseControllerGeneric.get(id)    -> GET    /absolutes/:id",
  ],
  Array [
    "2. MongooseControllerGeneric.modify     -> PATCH  /absolutes/:id",
  ],
  Array [
    "3. MongooseControllerGeneric.replace    -> PUT    /absolutes/:id",
  ],
  Array [
    "4. MongooseControllerGeneric.delete(id) -> DELETE /absolutes/:id",
  ],
  Array [
    "5. MongooseControllerGeneric.list       -> GET    /absolutes",
  ],
  Array [
    "6. MongooseControllerGeneric.save(data) -> POST   /absolutes",
  ],
  Array [],
]
`;

exports[`Facility Should able to load external model using relative path 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseControllerGeneric.get(id)    -> GET    /relatives/:id",
  ],
  Array [
    "2. MongooseControllerGeneric.modify     -> PATCH  /relatives/:id",
  ],
  Array [
    "3. MongooseControllerGeneric.replace    -> PUT    /relatives/:id",
  ],
  Array [
    "4. MongooseControllerGeneric.delete(id) -> DELETE /relatives/:id",
  ],
  Array [
    "5. MongooseControllerGeneric.list       -> GET    /relatives",
  ],
  Array [
    "6. MongooseControllerGeneric.save(data) -> POST   /relatives",
  ],
  Array [],
]
`;

exports[`Facility Should load default models if no option specified 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseControllerGeneric.get(id)    -> GET    /animals/:id",
  ],
  Array [
    "2. MongooseControllerGeneric.modify     -> PATCH  /animals/:id",
  ],
  Array [
    "3. MongooseControllerGeneric.replace    -> PUT    /animals/:id",
  ],
  Array [
    "4. MongooseControllerGeneric.delete(id) -> DELETE /animals/:id",
  ],
  Array [
    "5. MongooseControllerGeneric.list       -> GET    /animals",
  ],
  Array [
    "6. MongooseControllerGeneric.save(data) -> POST   /animals",
  ],
  Array [],
]
`;

exports[`Facility Should not generate model if not registered as mongoose model 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "No controller found",
  ],
]
`;

exports[`Open API Should mark createdAt property as readonly  1`] = `
Object {
  "properties": Object {
    "createdAt": Object {
      "format": "date-time",
      "readOnly": true,
      "type": "string",
    },
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should mark id property as readonly  1`] = `
Object {
  "properties": Object {
    "id": Object {
      "readOnly": true,
      "type": "string",
    },
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should mark ref populate property as readonly and write only 1`] = `
Object {
  "properties": Object {
    "animals": Object {
      "items": Object {
        "$ref": "#/components/schemas/Animal",
      },
      "readOnly": true,
      "type": "array",
      "writeOnly": true,
    },
    "email": Object {
      "type": "string",
    },
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should mark updatedAt property as readonly  1`] = `
Object {
  "properties": Object {
    "name": Object {
      "type": "string",
    },
    "updatedAt": Object {
      "format": "date-time",
      "readOnly": true,
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should transform relation into their appropriate ID type 1`] = `
Object {
  "parameters": Array [],
  "requestBody": Object {
    "content": Object {
      "application/json": Object {
        "schema": Object {
          "allOf": Array [
            Object {
              "$ref": "#/components/schemas/User",
            },
            Object {
              "properties": Object {
                "animals": Object {
                  "items": Object {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "application/x-www-form-urlencoded": Object {
        "schema": Object {
          "allOf": Array [
            Object {
              "$ref": "#/components/schemas/User",
            },
            Object {
              "properties": Object {
                "animals": Object {
                  "items": Object {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
    },
    "required": true,
  },
  "responses": Object {
    "200": Object {
      "content": Object {
        "application/json": Object {
          "schema": Object {
            "$ref": "#/components/schemas/DynamicType7",
          },
        },
      },
      "description": "Response body",
    },
    "422": Object {
      "content": Object {
        "application/json": Object {
          "schema": Object {
            "$ref": "#/components/schemas/System-ValidationError",
          },
        },
      },
      "description": "Validation error",
    },
  },
  "tags": Array [
    "User",
  ],
}
`;

exports[`Open API Should transform relation into their appropriate ID type on one to one relation 1`] = `
Object {
  "parameters": Array [],
  "requestBody": Object {
    "content": Object {
      "application/json": Object {
        "schema": Object {
          "allOf": Array [
            Object {
              "$ref": "#/components/schemas/User",
            },
            Object {
              "properties": Object {
                "animals": Object {
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "application/x-www-form-urlencoded": Object {
        "schema": Object {
          "allOf": Array [
            Object {
              "$ref": "#/components/schemas/User",
            },
            Object {
              "properties": Object {
                "animals": Object {
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
        },
      },
    },
    "required": true,
  },
  "responses": Object {
    "200": Object {
      "content": Object {
        "application/json": Object {
          "schema": Object {
            "$ref": "#/components/schemas/DynamicType7",
          },
        },
      },
      "description": "Response body",
    },
    "422": Object {
      "content": Object {
        "application/json": Object {
          "schema": Object {
            "$ref": "#/components/schemas/System-ValidationError",
          },
        },
      },
      "description": "Validation error",
    },
  },
  "tags": Array [
    "User",
  ],
}
`;

exports[`Repository Should able to use One To Many Repository in isolation 1`] = `
Object {
  "__v": 1,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
  ],
  "email": "john.doe@gmail.com",
  "name": "John Doe",
}
`;

exports[`Repository Should able to use Repository in isolation 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "email": "john.doe@gmail.com",
  "name": "John Doe",
}
`;
