// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CRUD CRUD Function Should able to filter with exact value GET /users?filter 1`] = `
Array [
  Object {
    "email": "jean.doe@gmail.com",
    "name": "Jean Doe",
  },
]
`;

exports[`CRUD CRUD Function Should able to filter with partial value GET /users?filter 1`] = `
Array [
  Object {
    "email": "jean.doe@gmail.com",
    "name": "Jean Doe",
  },
]
`;

exports[`CRUD CRUD Function Should able to order by property GET /users?offset&limit&name 1`] = `
Array [
  Object {
    "age": 21,
    "name": "Borne",
  },
  Object {
    "age": 21,
    "name": "Anne",
  },
  Object {
    "age": 22,
    "name": "Juliet",
  },
  Object {
    "age": 22,
    "name": "John",
  },
  Object {
    "age": 23,
    "name": "August",
  },
]
`;

exports[`CRUD CRUD Function Should able to query by property GET /users?offset&limit&name 1`] = `
Array [
  Object {
    "email": "jean.doe@gmail.com",
    "name": "Jean Doe",
  },
]
`;

exports[`CRUD CRUD Function Should able to select by property GET /users?offset&limit&name 1`] = `
Array [
  Object {
    "age": 21,
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "name": "John Doe",
  },
]
`;

exports[`CRUD CRUD Function Should able to use request hook 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "email": "john.doe@gmail.com",
  "name": "John Doe",
  "password": "HASH",
}
`;

exports[`CRUD CRUD Function Should ignore filter on non marked property GET /users?filter 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Invalid filter query filter[email]",
      ],
      "path": Array [
        "filter",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`CRUD CRUD Function Should ignore wrong property name on select GET /users/:id 1`] = `
Object {
  "age": 21,
  "name": "John Doe",
}
`;

exports[`CRUD CRUD Function Should select by property GET /users/:id 1`] = `
Object {
  "age": 21,
  "name": "John Doe",
}
`;

exports[`CRUD CRUD Function Should set partial validation on query GET /users?offset&limit&name 1`] = `
Array [
  Object {
    "email": "jean.doe@gmail.com",
    "name": "Juan Doe",
  },
]
`;

exports[`CRUD CRUD with versioning Should able to load entity with versioning 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseControllerGeneric.get     -> GET    /users/:id",
  ],
  Array [
    "2. MongooseControllerGeneric.modify  -> PATCH  /users/:id",
  ],
  Array [
    "3. MongooseControllerGeneric.replace -> PUT    /users/:id",
  ],
  Array [
    "4. MongooseControllerGeneric.delete  -> DELETE /users/:id",
  ],
  Array [
    "5. MongooseControllerGeneric.list    -> GET    /users",
  ],
  Array [
    "6. MongooseControllerGeneric.save    -> POST   /users",
  ],
  Array [],
]
`;

exports[`CRUD CRUD with versioning Should able to load relation entity with versioning 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseOneToMan...eneric.list    -> GET    /users/:pid/tags",
  ],
  Array [
    "2. MongooseOneToMan...eneric.save    -> POST   /users/:pid/tags",
  ],
  Array [
    "3. MongooseOneToMan...eneric.get     -> GET    /users/:pid/tags/:id",
  ],
  Array [
    "4. MongooseOneToMan...eneric.modify  -> PATCH  /users/:pid/tags/:id",
  ],
  Array [
    "5. MongooseOneToMan...eneric.replace -> PUT    /users/:pid/tags/:id",
  ],
  Array [
    "6. MongooseOneToMan...eneric.delete  -> DELETE /users/:pid/tags/:id",
  ],
  Array [],
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to order by properties GET /users/:parentId/animals?offset&limit  1`] = `
Array [
  Object {
    "age": 22,
    "name": "Juliet",
  },
  Object {
    "age": 22,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Abas",
  },
  Object {
    "age": 21,
    "name": "Alba",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to select by properties GET /users/:parentId/animals?offset&limit  1`] = `
Array [
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "name": "Mimi",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to select by property GET /users/:parentId/animals/:id 1`] = `
Object {
  "age": 21,
  "tag": "The tag",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should able to select one to many relation by property GET /users/:parentId 1`] = `
Object {
  "animals": Array [
    Object {
      "age": 21,
      "name": "Mimi",
      "tag": "The tag",
    },
  ],
  "email": "john.doe@gmail.com",
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should filter with exact value GET /users/:parentId/animals?filter  1`] = `
Array [
  Object {
    "name": "Jojo",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should filter with partial value GET /users/:parentId/animals?filter  1`] = `
Array [
  Object {
    "name": "Jojo",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should find by name GET /users/:parentId/animals?offset&limit  1`] = `
Array [
  Object {
    "name": "Jojo",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should ignore filter on non marked property GET /users/:parentId/animals?filter  1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Invalid filter query filter[name]",
      ],
      "path": Array [
        "filter",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`CRUD Nested CRUD One to Many Function Should not save navigation properties for non populate properties POST /users/:parentId/animals 1`] = `
Object {
  "__v": 1,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Mimi",
      "user": Object {
        "animals": Array [],
      },
    },
  ],
  "email": "john.doe@gmail.com",
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should save navigation properties POST /users/:parentId/animals 1`] = `
Object {
  "__v": 1,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Mimi",
      "user": Object {
        "__v": 1,
        "_id": "MONGODB UNIQUE ID",
        "email": "john.doe@gmail.com",
        "name": "John Doe",
      },
    },
  ],
  "email": "john.doe@gmail.com",
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve GET /users/:parentId/animals/:id 1`] = `
Object {
  "name": "Mimi",
  "user": Object {
    "animals": Array [
      Object {},
    ],
    "email": "john.doe@gmail.com",
    "name": "John Doe",
  },
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
  Object {
    "name": "Mimi",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should serve PATCH /users/:parentId/animals/:id 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve POST /users/:parentId/animals 1`] = `
Object {
  "__v": 2,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
  ],
  "email": "john.doe@gmail.com",
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve PUT /users/:parentId/animals/:id 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should set partial validation on PATCH /users/:parentId/animals/:id 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "age": 4,
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should set partial validation on query on GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "age": 5,
    "name": "Jojo",
  },
]
`;

exports[`CRUD One To One Function Should able to add with ID 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animal": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  "name": "John",
}
`;

exports[`CRUD One To One Function Should able to modify relation by ID 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animal": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "name": "Bingo",
  },
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populate if not selected on get by ID 1`] = `
Object {
  "email": "john.doe@gmail.com",
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populate if not selected on get many 1`] = `
Array [
  Object {
    "email": "john.doe@gmail.com",
    "name": "John",
  },
]
`;

exports[`CRUD One To One Function Should not populated one to many 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Bingo",
    },
  ],
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populated one to many 2`] = `
Object {
  "name": "John",
}
`;

exports[`CRUD One To One Function Should populated multiple result 1`] = `
Array [
  Object {
    "animal": Object {
      "name": "Mimi",
    },
    "name": "John",
  },
  Object {
    "animal": Object {
      "name": "Mimi",
    },
    "name": "Jane",
  },
]
`;

exports[`CRUD One To One Function Should populated on get by id 1`] = `
Object {
  "animal": Object {
    "name": "Mimi",
  },
  "name": "John",
}
`;

exports[`CRUD One To One Function Should populated on multiple property 1`] = `
Object {
  "animal": Object {
    "name": "Mimi",
  },
  "name": "John",
  "secondAnimal": Object {
    "name": "Bingo",
  },
}
`;

exports[`CRUD One To One on Nested Object Should able to add with ID 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animal": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should able to modify relation by ID 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animal": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "name": "Bingo",
  },
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should not populated one to many 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Bingo",
    },
  ],
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should not populated one to many 2`] = `
Object {
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should populated multiple result 1`] = `
Array [
  Object {
    "animal": Object {
      "name": "Mimi",
    },
    "name": "John",
  },
  Object {
    "animal": Object {
      "name": "Bingo",
    },
    "name": "Jane",
  },
]
`;

exports[`CRUD One To One on Nested Object Should populated on get by id 1`] = `
Object {
  "animal": Object {
    "name": "Mimi",
  },
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should populated on multiple property 1`] = `
Object {
  "animal": Object {
    "name": "Mimi",
  },
  "name": "John",
  "secondAnimal": Object {
    "name": "Bingo",
  },
}
`;

exports[`Open API Should mark createdAt property as readonly  1`] = `
Object {
  "properties": Object {
    "createdAt": Object {
      "format": "date-time",
      "readOnly": true,
      "type": "string",
    },
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should mark id property as readonly  1`] = `
Object {
  "properties": Object {
    "id": Object {
      "readOnly": true,
      "type": "string",
    },
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should mark ref populate property as readonly and write only 1`] = `
Object {
  "properties": Object {
    "animals": Object {
      "items": Object {
        "allOf": Array [
          Object {
            "$ref": "#/components/schemas/Animal",
          },
          Object {
            "readOnly": true,
            "type": "object",
            "writeOnly": true,
          },
        ],
      },
      "readOnly": true,
      "type": "array",
      "writeOnly": true,
    },
    "email": Object {
      "type": "string",
    },
    "name": Object {
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should mark updatedAt property as readonly  1`] = `
Object {
  "properties": Object {
    "name": Object {
      "type": "string",
    },
    "updatedAt": Object {
      "format": "date-time",
      "readOnly": true,
      "type": "string",
    },
  },
  "type": "object",
}
`;

exports[`Open API Should transform relation into their appropriate ID type 1`] = `
Object {
  "parameters": Array [],
  "requestBody": Object {
    "content": Object {
      "application/json": Object {
        "schema": Object {
          "allOf": Array [
            Object {
              "$ref": "#/components/schemas/User",
            },
            Object {
              "properties": Object {
                "animals": Object {
                  "items": Object {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "application/x-www-form-urlencoded": Object {
        "schema": Object {
          "allOf": Array [
            Object {
              "$ref": "#/components/schemas/User",
            },
            Object {
              "properties": Object {
                "animals": Object {
                  "items": Object {
                    "type": "string",
                  },
                  "type": "array",
                },
              },
              "type": "object",
            },
          ],
        },
      },
    },
    "required": true,
  },
  "responses": Object {
    "200": Object {
      "content": Object {
        "application/json": Object {
          "schema": Object {
            "$ref": "#/components/schemas/DynamicType3",
          },
        },
      },
      "description": "Response body",
    },
    "422": Object {
      "content": Object {
        "application/json": Object {
          "schema": Object {
            "$ref": "#/components/schemas/System-ValidationError",
          },
        },
      },
      "description": "Validation error",
    },
  },
  "tags": Array [
    "User",
  ],
}
`;

exports[`Open API Should transform relation into their appropriate ID type on one to one relation 1`] = `
Object {
  "parameters": Array [],
  "requestBody": Object {
    "content": Object {
      "application/json": Object {
        "schema": Object {
          "allOf": Array [
            Object {
              "$ref": "#/components/schemas/User",
            },
            Object {
              "properties": Object {
                "animals": Object {
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
        },
      },
      "application/x-www-form-urlencoded": Object {
        "schema": Object {
          "allOf": Array [
            Object {
              "$ref": "#/components/schemas/User",
            },
            Object {
              "properties": Object {
                "animals": Object {
                  "type": "string",
                },
              },
              "type": "object",
            },
          ],
        },
      },
    },
    "required": true,
  },
  "responses": Object {
    "200": Object {
      "content": Object {
        "application/json": Object {
          "schema": Object {
            "$ref": "#/components/schemas/DynamicType3",
          },
        },
      },
      "description": "Response body",
    },
    "422": Object {
      "content": Object {
        "application/json": Object {
          "schema": Object {
            "$ref": "#/components/schemas/System-ValidationError",
          },
        },
      },
      "description": "Validation error",
    },
  },
  "tags": Array [
    "User",
  ],
}
`;

exports[`Repository Should able to use One To Many Repository in isolation 1`] = `
Object {
  "__v": 1,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
  ],
  "email": "john.doe@gmail.com",
  "name": "John Doe",
}
`;

exports[`Repository Should able to use Repository in isolation 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "email": "john.doe@gmail.com",
  "name": "John Doe",
}
`;
