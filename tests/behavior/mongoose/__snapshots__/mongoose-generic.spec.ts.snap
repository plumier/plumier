// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CRUD CRUD Function Should able to clear property using null on PUT /users/:id 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "email": "john.doe@gmail.com",
  "id": "MONGODB UNIQUE ID",
  "name": null,
}
`;

exports[`CRUD CRUD Function Should able to create controller using builder 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseControllerGeneric.get     -> GET    /users/:id",
  ],
  Array [
    "2. MongooseControllerGeneric.modify  -> PATCH  /users/:id",
  ],
  Array [
    "3. MongooseControllerGeneric.replace -> PUT    /users/:id",
  ],
  Array [
    "4. MongooseControllerGeneric.delete  -> DELETE /users/:id",
  ],
  Array [
    "5. MongooseControllerGeneric.list    -> GET    /users",
  ],
  Array [
    "6. MongooseControllerGeneric.save    -> POST   /users",
  ],
  Array [],
]
`;

exports[`CRUD CRUD Function Should able to disable some actions from controller builder 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseControllerGeneric.get  -> GET /users/:id",
  ],
  Array [
    "2. MongooseControllerGeneric.list -> GET /users",
  ],
  Array [],
]
`;

exports[`CRUD CRUD Function Should able to filter with exact value GET /users?filter 1`] = `
Array [
  Object {
    "email": "jean.doe@gmail.com",
    "id": "MONGODB UNIQUE ID",
    "name": "Jean Doe",
  },
]
`;

exports[`CRUD CRUD Function Should able to filter with partial value GET /users?filter 1`] = `
Array [
  Object {
    "email": "jean.doe@gmail.com",
    "id": "MONGODB UNIQUE ID",
    "name": "Jean Doe",
  },
]
`;

exports[`CRUD CRUD Function Should able to order by property GET /users?offset&limit&name 1`] = `
Array [
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Borne",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Anne",
  },
  Object {
    "age": 22,
    "id": "MONGODB UNIQUE ID",
    "name": "Juliet",
  },
  Object {
    "age": 22,
    "id": "MONGODB UNIQUE ID",
    "name": "John",
  },
  Object {
    "age": 23,
    "id": "MONGODB UNIQUE ID",
    "name": "August",
  },
]
`;

exports[`CRUD CRUD Function Should able to query by property GET /users?offset&limit&name 1`] = `
Array [
  Object {
    "email": "jean.doe@gmail.com",
    "id": "MONGODB UNIQUE ID",
    "name": "Jean Doe",
  },
]
`;

exports[`CRUD CRUD Function Should able to select by property GET /users?offset&limit&name 1`] = `
Array [
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "John Doe",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "John Doe",
  },
]
`;

exports[`CRUD CRUD Function Should able to use request hook 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "email": "john.doe@gmail.com",
  "id": "MONGODB UNIQUE ID",
  "name": "John Doe",
  "password": "HASH",
}
`;

exports[`CRUD CRUD Function Should ignore wrong property name on select GET /users/:id 1`] = `
Object {
  "age": 21,
  "id": "MONGODB UNIQUE ID",
  "name": "John Doe",
}
`;

exports[`CRUD CRUD Function Should select by property GET /users/:id 1`] = `
Object {
  "age": 21,
  "id": "MONGODB UNIQUE ID",
  "name": "John Doe",
}
`;

exports[`CRUD CRUD Function Should serve data with native array 1`] = `
Object {
  "address": Array [
    "Address1",
    "Address2",
  ],
  "email": "john.doe@gmail.com",
  "id": "MONGODB UNIQUE ID",
  "name": "John Doe",
}
`;

exports[`CRUD CRUD Function Should serve delete using deleteColumn DELETE /users/:id 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "deleted": true,
  "email": "john.doe@gmail.com",
  "id": "MONGODB UNIQUE ID",
  "name": "John Doe",
}
`;

exports[`CRUD CRUD Function Should set partial validation on query GET /users?offset&limit&name 1`] = `
Array [
  Object {
    "email": "jean.doe@gmail.com",
    "id": "MONGODB UNIQUE ID",
    "name": "Juan Doe",
  },
]
`;

exports[`CRUD CRUD with versioning Should able to load entity with versioning 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseControllerGeneric.get     -> GET    /users/:id",
  ],
  Array [
    "2. MongooseControllerGeneric.modify  -> PATCH  /users/:id",
  ],
  Array [
    "3. MongooseControllerGeneric.replace -> PUT    /users/:id",
  ],
  Array [
    "4. MongooseControllerGeneric.delete  -> DELETE /users/:id",
  ],
  Array [
    "5. MongooseControllerGeneric.list    -> GET    /users",
  ],
  Array [
    "6. MongooseControllerGeneric.save    -> POST   /users",
  ],
  Array [],
]
`;

exports[`CRUD CRUD with versioning Should able to load relation entity with versioning 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseOneToMan...eneric.list    -> GET    /users/:pid/tags",
  ],
  Array [
    "2. MongooseOneToMan...eneric.save    -> POST   /users/:pid/tags",
  ],
  Array [
    "3. MongooseOneToMan...eneric.get     -> GET    /users/:pid/tags/:id",
  ],
  Array [
    "4. MongooseOneToMan...eneric.modify  -> PATCH  /users/:pid/tags/:id",
  ],
  Array [
    "5. MongooseOneToMan...eneric.replace -> PUT    /users/:pid/tags/:id",
  ],
  Array [
    "6. MongooseOneToMan...eneric.delete  -> DELETE /users/:pid/tags/:id",
  ],
  Array [],
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to create nested controller using controller builder 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseOneToMan...eneric.list    -> GET    /users/:pid/animals",
  ],
  Array [
    "2. MongooseOneToMan...eneric.save    -> POST   /users/:pid/animals",
  ],
  Array [
    "3. MongooseOneToMan...eneric.get     -> GET    /users/:pid/animals/:id",
  ],
  Array [
    "4. MongooseOneToMan...eneric.modify  -> PATCH  /users/:pid/animals/:id",
  ],
  Array [
    "5. MongooseOneToMan...eneric.replace -> PUT    /users/:pid/animals/:id",
  ],
  Array [
    "6. MongooseOneToMan...eneric.delete  -> DELETE /users/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to disable some actions using controller builder 1`] = `
Array [
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. MongooseOneToMan...eneric.list -> GET /users/:pid/animals",
  ],
  Array [
    "2. MongooseOneToMan...eneric.get  -> GET /users/:pid/animals/:id",
  ],
  Array [],
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to filter one on one relation GET /users/:parentId/animals?filter  1`] = `
Array [
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Jojo",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Jeju",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to order by properties GET /users/:parentId/animals?offset&limit  1`] = `
Array [
  Object {
    "age": 22,
    "id": "MONGODB UNIQUE ID",
    "name": "Juliet",
  },
  Object {
    "age": 22,
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Abas",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Alba",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to select by properties GET /users/:parentId/animals?offset&limit  1`] = `
Array [
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "age": 21,
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should able to select by property GET /users/:parentId/animals/:id 1`] = `
Object {
  "age": 21,
  "id": "MONGODB UNIQUE ID",
  "tag": "The tag",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should able to select one to many relation by property GET /users/:parentId 1`] = `
Object {
  "animals": Array [
    Object {
      "age": 21,
      "id": "MONGODB UNIQUE ID",
      "name": "Mimi",
      "tag": "The tag",
    },
  ],
  "email": "john.doe@gmail.com",
  "id": "MONGODB UNIQUE ID",
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should able to serve delete with deleteColumn DELETE /users/:parentId/animals/:id 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "deleted": true,
  "id": "MONGODB UNIQUE ID",
  "name": "Mimi",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should filter with exact value GET /users/:parentId/animals?filter  1`] = `
Array [
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Jojo",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should filter with partial value GET /users/:parentId/animals?filter  1`] = `
Array [
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Jojo",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should find by name GET /users/:parentId/animals?offset&limit  1`] = `
Array [
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Jojo",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should not save navigation properties for non populate properties POST /users/:parentId/animals 1`] = `
Object {
  "__v": 1,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "id": "MONGODB UNIQUE ID",
      "name": "Mimi",
      "user": Object {
        "animals": Array [],
      },
    },
  ],
  "email": "john.doe@gmail.com",
  "id": "MONGODB UNIQUE ID",
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should save navigation properties POST /users/:parentId/animals 1`] = `
Object {
  "__v": 1,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "id": "MONGODB UNIQUE ID",
      "name": "Mimi",
      "user": Object {
        "__v": 1,
        "_id": "MONGODB UNIQUE ID",
        "email": "john.doe@gmail.com",
        "id": "MONGODB UNIQUE ID",
        "name": "John Doe",
      },
    },
  ],
  "email": "john.doe@gmail.com",
  "id": "MONGODB UNIQUE ID",
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve GET /users/:parentId/animals/:id 1`] = `
Object {
  "id": "MONGODB UNIQUE ID",
  "name": "Mimi",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
]
`;

exports[`CRUD Nested CRUD One to Many Function Should serve PATCH /users/:parentId/animals/:id 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "id": "MONGODB UNIQUE ID",
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve POST /users/:parentId/animals 1`] = `
Object {
  "__v": 2,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
  ],
  "email": "john.doe@gmail.com",
  "id": "MONGODB UNIQUE ID",
  "name": "John Doe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve PUT /users/:parentId/animals/:id 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "id": "MONGODB UNIQUE ID",
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should serve data with native array GET /users/:parentId/animals/:id 1`] = `
Object {
  "id": "MONGODB UNIQUE ID",
  "name": "Mimi",
  "tags": Array [
    "Lorem",
    "Ipsum",
  ],
}
`;

exports[`CRUD Nested CRUD One to Many Function Should set partial validation on PATCH /users/:parentId/animals/:id 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "age": 4,
  "id": "MONGODB UNIQUE ID",
  "name": "Poe",
}
`;

exports[`CRUD Nested CRUD One to Many Function Should set partial validation on query on GET /users/:parentId/animals?offset&limit 1`] = `
Array [
  Object {
    "age": 5,
    "id": "MONGODB UNIQUE ID",
    "name": "Jojo",
  },
]
`;

exports[`CRUD One To One Function Should able to add with ID 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animal": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  "id": "MONGODB UNIQUE ID",
  "name": "John",
}
`;

exports[`CRUD One To One Function Should able to modify relation by ID 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animal": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "id": "MONGODB UNIQUE ID",
    "name": "Bingo",
  },
  "id": "MONGODB UNIQUE ID",
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populate if not selected on get by ID 1`] = `
Object {
  "email": "john.doe@gmail.com",
  "id": "MONGODB UNIQUE ID",
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populate if not selected on get many 1`] = `
Array [
  Object {
    "email": "john.doe@gmail.com",
    "id": "MONGODB UNIQUE ID",
    "name": "John",
  },
]
`;

exports[`CRUD One To One Function Should not populated one to many 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "id": "MONGODB UNIQUE ID",
      "name": "Bingo",
    },
  ],
  "id": "MONGODB UNIQUE ID",
  "name": "John",
}
`;

exports[`CRUD One To One Function Should not populated one to many 2`] = `
Object {
  "id": "MONGODB UNIQUE ID",
  "name": "John",
}
`;

exports[`CRUD One To One Function Should populated multiple result 1`] = `
Array [
  Object {
    "animal": Object {
      "id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
    "id": "MONGODB UNIQUE ID",
    "name": "John",
  },
  Object {
    "animal": Object {
      "id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
    "id": "MONGODB UNIQUE ID",
    "name": "Jane",
  },
]
`;

exports[`CRUD One To One Function Should populated on get by id 1`] = `
Object {
  "animal": Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  "id": "MONGODB UNIQUE ID",
  "name": "John",
}
`;

exports[`CRUD One To One Function Should populated on multiple property 1`] = `
Object {
  "animal": Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  "id": "MONGODB UNIQUE ID",
  "name": "John",
  "secondAnimal": Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Bingo",
  },
}
`;

exports[`CRUD One To One on Nested Object Should able to add with ID 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animal": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  "id": "MONGODB UNIQUE ID",
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should able to modify relation by ID 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animal": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "id": "MONGODB UNIQUE ID",
    "name": "Bingo",
  },
  "id": "MONGODB UNIQUE ID",
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should not populated one to many 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "id": "MONGODB UNIQUE ID",
      "name": "Bingo",
    },
  ],
  "id": "MONGODB UNIQUE ID",
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should not populated one to many 2`] = `
Object {
  "id": "MONGODB UNIQUE ID",
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should populated multiple result 1`] = `
Array [
  Object {
    "animal": Object {
      "id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
    "id": "MONGODB UNIQUE ID",
    "name": "John",
  },
  Object {
    "animal": Object {
      "id": "MONGODB UNIQUE ID",
      "name": "Bingo",
    },
    "id": "MONGODB UNIQUE ID",
    "name": "Jane",
  },
]
`;

exports[`CRUD One To One on Nested Object Should populated on get by id 1`] = `
Object {
  "animal": Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  "id": "MONGODB UNIQUE ID",
  "name": "John",
}
`;

exports[`CRUD One To One on Nested Object Should populated on multiple property 1`] = `
Object {
  "animal": Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Mimi",
  },
  "id": "MONGODB UNIQUE ID",
  "name": "John",
  "secondAnimal": Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Bingo",
  },
}
`;

exports[`CRUD Should able to use entity policy properly 1`] = `
Array [
  Object {
    "email": "john.doe@gmail.com",
    "id": "MONGODB UNIQUE ID",
    "name": "John",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Jane",
  },
  Object {
    "id": "MONGODB UNIQUE ID",
    "name": "Joe",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with exact value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": "MONGODB UNIQUE ID",
    "number": 1,
    "string": "lorem",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with gt value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with gte value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with lt value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": "MONGODB UNIQUE ID",
    "number": 1,
    "string": "lorem",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with lte value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": "MONGODB UNIQUE ID",
    "number": 1,
    "string": "lorem",
  },
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 2,
    "string": "ipsum",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with not equal value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter Generic Controller Should able to filter with range value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with exact value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": "MONGODB UNIQUE ID",
    "number": 1,
    "string": "lorem",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with gt value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with gte value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with lt value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": "MONGODB UNIQUE ID",
    "number": 1,
    "string": "lorem",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with lte value 1`] = `
Array [
  Object {
    "boolean": true,
    "id": "MONGODB UNIQUE ID",
    "number": 1,
    "string": "lorem",
  },
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 2,
    "string": "ipsum",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with not equal value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with not equal value on relation property 1`] = `
Array [
  Object {
    "boolean": true,
    "id": "MONGODB UNIQUE ID",
    "number": 1,
    "string": "lorem",
  },
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should able to filter with range value 1`] = `
Array [
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 2,
    "string": "ipsum",
  },
  Object {
    "boolean": false,
    "id": "MONGODB UNIQUE ID",
    "number": 3,
    "string": "dolor",
  },
]
`;

exports[`Filter One To Many Generic Controller Should give proper validation when asked to query equals on nested property 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Nested type filters are not supported",
      ],
      "path": Array [
        "filter",
        "parent",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Filter One To Many Generic Controller Should give proper validation when asked to query not equals on nested property 1`] = `
Object {
  "message": Array [
    Object {
      "messages": Array [
        "Nested type filters are not supported",
      ],
      "path": Array [
        "filter",
        "parent",
      ],
    },
  ],
  "status": 422,
}
`;

exports[`Repository Should able to use One To Many Repository in isolation 1`] = `
Object {
  "__v": 1,
  "_id": "MONGODB UNIQUE ID",
  "animals": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "id": "MONGODB UNIQUE ID",
      "name": "Mimi",
    },
  ],
  "email": "john.doe@gmail.com",
  "name": "John Doe",
}
`;

exports[`Repository Should able to use Repository in isolation 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "email": "john.doe@gmail.com",
  "name": "John Doe",
}
`;
