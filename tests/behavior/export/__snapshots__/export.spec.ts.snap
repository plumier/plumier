// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Export Should export @plumier/core 1`] = `
Object {
  "ActionResult": ActionResult,
  "AuthDecoratorImpl": AuthDecoratorImpl,
  "Authenticated": "Authenticated",
  "AuthenticatedAuthPolicy": AuthenticatedAuthPolicy,
  "ControllerGeneric": ControllerGeneric,
  "CustomAuthPolicy": CustomAuthPolicy,
  "DefaultDependencyResolver": DefaultDependencyResolver,
  "DefaultFacility": DefaultFacility,
  "EntityAuthPolicy": EntityAuthPolicy,
  "FormFile": FormFile,
  "HttpStatus": Object {
    "100": "Continue",
    "101": "SwitchingProtocols",
    "102": "Processing",
    "200": "Ok",
    "201": "Created",
    "202": "Accepted",
    "203": "NonAuthoritativeInformation",
    "204": "NoContent",
    "205": "ResetContent",
    "206": "PartialContent",
    "207": "MultiStatus",
    "208": "AlreadyReported",
    "226": "ImUsed",
    "300": "MultipleChoices",
    "301": "MovedPermanently",
    "302": "Found",
    "303": "SeeOther",
    "304": "NotModified",
    "305": "UseProxy",
    "306": "SwitchProxy",
    "307": "TemporaryRedirect",
    "308": "PermanentRedirect",
    "400": "BadRequest",
    "401": "Unauthorized",
    "402": "PaymentRequired",
    "403": "Forbidden",
    "404": "NotFound",
    "405": "MethodNotAllowed",
    "406": "NotAcceptable",
    "407": "ProxyAuthenticationRequired",
    "408": "RequestTimeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "LengthRequired",
    "412": "PreconditionFailed",
    "413": "PayloadTooLarge",
    "414": "UriTooLong",
    "415": "UnsupportedMediaType",
    "416": "RangeNotSatisfiable",
    "417": "ExpectationFailed",
    "418": "IAmATeapot",
    "421": "MisdirectedRequest",
    "422": "UnprocessableEntity",
    "423": "Locked",
    "424": "FailedDependency",
    "426": "UpgradeRequired",
    "428": "PreconditionRequired",
    "429": "TooManyRequests",
    "431": "RequestHeaderFieldsTooLarge",
    "451": "UnavailableForLegalReasons",
    "500": "InternalServerError",
    "501": "NotImplemented",
    "502": "BadGateway",
    "503": "ServiceUnavailable",
    "504": "GatewayTimeout",
    "505": "HttpVersionNotSupported",
    "506": "VariantAlsoNegotiates",
    "507": "InsufficientStorage",
    "508": "LoopDetected",
    "510": "NotExtended",
    "511": "NetworkAuthenticationRequired",
    "Accepted": 202,
    "AlreadyReported": 208,
    "BadGateway": 502,
    "BadRequest": 400,
    "Conflict": 409,
    "Continue": 100,
    "Created": 201,
    "ExpectationFailed": 417,
    "FailedDependency": 424,
    "Forbidden": 403,
    "Found": 302,
    "GatewayTimeout": 504,
    "Gone": 410,
    "HttpVersionNotSupported": 505,
    "IAmATeapot": 418,
    "ImUsed": 226,
    "InsufficientStorage": 507,
    "InternalServerError": 500,
    "LengthRequired": 411,
    "Locked": 423,
    "LoopDetected": 508,
    "MethodNotAllowed": 405,
    "MisdirectedRequest": 421,
    "MovedPermanently": 301,
    "MultiStatus": 207,
    "MultipleChoices": 300,
    "NetworkAuthenticationRequired": 511,
    "NoContent": 204,
    "NonAuthoritativeInformation": 203,
    "NotAcceptable": 406,
    "NotExtended": 510,
    "NotFound": 404,
    "NotImplemented": 501,
    "NotModified": 304,
    "Ok": 200,
    "PartialContent": 206,
    "PayloadTooLarge": 413,
    "PaymentRequired": 402,
    "PermanentRedirect": 308,
    "PreconditionFailed": 412,
    "PreconditionRequired": 428,
    "Processing": 102,
    "ProxyAuthenticationRequired": 407,
    "RangeNotSatisfiable": 416,
    "RequestHeaderFieldsTooLarge": 431,
    "RequestTimeout": 408,
    "ResetContent": 205,
    "SeeOther": 303,
    "ServiceUnavailable": 503,
    "SwitchProxy": 306,
    "SwitchingProtocols": 101,
    "TemporaryRedirect": 307,
    "TooManyRequests": 429,
    "Unauthorized": 401,
    "UnavailableForLegalReasons": 451,
    "UnprocessableEntity": 422,
    "UnsupportedMediaType": 415,
    "UpgradeRequired": 426,
    "UriTooLong": 414,
    "UseProxy": 305,
    "VariantAlsoNegotiates": 506,
  },
  "HttpStatusError": HttpStatusError,
  "MetadataImpl": MetadataImpl,
  "MiddlewareUtil": Object {
    "extractDecorators": extractDecorators,
    "fromKoa": fromKoa,
  },
  "NestedControllerGeneric": NestedControllerGeneric,
  "ParameterBinderMiddleware": ParameterBinderMiddleware,
  "PolicyAuthorizer": PolicyAuthorizer,
  "Public": "Public",
  "PublicAuthPolicy": PublicAuthPolicy,
  "ReadonlyAuthPolicy": ReadonlyAuthPolicy,
  "RedirectActionResult": RedirectActionResult,
  "RouteDecoratorImpl": RouteDecoratorImpl,
  "ValidationError": ValidationError,
  "ValidatorMiddleware": ValidatorMiddleware,
  "WriteonlyAuthPolicy": WriteonlyAuthPolicy,
  "analyzeAuthPolicyNameConflict": analyzeAuthPolicyNameConflict,
  "analyzeModel": analyzeModel,
  "analyzeRoutes": analyzeRoutes,
  "api": Object {
    "description": description,
    "enums": enums,
    "hideRelations": hideRelations,
    "name": name,
    "readonly": readonly,
    "required": required,
    "response": response,
    "tag": tag,
    "writeonly": writeonly,
  },
  "appendRoute": appendRoute,
  "authPolicy": authPolicy,
  "authorize": AuthDecoratorImpl {},
  "bind": Object {
    "body": body,
    "cookie": cookie,
    "ctx": ctx,
    "custom": custom,
    "formFile": formFile,
    "header": header,
    "query": query,
    "request": request,
    "user": user,
  },
  "binder": binder,
  "checkAuthorize": checkAuthorize,
  "createAuthContext": createAuthContext,
  "createAuthorizationAnalyzer": createAuthorizationAnalyzer,
  "domain": domain,
  "ellipsis": ellipsis,
  "entity": Object {
    "deleteColumn": deleteColumn,
    "primaryId": primaryId,
    "relation": relation,
  },
  "entityHelper": Object {
    "getIdProp": getIdProp,
    "getIdType": getIdType,
    "getRelationInfo": getRelationInfo,
  },
  "entityPolicy": entityPolicy,
  "entityProvider": entityProvider,
  "errorMessage": Object {
    "ActionParameterDoesNotHaveTypeInfo": "Parameter binding skipped because action parameters doesn't have type information in ({0})",
    "ArrayWithoutTypeInformation": "Parameter binding skipped because array element doesn't have type information in ({0})",
    "ControllerPathNotFound": "Controller file or directory {0} not found",
    "CustomRouteEndWithParameter": "Custom route path '{0}' on {1} entity, require path that ends with route parameter, example: animals/:animalId",
    "CustomRouteMustHaveOneParameter": "Custom route path '{0}' on {1} entity, must have one route parameter, example: animals/:animalId",
    "CustomRouteRequiredTwoParameters": "Nested custom route path '{0}' on {1} entity, must have two route parameters, example: users/:userId/animals/:animalId",
    "DuplicateRouteFound": "Duplicate route found in {0}",
    "EntityRequireID": "Entity {0} used by generic controller doesn't have an ID property",
    "FileSizeExceeded": "File {0} size exceeded the maximum size",
    "GenericControllerImplementationNotFound": "Generic controller implementation not installed",
    "GenericControllerInNonArrayProperty": "Nested generic controller can not be created using non array relation on: {0}.{1}",
    "GenericControllerMissingTypeInfo": "{0} marked with @genericController() but doesn't have type information",
    "GenericControllerRequired": "@genericController() required generic controller implementation, please install the appropriate facility",
    "ModelWithoutTypeInformation": "Parameter binding skipped because {0} doesn't have type information on its properties",
    "NumberOfFilesExceeded": "Number of files exceeded the maximum allowed",
    "ObjectNotFound": "Object with id {0} not found in Object registry",
    "PropertyWithoutTypeInformation": "Parameter binding skipped because property doesn't have type information in ({0})",
    "RouteDoesNotHaveBackingParam": "Route parameters ({0}) doesn't have appropriate backing parameter",
    "UnableToConvertValue": "Unable to convert \\"{0}\\" into {1}",
    "UnableToInstantiateModel": "Unable to instantiate {0}. Domain model should not throw error inside constructor",
  },
  "executeAuthorizer": executeAuthorizer,
  "findClassRecursive": findClassRecursive,
  "findFilesRecursive": findFilesRecursive,
  "generateRoutes": generateRoutes,
  "getChildValue": getChildValue,
  "getPolicyInfo": getPolicyInfo,
  "getRouteAuthorizeDecorators": getRouteAuthorizeDecorators,
  "globAsync": globAsync,
  "globalPolicies": Array [],
  "hasKeyOf": hasKeyOf,
  "invoke": invoke,
  "isCustomClass": isCustomClass,
  "meta": Object {
    "method": method,
    "parameterProperties": parameterProperties,
    "property": property,
    "type": type,
  },
  "middleware": Object {
    "use": use,
  },
  "postSave": postSave,
  "preSave": preSave,
  "printAnalysis": printAnalysis,
  "printTable": printTable,
  "response": Object {
    "json": json,
    "redirect": redirect,
  },
  "responseType": responseType,
  "route": RouteDecoratorImpl {},
  "router": router,
  "throwAuthError": throwAuthError,
  "toBoolean": toBoolean,
  "transformController": transformController,
  "updateRouteAuthorizationAccess": updateRouteAuthorizationAccess,
  "val": Object {
    "UUID": UUID,
    "after": after,
    "alpha": alpha,
    "alphanumeric": alphanumeric,
    "ascii": ascii,
    "base64": base64,
    "before": before,
    "byteLength": byteLength,
    "creditCard": creditCard,
    "currency": currency,
    "custom": ,
    "dataURI": dataURI,
    "decimal": decimal,
    "divisibleBy": divisibleBy,
    "email": email,
    "enums": ,
    "float": float,
    "fqdn": fqdn,
    "fullWidth": fullWidth,
    "halfWidth": halfWidth,
    "hash": hash,
    "hexColor": hexColor,
    "hexadecimal": hexadecimal,
    "int": int,
    "ip": ip,
    "isbn": isbn,
    "isin": isin,
    "iso31661Alpha2": iso31661Alpha2,
    "iso8601": iso8601,
    "isrc": isrc,
    "issn": issn,
    "json": json,
    "latLong": latLong,
    "length": length,
    "lowerCase": lowerCase,
    "macAddress": macAddress,
    "md5": md5,
    "mimeType": mimeType,
    "mobilePhone": mobilePhone,
    "mongoId": mongoId,
    "multibyte": multibyte,
    "numeric": numeric,
    "partial": partial,
    "port": port,
    "postalCode": postalCode,
    "regex": regex,
    "required": ,
    "result": ,
    "slug": slug,
    "surrogatePair": surrogatePair,
    "uppercase": uppercase,
    "url": url,
    "variableWidth": variableWidth,
    "whiteListed": whiteListed,
  },
  "validate": validate,
}
`;

exports[`Export Should export @plumier/generic-controller 1`] = `
Object {
  "ControllerBuilder": ControllerBuilder,
  "IdentifierResult": IdentifierResult,
  "RepoBaseControllerGeneric": RepoBaseControllerGeneric,
  "RepoBaseNestedControllerGeneric": RepoBaseNestedControllerGeneric,
  "RequestHookMiddleware": RequestHookMiddleware,
  "RouteDecoratorID": Symbol(generic-controller:route),
  "authorizeActions": authorizeActions,
  "createGenericController": createGenericController,
  "createGenericControllerType": createGenericControllerType,
  "createNestedGenericControllerType": createNestedGenericControllerType,
  "createRouteDecorators": createRouteDecorators,
  "decorateCustomQuery": decorateCustomQuery,
  "decorateRoute": decorateRoute,
  "decorateTransformers": decorateTransformers,
  "generateGenericControllerRoutes": generateGenericControllerRoutes,
  "genericController": genericController,
  "genericControllerRegistry": Map {},
  "getManyCustomQuery": getManyCustomQuery,
  "getOneCustomQuery": getOneCustomQuery,
  "getTransformer": getTransformer,
  "ignoreActions": ignoreActions,
  "postSaveValue": Symbol(plumier:postSaveEntity),
  "responseTransformer": responseTransformer,
  "splitPath": splitPath,
  "updateGenericControllerRegistry": updateGenericControllerRegistry,
}
`;

exports[`Export Should export @plumier/jwt 1`] = `
Object {
  "JwtAuthFacility": JwtAuthFacility,
}
`;

exports[`Export Should export @plumier/mongoose 1`] = `
Object {
  "CanNotValidateNonProperty": "MONG1002: @val.unique() only can be applied on property",
  "GenericController": GenericController,
  "MongooseControllerGeneric": MongooseControllerGeneric,
  "MongooseFacility": MongooseFacility,
  "MongooseHelper": MongooseHelper,
  "MongooseNestedControllerGeneric": MongooseNestedControllerGeneric,
  "MongooseNestedRepository": MongooseNestedRepository,
  "MongooseRepository": MongooseRepository,
  "ReferenceTypeNotRegistered": "MONG1000: Type {0} required type {1} which is not registered as Mongoose model",
  "collection": collection,
  "createGenericControllerMongoose": createGenericControllerMongoose,
  "default": bound model,
  "filterConverter": ,
  "getDefinition": getDefinition,
  "getModels": bound getModels,
  "model": bound model,
  "models": Map {},
  "orderConverter": ,
  "proxy": bound proxy,
  "selectConverter": ,
}
`;

exports[`Export Should export @plumier/query-parser 1`] = `
Object {
  "FilterQueryAuthorizeMiddleware": FilterQueryAuthorizeMiddleware,
  "OrderQueryAuthorizeMiddleware": OrderQueryAuthorizeMiddleware,
  "SelectQueryAuthorizeMiddleware": SelectQueryAuthorizeMiddleware,
  "createCustomFilterConverter": createCustomFilterConverter,
  "createCustomOrderConverter": createCustomOrderConverter,
  "createCustomSelectConverter": createCustomSelectConverter,
  "createQueryParserAnalyzer": createQueryParserAnalyzer,
  "filterNodeWalker": filterNodeWalker,
  "filterParser": filterParser,
  "getFilterDecorators": getFilterDecorators,
  "getKeyValue": getKeyValue,
  "orderParser": orderParser,
  "parseFilter": parseFilter,
  "selectParser": selectParser,
}
`;

exports[`Export Should export @plumier/reflect 1`] = `
Object {
  "DECORATOR_KEY": "plumier.key:DECORATOR",
  "DESIGN_PARAMETER_TYPE": "design:paramtypes",
  "DESIGN_RETURN_TYPE": "design:returntype",
  "DESIGN_TYPE": "design:type",
  "DecoratorId": Symbol(tinspector:decoratorId),
  "DecoratorOptionId": Symbol(tinspector:decoratorOption),
  "IsDynamicType": Symbol(),
  "createClass": createClass,
  "decorate": decorate,
  "decorateClass": decorateClass,
  "decorateMethod": decorateMethod,
  "decorateParameter": decorateParameter,
  "decorateProperty": decorateProperty,
  "default": reflect,
  "generic": Object {
    "argument": argument,
    "create": create,
    "getGenericTypeParameters": getGenericTypeParameters,
    "getType": getType,
    "template": template,
  },
  "ignore": ignore,
  "mergeDecorator": mergeDecorator,
  "metadata": Object {
    "getAllMetadata": getAllMetadata,
    "getMetadata": getMetadata,
    "getMetadataForApplyTo": getMetadataForApplyTo,
    "getOwnMetadata": getOwnMetadata,
    "mergeMetadata": mergeMetadata,
    "setMetadata": setMetadata,
  },
  "noop": noop,
  "parameterProperties": parameterProperties,
  "parser": Object {
    "getClassMembers": getClassMembers,
    "getConstructorParameters": getConstructorParameters,
    "getFunctionParameters": getFunctionParameters,
    "getMethodParameters": getMethodParameters,
    "parseClass": parseClass,
    "parseFunction": parseFunction,
  },
  "reflect": reflect,
  "reflection": Object {
    "getMethods": getMethods,
    "getProperties": getProperties,
    "getTypeFromDecorator": getTypeFromDecorator,
    "isCallback": isCallback,
    "isConstructor": isConstructor,
    "isCustomClass": isCustomClass,
    "isParameterProperties": isParameterProperties,
  },
  "type": type,
  "useCache": useCache,
}
`;

exports[`Export Should export @plumier/serve-static 1`] = `
Object {
  "FileActionResult": FileActionResult,
  "HistoryApiFallbackMiddleware": HistoryApiFallbackMiddleware,
  "ServeStaticFacility": ServeStaticFacility,
  "ServeStaticMiddleware": ServeStaticMiddleware,
}
`;

exports[`Export Should export @plumier/social-login 1`] = `
Object {
  "CookieName": Object {
    "csrfSecret": "plum-oauth:csrf-secret",
    "provider": "plum-oauth:provider",
  },
  "FacebookOAuthFacility": FacebookOAuthFacility,
  "GitHubOAuthFacility": GitHubOAuthFacility,
  "GitLabOAuthFacility": GitLabOAuthFacility,
  "GoogleOAuthFacility": GoogleOAuthFacility,
  "OAuthProviderBaseFacility": OAuthProviderBaseFacility,
  "TwitterOAuthFacility": TwitterOAuthFacility,
  "redirectUri": redirectUri,
  "splitName": splitName,
}
`;

exports[`Export Should export @plumier/swagger 1`] = `
Object {
  "SwaggerFacility": SwaggerFacility,
  "refFactory": refFactory,
  "transform": transform,
  "transformTypeAdvance": transformTypeAdvance,
}
`;

exports[`Export Should export @plumier/testing 1`] = `
Object {
  "cleanupConsole": cleanupConsole,
}
`;

exports[`Export Should export @plumier/typeorm 1`] = `
Object {
  "GenericController": GenericController,
  "TypeORMControllerGeneric": TypeORMControllerGeneric,
  "TypeORMFacility": TypeORMFacility,
  "TypeORMNestedControllerGeneric": TypeORMNestedControllerGeneric,
  "TypeORMNestedRepository": TypeORMNestedRepository,
  "TypeORMRepository": TypeORMRepository,
  "createGenericControllerTypeORM": createGenericControllerTypeORM,
  "filterConverter": ,
  "normalizeEntity": ,
  "orderConverter": ,
  "selectConverter": ,
}
`;

exports[`Export Should export @plumier/validator 1`] = `
Object {
  "PartialValidator": Symbol(tc:partial),
  "RequiredValidator": Symbol(tc:required),
  "Result": Object {
    "create": create,
    "error": error,
  },
  "convert": convert,
  "createValidation": createValidation,
  "createValidator": createValidator,
  "default": factory,
  "defaultConverters": Map {
    Boolean => booleanConverter,
    Date => dateConverter,
    Number => numberConverter,
    String => stringConverter,
  },
  "getAst": getAst,
  "partial": partial,
  "val": Object {
    "UUID": UUID,
    "after": after,
    "alpha": alpha,
    "alphanumeric": alphanumeric,
    "ascii": ascii,
    "base64": base64,
    "before": before,
    "byteLength": byteLength,
    "creditCard": creditCard,
    "currency": currency,
    "custom": ,
    "dataURI": dataURI,
    "decimal": decimal,
    "divisibleBy": divisibleBy,
    "email": email,
    "enums": ,
    "file": ,
    "float": float,
    "fqdn": fqdn,
    "fullWidth": fullWidth,
    "halfWidth": halfWidth,
    "hash": hash,
    "hexColor": hexColor,
    "hexadecimal": hexadecimal,
    "image": ,
    "int": int,
    "ip": ip,
    "isbn": isbn,
    "isin": isin,
    "iso31661Alpha2": iso31661Alpha2,
    "iso8601": iso8601,
    "isrc": isrc,
    "issn": issn,
    "json": json,
    "latLong": latLong,
    "length": length,
    "lowerCase": lowerCase,
    "macAddress": macAddress,
    "md5": md5,
    "mimeType": mimeType,
    "mobilePhone": mobilePhone,
    "mongoId": mongoId,
    "multibyte": multibyte,
    "numeric": numeric,
    "partial": partial,
    "port": port,
    "postalCode": postalCode,
    "regex": regex,
    "required": ,
    "result": ,
    "slug": slug,
    "surrogatePair": surrogatePair,
    "unique": ,
    "uppercase": uppercase,
    "url": url,
    "variableWidth": variableWidth,
    "whiteListed": whiteListed,
  },
  "validate": validate,
  "validatorVisitor": validatorVisitor,
}
`;

exports[`Export Should export plumier 1`] = `
Object {
  "ActionResult": ActionResult,
  "Authenticated": "Authenticated",
  "ControllerBuilder": ControllerBuilder,
  "ControllerFacility": ControllerFacility,
  "DefaultDependencyResolver": DefaultDependencyResolver,
  "DefaultFacility": DefaultFacility,
  "ForceHttpsMiddleware": ForceHttpsMiddleware,
  "FormFile": FormFile,
  "HttpStatus": Object {
    "100": "Continue",
    "101": "SwitchingProtocols",
    "102": "Processing",
    "200": "Ok",
    "201": "Created",
    "202": "Accepted",
    "203": "NonAuthoritativeInformation",
    "204": "NoContent",
    "205": "ResetContent",
    "206": "PartialContent",
    "207": "MultiStatus",
    "208": "AlreadyReported",
    "226": "ImUsed",
    "300": "MultipleChoices",
    "301": "MovedPermanently",
    "302": "Found",
    "303": "SeeOther",
    "304": "NotModified",
    "305": "UseProxy",
    "306": "SwitchProxy",
    "307": "TemporaryRedirect",
    "308": "PermanentRedirect",
    "400": "BadRequest",
    "401": "Unauthorized",
    "402": "PaymentRequired",
    "403": "Forbidden",
    "404": "NotFound",
    "405": "MethodNotAllowed",
    "406": "NotAcceptable",
    "407": "ProxyAuthenticationRequired",
    "408": "RequestTimeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "LengthRequired",
    "412": "PreconditionFailed",
    "413": "PayloadTooLarge",
    "414": "UriTooLong",
    "415": "UnsupportedMediaType",
    "416": "RangeNotSatisfiable",
    "417": "ExpectationFailed",
    "418": "IAmATeapot",
    "421": "MisdirectedRequest",
    "422": "UnprocessableEntity",
    "423": "Locked",
    "424": "FailedDependency",
    "426": "UpgradeRequired",
    "428": "PreconditionRequired",
    "429": "TooManyRequests",
    "431": "RequestHeaderFieldsTooLarge",
    "451": "UnavailableForLegalReasons",
    "500": "InternalServerError",
    "501": "NotImplemented",
    "502": "BadGateway",
    "503": "ServiceUnavailable",
    "504": "GatewayTimeout",
    "505": "HttpVersionNotSupported",
    "506": "VariantAlsoNegotiates",
    "507": "InsufficientStorage",
    "508": "LoopDetected",
    "510": "NotExtended",
    "511": "NetworkAuthenticationRequired",
    "Accepted": 202,
    "AlreadyReported": 208,
    "BadGateway": 502,
    "BadRequest": 400,
    "Conflict": 409,
    "Continue": 100,
    "Created": 201,
    "ExpectationFailed": 417,
    "FailedDependency": 424,
    "Forbidden": 403,
    "Found": 302,
    "GatewayTimeout": 504,
    "Gone": 410,
    "HttpVersionNotSupported": 505,
    "IAmATeapot": 418,
    "ImUsed": 226,
    "InsufficientStorage": 507,
    "InternalServerError": 500,
    "LengthRequired": 411,
    "Locked": 423,
    "LoopDetected": 508,
    "MethodNotAllowed": 405,
    "MisdirectedRequest": 421,
    "MovedPermanently": 301,
    "MultiStatus": 207,
    "MultipleChoices": 300,
    "NetworkAuthenticationRequired": 511,
    "NoContent": 204,
    "NonAuthoritativeInformation": 203,
    "NotAcceptable": 406,
    "NotExtended": 510,
    "NotFound": 404,
    "NotImplemented": 501,
    "NotModified": 304,
    "Ok": 200,
    "PartialContent": 206,
    "PayloadTooLarge": 413,
    "PaymentRequired": 402,
    "PermanentRedirect": 308,
    "PreconditionFailed": 412,
    "PreconditionRequired": 428,
    "Processing": 102,
    "ProxyAuthenticationRequired": 407,
    "RangeNotSatisfiable": 416,
    "RequestHeaderFieldsTooLarge": 431,
    "RequestTimeout": 408,
    "ResetContent": 205,
    "SeeOther": 303,
    "ServiceUnavailable": 503,
    "SwitchProxy": 306,
    "SwitchingProtocols": 101,
    "TemporaryRedirect": 307,
    "TooManyRequests": 429,
    "Unauthorized": 401,
    "UnavailableForLegalReasons": 451,
    "UnprocessableEntity": 422,
    "UnsupportedMediaType": 415,
    "UpgradeRequired": 426,
    "UriTooLong": 414,
    "UseProxy": 305,
    "VariantAlsoNegotiates": 506,
  },
  "HttpStatusError": HttpStatusError,
  "LoggerFacility": LoggerFacility,
  "MiddlewareUtil": Object {
    "extractDecorators": extractDecorators,
    "fromKoa": fromKoa,
  },
  "ParameterBinderMiddleware": ParameterBinderMiddleware,
  "PolicyAuthorizer": PolicyAuthorizer,
  "Public": "Public",
  "RestfulApiFacility": RestfulApiFacility,
  "RouteDecoratorImpl": RouteDecoratorImpl,
  "ValidatorMiddleware": ValidatorMiddleware,
  "WebApiFacility": WebApiFacility,
  "api": Object {
    "description": description,
    "enums": enums,
    "hideRelations": hideRelations,
    "name": name,
    "readonly": readonly,
    "required": required,
    "response": response,
    "tag": tag,
    "writeonly": writeonly,
  },
  "authPolicy": authPolicy,
  "authorize": AuthDecoratorImpl {},
  "bind": Object {
    "body": body,
    "cookie": cookie,
    "ctx": ctx,
    "custom": custom,
    "formFile": formFile,
    "header": header,
    "query": query,
    "rawBody": ,
    "request": request,
    "user": user,
  },
  "binder": binder,
  "createCustomFilterConverter": createCustomFilterConverter,
  "createCustomOrderConverter": createCustomOrderConverter,
  "createCustomSelectConverter": createCustomSelectConverter,
  "default": Plumier,
  "domain": domain,
  "entity": Object {
    "deleteColumn": deleteColumn,
    "primaryId": primaryId,
    "relation": relation,
  },
  "entityPolicy": entityPolicy,
  "entityProvider": entityProvider,
  "filterParser": filterParser,
  "genericController": genericController,
  "meta": Object {
    "method": method,
    "parameterProperties": parameterProperties,
    "property": property,
    "type": type,
  },
  "middleware": Object {
    "use": use,
  },
  "orderParser": orderParser,
  "postSave": postSave,
  "preSave": preSave,
  "response": Object {
    "json": json,
    "redirect": redirect,
  },
  "route": RouteDecoratorImpl {},
  "selectParser": selectParser,
  "val": Object {
    "UUID": UUID,
    "after": after,
    "alpha": alpha,
    "alphanumeric": alphanumeric,
    "ascii": ascii,
    "base64": base64,
    "before": before,
    "byteLength": byteLength,
    "creditCard": creditCard,
    "currency": currency,
    "custom": ,
    "dataURI": dataURI,
    "decimal": decimal,
    "divisibleBy": divisibleBy,
    "email": email,
    "enums": ,
    "file": ,
    "float": float,
    "fqdn": fqdn,
    "fullWidth": fullWidth,
    "halfWidth": halfWidth,
    "hash": hash,
    "hexColor": hexColor,
    "hexadecimal": hexadecimal,
    "image": ,
    "int": int,
    "ip": ip,
    "isbn": isbn,
    "isin": isin,
    "iso31661Alpha2": iso31661Alpha2,
    "iso8601": iso8601,
    "isrc": isrc,
    "issn": issn,
    "json": json,
    "latLong": latLong,
    "length": length,
    "lowerCase": lowerCase,
    "macAddress": macAddress,
    "md5": md5,
    "mimeType": mimeType,
    "mobilePhone": mobilePhone,
    "mongoId": mongoId,
    "multibyte": multibyte,
    "numeric": numeric,
    "partial": partial,
    "port": port,
    "postalCode": postalCode,
    "regex": regex,
    "required": ,
    "result": ,
    "slug": slug,
    "surrogatePair": surrogatePair,
    "unique": ,
    "uppercase": uppercase,
    "url": url,
    "variableWidth": variableWidth,
    "whiteListed": whiteListed,
  },
  "validate": validate,
}
`;
