// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Mongoose Analyzer Should get simple analysis 1`] = `
Array [
  Object {
    "collection": "db.dummies",
    "definition": "{ stringProp: { type: [Function: String] }, numberProp: { type: [Function: Number] }, booleanProp: { type: [Function: Boolean] }, dateProp: { type: [Function: Date] } }",
    "name": "Dummy",
    "option": "{ timestamps: true }",
    "typeName": "Dummy",
  },
]
`;

exports[`Mongoose Analyzer Should print analysis 1`] = `
Array [
  Array [
    "1. Dummy        -> Dummy        db.dummies
{ timestamps: true }",
  ],
  Array [
    "2. User         -> User         db.users",
  ],
  Array [
    "3. UserActivity -> UserActivity db.useractivities
{ timestamps: true, toObject: { virtuals: true } }",
  ],
]
`;

exports[`Mongoose Analyzer Should print analysis on global mode and facility 1`] = `
Array [
  Array [
    "1. Dummy        -> Dummy        db.dummies
{ timestamps: true }",
  ],
  Array [
    "2. User         -> User         db.users",
  ],
  Array [
    "3. UserActivity -> UserActivity db.useractivities
{ timestamps: true, toObject: { virtuals: true } }",
  ],
  Array [],
  Array [
    "Route Analysis Report",
  ],
  Array [
    "1. AnimalController.get() -> GET /animal/get",
  ],
  Array [],
]
`;

exports[`Mongoose Schema Configuration Should able specify extra configuration from factory 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "createdAt": DATE NOW,
  "stringProp": "string",
  "updatedAt": DATE NOW,
}
`;

exports[`Mongoose Schema Configuration Should able to enable timestamps using decorator 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "createdAt": DATE NOW,
  "stringProp": "string",
  "updatedAt": DATE NOW,
}
`;

exports[`Mongoose Schema Configuration Should able to enable timestamps using decorator from base class 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "createdAt": DATE NOW,
  "deleted": false,
  "stringProp": "string",
  "updatedAt": DATE NOW,
}
`;

exports[`Mongoose Schema Configuration Should able to hook schema generation 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Configuration Should able to override timestamps decorator from factory 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Configuration Should able to specify configuration 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "STRING",
}
`;

exports[`Mongoose Schema Configuration Should able to specify default value 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "deleted": false,
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Configuration Should able to specify default value on base class 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "deleted": false,
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Configuration Should able to specify multiple configuration decorators 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "LOREM",
}
`;

exports[`Mongoose Schema Configuration Should able to use @schema.property() as noop decorator 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Generation Should able to call model factory multiple time on the same model 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Generation Should able to call model factory multiple time on the same model 2`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "strong",
}
`;

exports[`Mongoose Schema Generation Should able to call model factory multiple time on the same model with custom name 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Generation Should able to call model factory multiple time on the same model with custom name 2`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "strong",
}
`;

exports[`Mongoose Schema Generation Should able to rename collection with different name 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Generation Should able to rename collection with different name using object configuration 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "stringProp": "string",
}
`;

exports[`Mongoose Schema Generation Should throw error when dependent type specified by ref (populate) not registered as model 1`] = `"MONG1000: Type Dummy required type Nest which is not registered as Mongoose model"`;

exports[`Mongoose Schema Generation Should work with nested array model 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "children": Array [
    Object {
      "_id": "MONGODB UNIQUE ID",
      "booleanProp": true,
      "stringProp": "string",
    },
  ],
}
`;

exports[`Mongoose Schema Generation Should work with nested array with ref (populate) 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "children": Array [
    Object {
      "__v": 0,
      "_id": "MONGODB UNIQUE ID",
      "booleanProp": true,
      "stringProp": "string",
    },
  ],
}
`;

exports[`Mongoose Schema Generation Should work with nested model 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "child": Object {
    "booleanProp": true,
    "stringProp": "string",
  },
}
`;

exports[`Mongoose Schema Generation Should work with nested model with ref (populate) 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "child": Object {
    "__v": 0,
    "_id": "MONGODB UNIQUE ID",
    "booleanProp": true,
    "stringProp": "string",
  },
}
`;

exports[`Mongoose Schema Generation Should work with primitive array 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "booleanProp": Array [
    true,
    false,
  ],
  "dateProp": Array [
    2020-2-2,
    2020-2-3,
  ],
  "numberProp": Array [
    123,
    456,
  ],
  "stringProp": Array [
    "string",
    "strong",
  ],
}
`;

exports[`Mongoose Schema Generation Should work with primitive data 1`] = `
Object {
  "__v": 0,
  "_id": "MONGODB UNIQUE ID",
  "booleanProp": true,
  "dateProp": 2020-2-2,
  "numberProp": 123,
  "stringProp": "string",
}
`;
